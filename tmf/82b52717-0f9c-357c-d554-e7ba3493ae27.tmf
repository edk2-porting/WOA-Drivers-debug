// PDB:  qcpep7180.pdb
// PDB:  Last Updated :2021-10-17:21:53:20:368 (UTC) [tracepdb]
82b52717-0f9c-357c-d554-e7ba3493ae27 Tsens // SRC=TsensDevice.c MJ= MN=
#typev TsensDevice_c1230 69 "%0TsensDevice.c::%!FUNC! sensor %10!u! is calibrated" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TSENS_LOG FUNC=Tsens_CheckCalibration
{
uSensor, ItemLong -- 10
}
#typev TsensDevice_c1226 68 "%0TsensDevice.c::%!FUNC! sensor is dead" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_CheckCalibration
{
}
#typev TsensDevice_c1217 67 "%0TsensDevice.c::%!FUNC! invalid parameter uSensor" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_CheckCalibration
{
}
#typev TsensDevice_c1211 66 "%0TsensDevice.c::%!FUNC! Tsens is not initialized" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_CheckCalibration
{
}
#typev TsensDevice_c1207 65 "%0TsensDevice.c::%!FUNC! sensor %10!u!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TSENS_ENTRY_EXIT FUNC=Tsens_CheckCalibration
{
uSensor, ItemLong -- 10
}
#typev TsensDevice_c1152 60 "%0TsensDevice.c::%!FUNC! num sensors: %10!u!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TSENS_LOG FUNC=Tsens_GetNumSensors
{
*puNumSensors, ItemLong -- 10
}
#typev TsensDevice_c1146 59 "%0TsensDevice.c::%!FUNC! invalid parameter pnNumSensors" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_GetNumSensors
{
}
#typev TsensDevice_c1140 58 "%0TsensDevice.c::%!FUNC! Tsens is not initialized" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_GetNumSensors
{
}
#typev TsensDevice_c1136 57 "%0TsensDevice.c::%!FUNC!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TSENS_ENTRY_EXIT FUNC=Tsens_GetNumSensors
{
}
#typev TsensDevice_c864 38 "%0TsensDevice.c::%!FUNC! sensor %10!u! reports temp %11!d! deci deg C" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TSENS_ENTRY_EXIT FUNC=Tsens_GetTemp
{
uSensor, ItemLong -- 10
*pnDeciDegC, ItemLong -- 11
}
#typev TsensDevice_c858 37 "%0TsensDevice.c::%!FUNC! sensor is dead" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_GetTemp
{
}
#typev TsensDevice_c839 36 "%0TsensDevice.c::%!FUNC! invalid parameter pnDeciDegC" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_GetTemp
{
}
#typev TsensDevice_c833 35 "%0TsensDevice.c::%!FUNC! invalid parameter uSensor" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_GetTemp
{
}
#typev TsensDevice_c827 34 "%0TsensDevice.c::%!FUNC! Tsens is not initialized" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_GetTemp
{
}
#typev TsensDevice_c823 33 "%0TsensDevice.c::%!FUNC! sensor: %10!u!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TSENS_ENTRY_EXIT FUNC=Tsens_GetTemp
{
uSensor, ItemLong -- 10
}
#typev TsensDevice_c537 20 "%0TsensDevice.c::%!FUNC! controller %10!u!, channel %11!u!, temp %12!d! deci deg C" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TSENS_LOG FUNC=Tsens_GetTempInternal
{
uController, ItemLong -- 10
uChannel, ItemLong -- 11
*pnDeciDegC, ItemLong -- 12
}
#typev TsensDevice_c957 48 "%0TsensDevice.c::%!FUNC! sensor %10!u!, min temp %11!d! deci deg C, max temp %12!d! deci deg C" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TSENS_LOG FUNC=Tsens_GetTempRange
{
uSensor, ItemLong -- 10
*pnMinDeciDegC, ItemLong -- 11
*pnMaxDeciDegC, ItemLong -- 12
}
#typev TsensDevice_c950 47 "%0TsensDevice.c::%!FUNC! sensor is dead" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_GetTempRange
{
}
#typev TsensDevice_c941 46 "%0TsensDevice.c::%!FUNC! invalid parameter pnMaxDeciDegC" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_GetTempRange
{
}
#typev TsensDevice_c935 45 "%0TsensDevice.c::%!FUNC! invalid parameter pnMinDeciDegC" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_GetTempRange
{
}
#typev TsensDevice_c929 44 "%0TsensDevice.c::%!FUNC! invalid parameter uSensor" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_GetTempRange
{
}
#typev TsensDevice_c923 43 "%0TsensDevice.c::%!FUNC! Tsens is not initialized" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_GetTempRange
{
}
#typev TsensDevice_c919 42 "%0TsensDevice.c::%!FUNC! sensor: %10!u!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TSENS_ENTRY_EXIT FUNC=Tsens_GetTempRange
{
uSensor, ItemLong -- 10
}
#typev TsensDevice_c1014 51 "%0TsensDevice.c::%!FUNC! failed to map memory for Tsens SROT registers: %10!s!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_Init
{
status, ItemNTSTATUS -- 10
}
#typev TsensDevice_c1021 52 "%0TsensDevice.c::%!FUNC! failed to map memory for Tsens TM registers: %10!s!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_Init
{
status, ItemNTSTATUS -- 10
}
#typev TsensDevice_c1046 54 "%0TsensDevice.c::%!FUNC! failed to create Tsens INT spin lock: %10!s!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_Init
{
status, ItemNTSTATUS -- 10
}
#typev TsensDevice_c1036 53 "%0TsensDevice.c::%!FUNC! failed to create Tsens spin lock: %10!s!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_Init
{
status, ItemNTSTATUS -- 10
}
#typev TsensDevice_c992 50 "%0TsensDevice.c::%!FUNC! WDFDEVICE is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_Init
{
}
#typev TsensDevice_c979 49 "%0TsensDevice.c::%!FUNC!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TSENS_ENTRY_EXIT FUNC=Tsens_Init
{
}
#typev TsensDevice_c277 11 "%0TsensDevice.c::%!FUNC! failed to create Tsens low high interrupt: %10!s!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_InitControllers
{
status, ItemNTSTATUS -- 10
}
#typev TsensDevice_c351 18 "%0TsensDevice.c::%!FUNC! TSENS: Start of TM dump for controller %10!u!, iteration %11!u!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_LogDump
{
uController, ItemLong -- 10
i, ItemLong -- 11
}
#typev TsensDevice_c343 17 "%0TsensDevice.c::%!FUNC! TSENS: Start of SROT dump for controller %10!u!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_LogDump
{
uController, ItemLong -- 10
}
#typev TsensDevice_c336 16 "%0TsensDevice.c::%!FUNC! TSENS: ctrl: %10!u!, bus-id: %11!u!, value: 0x%12!08x!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_LogDump
{
uController, ItemLong -- 10
i, ItemLong -- 11
uVal, ItemLong -- 12
}
#typev TsensDevice_c328 15 "%0TsensDevice.c::%!FUNC! TSENS: Log dump for controller %10!u!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_LogDump
{
uController, ItemLong -- 10
}
#typev TsensDevice_c326 14 "%0TsensDevice.c::%!FUNC!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TSENS_ENTRY_EXIT FUNC=Tsens_LogDump
{
}
#typev TsensDevice_c313 13 "%0TsensDevice.c::%!FUNC! TSENS: ctrl: %10!u! 0x%11!08x! | 0x%12!08x! 0x%13!08x! 0x%14!08x! 0x%15!08x!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_LogRegisters
{
uController, ItemLong -- 10
uStartOffset, ItemLong -- 11
a, ItemLong -- 12
b, ItemLong -- 13
c, ItemLong -- 14
d, ItemLong -- 15
}
#typev TsensDevice_c296 12 "%0TsensDevice.c::%!FUNC!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TSENS_ENTRY_EXIT FUNC=Tsens_LogRegisters
{
}
#typev TsensDevice_c170 10 "%0TsensDevice.c::%!FUNC! invalid parameter virtAddress" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_MapHWIORegion
{
}
#typev TsensDevice_c1110 56 "%0TsensDevice.c::%!FUNC!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TSENS_ENTRY_EXIT FUNC=Tsens_ReInit
{
}
#typev TsensDevice_c1178 64 "%0TsensDevice.c::%!FUNC! invalid parameter bClientEnabled" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_SetEnableThresholds
{
}
#typev TsensDevice_c1166 62 "%0TsensDevice.c::%!FUNC! Tsens is not initialized" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_SetEnableThresholds
{
}
#typev TsensDevice_c1162 61 "%0TsensDevice.c::%!FUNC! eClient=%10!d!, bClientEnabled=%11!u!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TSENS_ENTRY_EXIT FUNC=Tsens_SetEnableThresholds
{
(INT32)eClient, ItemLong -- 10
(UINT32)bClientEnabled, ItemLong -- 11
}
#typev TsensDevice_c748 28 "%0TsensDevice.c::%!FUNC! invalid parameter eClient" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_SetThreshold
{
}
#typev TsensDevice_c760 30 "%0TsensDevice.c::%!FUNC! invalid parameter eThreshold" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_SetThreshold
{
}
#typev TsensDevice_c775 32 "%0TsensDevice.c::%!FUNC! sensor is dead" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_SetThreshold
{
}
#typev TsensDevice_c766 31 "%0TsensDevice.c::%!FUNC! invalid parameter nDeciDegC" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_SetThreshold
{
}
#typev TsensDevice_c754 29 "%0TsensDevice.c::%!FUNC! invalid parameter uSensor" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_SetThreshold
{
}
#typev TsensDevice_c742 27 "%0TsensDevice.c::%!FUNC! Tsens is not initialized" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TSENS_LOG FUNC=Tsens_SetThreshold
{
}
#typev TsensDevice_c734 26 "%0TsensDevice.c::%!FUNC! client %10!u!, sensor %11!u!, threshold %12!u!, temp %13!d! deci deg C" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TSENS_ENTRY_EXIT FUNC=Tsens_SetThreshold
{
(UINT32)eClient, ItemLong -- 10
uSensor, ItemLong -- 11
(UINT32)eThreshold, ItemLong -- 12
nDeciDegC, ItemLong -- 13
}
#typev TsensDevice_c683 25 "%0TsensDevice.c::%!FUNC! upper threshold, client %10!u!, sensor %11!u!, sensor temp %12!d! deci deg C, threshold temp %13!d! deci deg C" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TSENS_LOG FUNC=Tsens_ThresholdInterruptDpc
{
uClient, ItemLong -- 10
uSensor, ItemLong -- 11
nDeciDegC, ItemLong -- 12
pThreshold->nThresholdDeciDegC, ItemLong -- 13
}
#typev TsensDevice_c663 24 "%0TsensDevice.c::%!FUNC! upper threshold, client %10!u!, sensor %11!u!, sensor temp %12!d! deci deg C, threshold temp %13!d! deci deg C" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TSENS_LOG FUNC=Tsens_ThresholdInterruptDpc
{
uClient, ItemLong -- 10
uSensor, ItemLong -- 11
nDeciDegC, ItemLong -- 12
pThreshold->nThresholdDeciDegC, ItemLong -- 13
}
#typev TsensDevice_c641 23 "%0TsensDevice.c::%!FUNC! upper threshold, client %10!u!, sensor %11!u!, sensor temp %12!d! deci deg C, threshold temp %13!d! deci deg C" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TSENS_LOG FUNC=Tsens_ThresholdInterruptDpc
{
uClient, ItemLong -- 10
uSensor, ItemLong -- 11
nDeciDegC, ItemLong -- 12
pThreshold->nThresholdDeciDegC, ItemLong -- 13
}
#typev TsensDevice_c601 22 "%0TsensDevice.c::%!FUNC!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TSENS_ENTRY_EXIT FUNC=Tsens_ThresholdInterruptDpc
{
}
#typev TsensDevice_c556 21 "%0TsensDevice.c::%!FUNC!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TSENS_ENTRY_EXIT FUNC=Tsens_ThresholdInterruptIsr
{
}
#typev TsensDevice_c374 19 "%0TsensDevice.c::%!FUNC!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=TSENS_ENTRY_EXIT FUNC=Tsens_UpdateThresholds
{
}
