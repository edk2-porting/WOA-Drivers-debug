// PDB:  qciommu.pdb
// PDB:  Last Updated :2022-05-17:11:06:06:456 (UTC) [tracepdb]
6ccf75f1-0230-3bfe-73f0-67cdd1693715 IOMMU // SRC=Vcm.cpp MJ= MN=
#typev Vcm_cpp4547 283 "%0 Vcm.cpp::%!FUNC!::4547 : pNode->GetAVCM() is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=CheckErrataApplicableClients
{
}
#typev Vcm_cpp4530 282 "%0 Vcm.cpp::%!FUNC!::4530 : pAssocitatedAVCMsCollection is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=CheckErrataApplicableClients
{
}
#typev Vcm_cpp1075 45 "%0 Vcm.cpp::%!FUNC! :Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1067 44 "%0 Vcm.cpp::%!FUNC!::1067 : Hyp call SmmuHypAssignPageTableNodes to assign PageTable to/from CP VM Failed, ACVM_CP_ID:[0x%10!x!], toCPVM:[0x%11!x!], VCM:[0x%12!p!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
ACVM_CP_ID, ItemLong -- 10
toCPVM, ItemLong -- 11
VcmId, ItemPtr -- 12
}
#typev Vcm_cpp1035 43 "%0 Vcm.cpp::%!FUNC!::1035 : Invalid AVCM CP ID." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1019 42 "%0 Vcm.cpp::%!FUNC!::1019 : pNode->GetAVCM() is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1006 41 "%0 Vcm.cpp::%!FUNC!::1006 :Access Control VM mismatch" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp999 40 "%0 Vcm.cpp::%!FUNC!::999 : pNode->GetAVCM() is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp983 39 "%0 Vcm.cpp::%!FUNC!::983 : pAssocitatedAVCMsCollection is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp976 38 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp321 12 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmAddAVCMToCollection
{
}
#typev Vcm_cpp310 11 "%0 Vcm.cpp::%!FUNC!::310 : pNode memory allocation failed." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmAddAVCMToCollection
{
}
#typev Vcm_cpp301 10 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmAddAVCMToCollection
{
}
#typev Vcm_cpp439 21 "%0 Vcm.cpp::%!FUNC!::439 : SmmuFlushContextTLB failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmFlushTLBsAssociatedWith
{
}
#typev Vcm_cpp427 20 "%0 Vcm.cpp::%!FUNC!::427 : pNode->GetAVCM() is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmFlushTLBsAssociatedWith
{
}
#typev Vcm_cpp408 19 "%0 Vcm.cpp::%!FUNC!::408 : pAssocitatedAVCMsCollection is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmFlushTLBsAssociatedWith
{
}
#typev Vcm_cpp395 18 "%0 Vcm.cpp::%!FUNC!::395 : Invalid parameter - VcmId is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmFlushTLBsAssociatedWith
{
}
#typev Vcm_cpp389 17 "%0 Vcm.cpp::%!FUNC!::389 : Invalid parameter - VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmFlushTLBsAssociatedWith
{
}
#typev Vcm_cpp2657 144 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalActivate
{
}
#typev Vcm_cpp2646 143 "%0 Vcm.cpp::%!FUNC!::2646 : SmmuPageTableBind failed, AvcmID:[0x%10!p!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalActivate
{
AvcmId, ItemPtr -- 10
}
#typev Vcm_cpp2633 142 "%0 Vcm.cpp::%!FUNC!::2633 : AvcmId is already active, AvcmID:[0x%10!p!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalActivate
{
AvcmId, ItemPtr -- 10
}
#typev Vcm_cpp2621 141 "%0 Vcm.cpp::%!FUNC!::2621 : AvcmIDBarker is Invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalActivate
{
}
#typev Vcm_cpp2612 140 "%0 Vcm.cpp::%!FUNC!::2612 : AvcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalActivate
{
}
#typev Vcm_cpp2603 139 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalActivate
{
}
#typev Vcm_cpp2428 129 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2417 128 "%0 Vcm.cpp::%!FUNC!::2417 : VcmAddAVCMToCollection failed VcmId:[0x%10!p!], avcm:[0x%11!p!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
VcmId, ItemPtr -- 10
avcm, ItemPtr -- 11
}
#typev Vcm_cpp2393 127 "%0 Vcm.cpp::%!FUNC!::2393 : WdfMemoryCreate failed -- could not allocate memory for avcm" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2367 126 "%0 Vcm.cpp::%!FUNC!::2367 : SmmuPageTableAlloc failed for VcmId:[0x%10!p!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
VcmId, ItemPtr -- 10
}
#typev Vcm_cpp2336 125 "%0 Vcm.cpp::%!FUNC!::2336 : Context bank of different VMs cannot have same VCM , pContextBankinAvcmlist->eAVCM[0x%10!x!] != SmmuContextBankId->eAVCM[0x%11!x!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
pContextBankinAvcmlist->eAVCM, ItemLong -- 10
SmmuContextBankId->eAVCM, ItemLong -- 11
}
#typev Vcm_cpp2318 124 "%0 Vcm.cpp::%!FUNC!::2318 : pAssocitatedAVCMsCollection is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2309 123 "%0 Vcm.cpp::%!FUNC!::2309 :Access Control VM mismatch, SmmuContextBankId->eAVCM[0x%10!x!] != VcmId->Attr[0x%11!x!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
SmmuContextBankId->eAVCM, ItemLong -- 10
VcmId->Attr, ItemLong -- 11
}
#typev Vcm_cpp2304 122 "%0 Vcm.cpp::%!FUNC!::2304 :CtxId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2298 121 "%0 Vcm.cpp::%!FUNC!::2298 : Vcm Barker corrupted" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2291 120 "%0 Vcm.cpp::%!FUNC!::2291 : VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2287 119 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp1936 95 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1929 94 "%0 Vcm.cpp::%!FUNC!::1929 : Backfill ghost mdl pages failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1902 93 "%0 Vcm.cpp::%!FUNC!::1902 : SmmuPageTableMap failed for ResId:[0x%10!p!], physicalPageList.SizeOfArray:[0x%11!I64x!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
ResId, ItemPtr -- 10
physicalPageList.SizeOfArray, ItemLongLongX -- 11
}
#typev Vcm_cpp1885 92 "%0 Vcm.cpp::%!FUNC!::1885 : ProcessWhitelistPTNodes Failed for ResId:[0x%10!p!], ResId->Addr:[0x%11!I64x!], ResId->Size:[0x%12!I64x!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
ResId, ItemPtr -- 10
ResId->Addr, ItemLongLongX -- 11
ResId->Size, ItemLongLongX -- 12
}
#typev Vcm_cpp1863 91 "%0 Vcm.cpp::%!FUNC!::1863 : could not get pagelist" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1848 90 "%0 Vcm.cpp::%!FUNC!::1848 : Reservation is already backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1840 89 "%0 Vcm.cpp::%!FUNC!::1840 : Reservation is already backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1833 88 "%0 Vcm.cpp::%!FUNC!::1833 : Mdl Object is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1826 87 "%0 Vcm.cpp::%!FUNC!::1826 :ResId cannot be used with this API" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1817 86 "%0 Vcm.cpp::%!FUNC!::1817 : ResId barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1810 85 "%0 Vcm.cpp::%!FUNC!::1810 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1805 84 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBack
{
}
#typev Vcm_cpp2105 108 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2099 107 "%0 Vcm.cpp::%!FUNC!::2099 : Backfill ghost mdl pages failed for ResId:[0x%10!p!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
ResId, ItemPtr -- 10
}
#typev Vcm_cpp2072 106 "%0 Vcm.cpp::%!FUNC!::2072 : SmmuPageTableMapContiguous failed for ResId:[0x%10!p!], PhysAddr:[0x%11!I64x!], Size:[0x%12!I64x!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
ResId, ItemPtr -- 10
PhysAddr, ItemLongLongX -- 11
Size, ItemLongLongX -- 12
}
#typev Vcm_cpp2051 105 "%0 Vcm.cpp::%!FUNC!::2051 : ProcessWhitelistPTNodes Failed , ResId:[0x%10!p!], ResId->Addr:[0x%11!I64x!], ResId->Size:[0x%12!I64x!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
ResId, ItemPtr -- 10
ResId->Addr, ItemLongLongX -- 11
ResId->Size, ItemLongLongX -- 12
}
#typev Vcm_cpp2032 104 "%0 Vcm.cpp::%!FUNC!::2032 : PhysAddr address not aligned to 4k, PhysAddr:[0x%10!I64x!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
PhysAddr, ItemLongLongX -- 10
}
#typev Vcm_cpp2025 103 "%0 Vcm.cpp::%!FUNC!::2025 : Size of PhysAddr address not aligned to 4k" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2018 102 "%0 Vcm.cpp::%!FUNC!::2018 : Size of PhysAddr address is zero" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2011 101 "%0 Vcm.cpp::%!FUNC!::2011 : Reservation is already backed, ResId:[%10!p!], Size:[0x%11!I64x!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
ResId, ItemPtr -- 10
Size, ItemLongLongX -- 11
}
#typev Vcm_cpp2003 100 "%0 Vcm.cpp::%!FUNC!::2003 : Reservation is already backed, ResId:[%10!p!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
ResId, ItemPtr -- 10
}
#typev Vcm_cpp1996 99 "%0 Vcm.cpp::%!FUNC!::1996 :ResId cannot be used with this API" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp1987 98 "%0 Vcm.cpp::%!FUNC!::1987 : ResId barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp1980 97 "%0 Vcm.cpp::%!FUNC!::1980 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp1975 96 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp3798 226 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3787 225 "%0 Vcm.cpp::%!FUNC!::3787 : SmmuPageTableUnMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3746 224 "%0 Vcm.cpp::%!FUNC!::3746 : Pagelist is invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3730 223 "%0 Vcm.cpp::%!FUNC!::3730 : BackFill MDL not setup properly" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3715 222 "%0 Vcm.cpp::%!FUNC!::3715 : Cannot backfill if reservation is not already backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3708 221 "%0 Vcm.cpp::%!FUNC!::3708 : Already backfilled" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3698 220 "%0 Vcm.cpp::%!FUNC!::3698 : ResId is INVALID" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3689 219 "%0 Vcm.cpp::%!FUNC!::3689 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3684 218 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp4034 243 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp4025 242 "%0 Vcm.cpp::%!FUNC!::4025 : SmmuPageTableMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp4009 241 "%0 Vcm.cpp::%!FUNC!::4009 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3979 240 "%0 Vcm.cpp::%!FUNC!::3979 : Size mismatch -- physical memory not equal to the virtual space to be backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3972 239 "%0 Vcm.cpp::%!FUNC!::3972 : Bound not created with to allow VcmBackInBound" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3965 238 "%0 Vcm.cpp::%!FUNC!::3965 : BoundId is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3960 237 "%0 Vcm.cpp::%!FUNC!::3960 : BoundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3955 236 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3875 233 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3865 232 "%0 Vcm.cpp::%!FUNC!::3865 : VcmFlushTLBsAssociatedWith failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3853 231 "%0 Vcm.cpp::%!FUNC!::3853 : SmmuPageTableUnMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3836 230 "%0 Vcm.cpp::%!FUNC!::3836 : Reservation is NOT backfilled" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3828 229 "%0 Vcm.cpp::%!FUNC!::3828 : ResId is Corrupted" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3821 228 "%0 Vcm.cpp::%!FUNC!::3821 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3815 227 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3896 235 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalClearFault
{
}
#typev Vcm_cpp3894 234 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalClearFault
{
}
#typev Vcm_cpp832 30 "%0 Vcm.cpp::%!FUNC! :Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp768 29 "%0 Vcm.cpp::%!FUNC!::768 : Failed to initialize Virtmem" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp758 28 "%0 Vcm.cpp::%!FUNC!::758 :pAssocitatedAVCMsCollection is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp722 27 "%0 Vcm.cpp::%!FUNC!::722 : Failed to create wait lock" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp712 26 "%0 Vcm.cpp::%!FUNC!::712 : Failed to allocate memory for VCM" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp692 25 "%0 Vcm.cpp::%!FUNC!::692 : Invalid parameter - Requested address space exceeds 32b boundary" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp685 24 "%0 Vcm.cpp::%!FUNC!::685 : Invalid paramter - multiple ACVM attr" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp679 23 "%0 Vcm.cpp::%!FUNC!::679 : Invalid paramter - Len cannot be 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp674 22 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp3163 178 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3145 177 "%0 Vcm.cpp::%!FUNC!::3145 : SmmuPageTableReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3111 176 "%0 Vcm.cpp::%!FUNC!::3111 : VcmManagementVirtmemInit failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3089 175 "%0 Vcm.cpp::%!FUNC!::3089 : VcmManagementVirtmemAlloc failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3068 174 "%0 Vcm.cpp::%!FUNC!::3068 : Memory allocation failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3044 173 "%0 Vcm.cpp::%!FUNC!::3044 : Special bound needs preallocated L2" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3036 172 "%0 Vcm.cpp::%!FUNC!::3036 : Vcm is not associated, VcmId:[0x%10!p!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
VcmId, ItemPtr -- 10
}
#typev Vcm_cpp3027 171 "%0 Vcm.cpp::%!FUNC!::3027 : Len is 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3020 170 "%0 Vcm.cpp::%!FUNC!::3020 : VcmId is Invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3014 169 "%0 Vcm.cpp::%!FUNC!::3014 : VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3008 168 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp2755 150 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalDeactivate
{
}
#typev Vcm_cpp2745 149 "%0 Vcm.cpp::%!FUNC!::2745 : SmmuPageTableUnBind failed, AvcmID:[0x%10!p!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeactivate
{
AvcmId, ItemPtr -- 10
}
#typev Vcm_cpp2731 148 "%0 Vcm.cpp::%!FUNC!::2731 : Association already not active, AvcmID:[0x%10!p!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeactivate
{
AvcmId, ItemPtr -- 10
}
#typev Vcm_cpp2717 147 "%0 Vcm.cpp::%!FUNC!::2717 : AvcmId->AvcmBarker != AVCM_BARKER" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeactivate
{
}
#typev Vcm_cpp2707 146 "%0 Vcm.cpp::%!FUNC!::2707 : AvcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeactivate
{
}
#typev Vcm_cpp2698 145 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalDeactivate
{
}
#typev Vcm_cpp2517 135 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp2491 134 "%0 Vcm.cpp::%!FUNC!::2491 : VcmRemoveAVCMFromCollection failed , avcmid:[0x%10!p!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeassoc
{
AvcmId, ItemPtr -- 10
}
#typev Vcm_cpp2482 133 "%0 Vcm.cpp::%!FUNC!::2482 : AvcmId is in use right now , avcmid:[%10!p!], AvcmId->Status:%11!d!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeassoc
{
AvcmId, ItemPtr -- 10
AvcmId->Status, ItemLong -- 11
}
#typev Vcm_cpp2472 132 "%0 Vcm.cpp::%!FUNC!::2472 : AvcmBarker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp2466 131 "%0 Vcm.cpp::%!FUNC!::2466 : AvcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp2462 130 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp939 37 "%0 Vcm.cpp::%!FUNC! :Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalFree
{
}
#typev Vcm_cpp911 36 "%0 Vcm.cpp::%!FUNC!::911 : SmmuPageTableFree Failed, PageTableHandle:[0x%10!I64x!], VcmId:[0x%11!p!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFree
{
VcmId->PageTableHandle, ItemLongLongX -- 10
VcmId, ItemPtr -- 11
}
#typev Vcm_cpp900 35 "%0 Vcm.cpp::%!FUNC!::900 : Vcm is currently busy 1, VcmId:[0x%10!p!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFree
{
VcmId, ItemPtr -- 10
}
#typev Vcm_cpp890 34 "%0 Vcm.cpp::%!FUNC!::890 : Vcm is currently busy 0, VcmId:[0x%10!p!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFree
{
VcmId, ItemPtr -- 10
}
#typev Vcm_cpp880 33 "%0 Vcm.cpp::%!FUNC!::880 : Invalid parameter - VcmId is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFree
{
}
#typev Vcm_cpp874 32 "%0 Vcm.cpp::%!FUNC!::874 : Invalid parameter - VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFree
{
}
#typev Vcm_cpp868 31 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalFree
{
}
#typev Vcm_cpp3599 209 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3581 208 "%0 Vcm.cpp::%!FUNC!::3581 : SmmuPageTableUnReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3564 207 "%0 Vcm.cpp::%!FUNC!::3564 : VcmManagementVirtmemFree failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3550 206 "%0 Vcm.cpp::%!FUNC!::3550 : VcmManagementVirtmemDeinit failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3539 205 "%0 Vcm.cpp::%!FUNC!::3539 : Active reservations within the bound" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3533 204 "%0 Vcm.cpp::%!FUNC!::3533 : Bound barker is invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3526 203 "%0 Vcm.cpp::%!FUNC!::3526 : BoundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3522 202 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3662 217 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetBoundSize
{
}
#typev Vcm_cpp3656 216 "%0 Vcm.cpp::%!FUNC!::3656 : BoundId is INVALID" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetBoundSize
{
}
#typev Vcm_cpp3649 215 "%0 Vcm.cpp::%!FUNC!::3649 : BoundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetBoundSize
{
}
#typev Vcm_cpp3646 214 "%0 Vcm.cpp::%!FUNC! : Enter" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetBoundSize
{
}
#typev Vcm_cpp3632 213 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetBoundStartAddr
{
}
#typev Vcm_cpp3625 212 "%0 Vcm.cpp::%!FUNC!::3625 : BoundId is INVALID" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetBoundStartAddr
{
}
#typev Vcm_cpp3618 211 "%0 Vcm.cpp::%!FUNC!::3618 : BoundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetBoundStartAddr
{
}
#typev Vcm_cpp3614 210 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetBoundStartAddr
{
}
#typev Vcm_cpp2807 154 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetDevAddr
{
}
#typev Vcm_cpp2799 153 "%0 Vcm.cpp::%!FUNC!::2799 : Reservation Id invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetDevAddr
{
}
#typev Vcm_cpp2792 152 "%0 Vcm.cpp::%!FUNC!::2792 : Reservation Id is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetDevAddr
{
}
#typev Vcm_cpp2787 151 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetDevAddr
{
}
#typev Vcm_cpp4407 274 "%0 Vcm.cpp::%!FUNC!::4407 :PageTableHandle is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetPTBaseAddr
{
}
#typev Vcm_cpp4402 273 "%0 Vcm.cpp::%!FUNC!::4402 :A valid page table does not exist" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetPTBaseAddr
{
}
#typev Vcm_cpp4397 272 "%0 Vcm.cpp::%!FUNC!::4397 : VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetPTBaseAddr
{
}
#typev Vcm_cpp4392 271 "%0 Vcm.cpp::%!FUNC!::4392 : AvcmIDBarker is Invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetPTBaseAddr
{
}
#typev Vcm_cpp4387 270 "%0 Vcm.cpp::%!FUNC!::4387 : AvcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetPTBaseAddr
{
}
#typev Vcm_cpp2874 159 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetReservation
{
}
#typev Vcm_cpp2862 158 "%0 Vcm.cpp::%!FUNC!::2862 : Deivcee address is invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetReservation
{
}
#typev Vcm_cpp2854 157 "%0 Vcm.cpp::%!FUNC!::2854 : VcmId is invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetReservation
{
}
#typev Vcm_cpp2847 156 "%0 Vcm.cpp::%!FUNC!::2847 : VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetReservation
{
}
#typev Vcm_cpp2842 155 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetReservation
{
}
#typev Vcm_cpp1758 83 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetReservationAttr
{
}
#typev Vcm_cpp1750 82 "%0 Vcm.cpp::%!FUNC!::1750 : ResId barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetReservationAttr
{
}
#typev Vcm_cpp1743 81 "%0 Vcm.cpp::%!FUNC!::1743 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetReservationAttr
{
}
#typev Vcm_cpp1738 80 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetReservationAttr
{
}
#typev Vcm_cpp4361 269 "%0 Vcm.cpp::%!FUNC!::4361 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4346 268 "%0 Vcm.cpp::%!FUNC!::4346 :Failed API SmmuPartialMapUnmap" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4327 267 "%0 Vcm.cpp::%!FUNC!::4327 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4310 266 "%0 Vcm.cpp::%!FUNC!::4310 : pPageList Object is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4299 265 "%0 Vcm.cpp::%!FUNC!::4299 :ResId cannot be used with this API" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4286 264 "%0 Vcm.cpp::%!FUNC!::4286 : ResId barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4275 263 "%0 Vcm.cpp::%!FUNC!::4275 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4722 291 "%0 Vcm.cpp::%!FUNC!::4722 :Failed SmmuRemoveContextFromCollection with %10!s!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPutDomainInPassThrough
{
retVal, ItemNTSTATUS -- 10
}
#typev Vcm_cpp4712 290 "%0 Vcm.cpp::%!FUNC!::4712 : IommuDomainConfigure failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPutDomainInPassThrough
{
}
#typev Vcm_cpp4665 289 "%0 Vcm.cpp::%!FUNC!::4665 :Domain is not attached, Invalid domain mode change request" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPutDomainInPassThrough
{
}
#typev Vcm_cpp4659 288 "%0 Vcm.cpp::%!FUNC!::4659 :SMMU Context Bank is invalid." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPutDomainInPassThrough
{
}
#typev Vcm_cpp4648 287 "%0 Vcm.cpp::%!FUNC!::4648 :SmmuInternalGetARIDHandle Fail" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPutDomainInPassThrough
{
}
#typev Vcm_cpp4640 286 "%0 Vcm.cpp::%!FUNC!::4640 : AvcmIDBarker is Invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPutDomainInPassThrough
{
}
#typev Vcm_cpp4631 285 "%0 Vcm.cpp::%!FUNC!::4631 : AvcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPutDomainInPassThrough
{
}
#typev Vcm_cpp4621 284 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalPutDomainInPassThrough
{
}
#typev Vcm_cpp4722 291 "%0 Vcm.cpp::%!FUNC!::4722 :Failed SmmuRemoveContextFromCollection with %10!s!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=`VcmInternalPutDomainInPassThrough'::`1'::fin$0
{
retVal, ItemNTSTATUS -- 10
}
#typev Vcm_cpp4712 290 "%0 Vcm.cpp::%!FUNC!::4712 : IommuDomainConfigure failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=`VcmInternalPutDomainInPassThrough'::`1'::fin$0
{
}
#typev Vcm_cpp4665 289 "%0 Vcm.cpp::%!FUNC!::4665 :Domain is not attached, Invalid domain mode change request" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=`VcmInternalPutDomainInPassThrough'::`1'::fin$0
{
}
#typev Vcm_cpp4659 288 "%0 Vcm.cpp::%!FUNC!::4659 :SMMU Context Bank is invalid." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=`VcmInternalPutDomainInPassThrough'::`1'::fin$0
{
}
#typev Vcm_cpp4648 287 "%0 Vcm.cpp::%!FUNC!::4648 :SmmuInternalGetARIDHandle Fail" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=`VcmInternalPutDomainInPassThrough'::`1'::fin$0
{
}
#typev Vcm_cpp4640 286 "%0 Vcm.cpp::%!FUNC!::4640 : AvcmIDBarker is Invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=`VcmInternalPutDomainInPassThrough'::`1'::fin$0
{
}
#typev Vcm_cpp4631 285 "%0 Vcm.cpp::%!FUNC!::4631 : AvcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=`VcmInternalPutDomainInPassThrough'::`1'::fin$0
{
}
#typev Vcm_cpp4621 284 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=`VcmInternalPutDomainInPassThrough'::`1'::fin$0
{
}
#typev Vcm_cpp4471 279 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalRegisterIsr
{
}
#typev Vcm_cpp4458 278 "%0 Vcm.cpp::%!FUNC!::4458 : Invalid Context Handle" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalRegisterIsr
{
}
#typev Vcm_cpp4451 277 "%0 Vcm.cpp::%!FUNC!::4451 : Callback function pointer is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalRegisterIsr
{
}
#typev Vcm_cpp4444 276 "%0 Vcm.cpp::%!FUNC!::4444 : Invalid Client Id" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalRegisterIsr
{
}
#typev Vcm_cpp4440 275 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalRegisterIsr
{
}
#typev Vcm_cpp1277 55 "%0 Vcm.cpp::%!FUNC! :Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1259 54 "%0 Vcm.cpp::%!FUNC!::1259 : SmmuPageTableReserve Failed, VcmId:[0x%10!p!], virtAddr:[0x%11!I64x!], Len:[0x%12!I64x!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
VcmId, ItemPtr -- 10
virtAddr, ItemLongLongX -- 11
Len, ItemLongLongX -- 12
}
#typev Vcm_cpp1223 53 "%0 Vcm.cpp::%!FUNC!::1223 : VcmManagementVirtmemAlloc returned invalid virtAddr, for VcmId:[0x%10!p!], Len:[0x%11!I64x!], Align:[0x%12!I64x!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
VcmId, ItemPtr -- 10
Len + (guardPage * ALIGN_4K), ItemLongLongX -- 11
Align, ItemLongLongX -- 12
}
#typev Vcm_cpp1193 52 "%0 Vcm.cpp::%!FUNC!::1193 : Malloc failure - Could not alloce RES" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1169 51 "%0 Vcm.cpp::%!FUNC!::1169 : Vcm has no associated pagetable" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1160 50 "%0 Vcm.cpp::%!FUNC!::1160 : Invalid parameter - Alignment request not supported" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1155 49 "%0 Vcm.cpp::%!FUNC!::1155 : Invalid parameter - Requested size is 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1148 48 "%0 Vcm.cpp::%!FUNC!::1148 : Invalid parameter - Vcm barker is corrupted" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1143 47 "%0 Vcm.cpp::%!FUNC!::1143 : Invalid parameter - VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1138 46 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1481 66 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1466 65 "%0 Vcm.cpp::%!FUNC!::1466 : SmmuPageTableReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1432 64 "%0 Vcm.cpp::%!FUNC!::1432 : VcmManagementVirtmemAllocAt failed, for VcmId:[0x%10!p!], Len:[0x%11!I64x!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
VcmId, ItemPtr -- 10
Len + (guardPage * ALIGN_4K), ItemLongLongX -- 11
}
#typev Vcm_cpp1406 63 "%0 Vcm.cpp::%!FUNC!::1406 : Could not allocate memory for RES" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1383 62 "%0 Vcm.cpp::%!FUNC!::1383 : Request not confined to 32bit boundary" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1372 61 "%0 Vcm.cpp::%!FUNC!::1372 : Target address not aligned to 1k" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1366 60 "%0 Vcm.cpp::%!FUNC!::1366 : No pagetable association for the provided Vcm" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1358 59 "%0 Vcm.cpp::%!FUNC!::1358 : Invalid parameter - Len is 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1351 58 "%0 Vcm.cpp::%!FUNC!::1351 : Invalid parameter - VcmId barker invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1345 57 "%0 Vcm.cpp::%!FUNC!::1345 : Invalid parameter - VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1341 56 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp3506 201 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3490 200 "%0 Vcm.cpp::%!FUNC!::3490 : SmmuPageTableReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3451 199 "%0 Vcm.cpp::%!FUNC!::3451 : VcmManagementVirtmemAllocAt failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3426 198 "%0 Vcm.cpp::%!FUNC!::3426 : Memory allocation failed -- could not allocate memory for RES" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3402 197 "%0 Vcm.cpp::%!FUNC!::3402 : Reservation request exceeds 32bit boundary" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3391 196 "%0 Vcm.cpp::%!FUNC!::3391 : Target request not aligned to 1k" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3385 195 "%0 Vcm.cpp::%!FUNC!::3385 : Vcm not associated" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3377 194 "%0 Vcm.cpp::%!FUNC!::3377 : Requested Len is 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3370 193 "%0 Vcm.cpp::%!FUNC!::3370 : Reservation not allowed within this bound" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3363 192 "%0 Vcm.cpp::%!FUNC!::3363 : Bound Id is invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3355 191 "%0 Vcm.cpp::%!FUNC!::3355 : Bound Id is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3351 190 "%0 Vcm.cpp::%!FUNC! :Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3331 189 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3313 188 "%0 Vcm.cpp::%!FUNC!::3313 : SmmuPageTableReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3275 187 "%0 Vcm.cpp::%!FUNC!::3275 : VcmManagementVirtmemAlloc failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3246 186 "%0 Vcm.cpp::%!FUNC!::3246 : Memory allocation failure, could not allocate memory for RES" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3222 185 "%0 Vcm.cpp::%!FUNC!::3222 : Vcm not associated" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3215 184 "%0 Vcm.cpp::%!FUNC!::3215 : Requested alignment not supported" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3209 183 "%0 Vcm.cpp::%!FUNC!::3209 : Requested reservation size is 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3202 182 "%0 Vcm.cpp::%!FUNC!::3202 : Cannot reserve into bound allocated using BOUND_BACK_INTO attrib" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3195 181 "%0 Vcm.cpp::%!FUNC!::3195 : BoundId is Invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3187 180 "%0 Vcm.cpp::%!FUNC!::3187 : Bound Id is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3183 179 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp1707 79 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSetReservationAttr
{
}
#typev Vcm_cpp1695 78 "%0 Vcm.cpp::%!FUNC!::1695 : SmmuPageTableSetAttributes failed, ResId:[0x%10!p!], ResId->Attr:[0x%11!x!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalSetReservationAttr
{
ResId, ItemPtr -- 10
ResId->Attr, ItemLong -- 11
}
#typev Vcm_cpp1675 77 "%0 Vcm.cpp::%!FUNC!::1675 : Reservation ID barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalSetReservationAttr
{
}
#typev Vcm_cpp1668 76 "%0 Vcm.cpp::%!FUNC!::1668 : Reservation ID is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalSetReservationAttr
{
}
#typev Vcm_cpp1663 75 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSetReservationAttr
{
}
#typev Vcm_cpp4165 253 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSmmuGetARIDConfig
{
}
#typev Vcm_cpp4152 252 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSmmuGetARIDConfig
{
}
#typev Vcm_cpp2242 118 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2228 117 "%0 Vcm.cpp::%!FUNC!::2228 : ProcessWhitelistPTNodes Failed ResId:[%10!p!], ResId->Addr:[0x%11!I64x!], ResId->Size:[0x%12!I64x!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
ResId, ItemPtr -- 10
ResId->Addr, ItemLongLongX -- 11
ResId->Size, ItemLongLongX -- 12
}
#typev Vcm_cpp2203 116 "%0 Vcm.cpp::%!FUNC!::2203 : VcmFlushTLBsAssociatedWith failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2192 115 "%0 Vcm.cpp::%!FUNC!::2192 : SmmuPageTableUnMap failed for ResId:[%10!p!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
ResId, ItemPtr -- 10
}
#typev Vcm_cpp2174 114 "%0 Vcm.cpp::%!FUNC!::2174 : BackUnfill failed, ResId:[%10!p!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
ResId, ItemPtr -- 10
}
#typev Vcm_cpp2165 113 "%0 Vcm.cpp::%!FUNC!::2165 : Reservation is not backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2158 112 "%0 Vcm.cpp::%!FUNC!::2158 :ResId cannot be used with this API" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2149 111 "%0 Vcm.cpp::%!FUNC!::2149 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2142 110 "%0 Vcm.cpp::%!FUNC!::2142 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2137 109 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp4137 251 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4125 250 "%0 Vcm.cpp::%!FUNC!::4125 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4108 249 "%0 Vcm.cpp::%!FUNC!::4108 : VcmFlushTLBsAssociatedWith failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4097 248 "%0 Vcm.cpp::%!FUNC!::4097 : SmmuPageTableUnMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4080 247 "%0 Vcm.cpp::%!FUNC!::4080 : Bound not created with correct attributes to allow VcmUnbackInBound" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4073 246 "%0 Vcm.cpp::%!FUNC!::4073 : Bound barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4068 245 "%0 Vcm.cpp::%!FUNC!::4068 : BoundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4063 244 "%0 Vcm.cpp::%!FUNC! :Enter" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4500 281 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnregisterIsr
{
}
#typev Vcm_cpp4493 280 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnregisterIsr
{
}
#typev Vcm_cpp1606 74 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1589 73 "%0 Vcm.cpp::%!FUNC!::1589 : SmmuPageTableUnReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1572 72 "%0 Vcm.cpp::%!FUNC!::1572 : SmmuPageTableUnReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1556 71 "%0 Vcm.cpp::%!FUNC!::1556 : VcmManagementVirtmemFree failed, for RESId:[0x%10!p!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
ResId, ItemPtr -- 10
}
#typev Vcm_cpp1535 70 "%0 Vcm.cpp::%!FUNC!::1535 : ResId is in use" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1528 69 "%0 Vcm.cpp::%!FUNC!::1528 : Invalid parameter - ResId barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1521 68 "%0 Vcm.cpp::%!FUNC!::1521 : Invalid parameter - Reservation ID is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1516 67 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp4246 262 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4240 261 "%0 Vcm.cpp::%!FUNC!::4240 : SmmuPageTableGetMap Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4227 260 "%0 Vcm.cpp::%!FUNC!::4227 : pageMapInfo.pPageList == NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4212 259 "%0 Vcm.cpp::%!FUNC!::4212 : MdlObject is not big enough to fullfill this request" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4201 258 "%0 Vcm.cpp::%!FUNC!::4201 : Bad MdlObject" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4196 257 "%0 Vcm.cpp::%!FUNC!::4196 : Size parameter cannot be 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4191 256 "%0 Vcm.cpp::%!FUNC!::4191 : Corrupt VCM ID" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4186 255 "%0 Vcm.cpp::%!FUNC!::4186 : Bad VCM ID" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4182 254 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp374 16 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmRemoveAVCMFromCollection
{
}
#typev Vcm_cpp359 15 "%0 Vcm.cpp::%!FUNC!::359 : pAssociatedAvcm is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmRemoveAVCMFromCollection
{
}
#typev Vcm_cpp342 14 "%0 Vcm.cpp::%!FUNC!::342 : VcmId->pCollectionVcmAssociatedAVCMs is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmRemoveAVCMFromCollection
{
}
#typev Vcm_cpp335 13 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmRemoveAVCMFromCollection
{
}
