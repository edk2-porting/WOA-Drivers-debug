// PDB:  qcmbbnetadapterfilter7280.pdb
// PDB:  Last Updated :2022-05-17:11:06:06:456 (UTC) [tracepdb]
f1697df7-29a3-3bb9-f977-804b320a2482 NetAdapterFilter // SRC=QnetFilterDatapathQmapHalIface.c MJ= MN=
#typev QnetFilterDatapathQmapHalIface_c393 17 "%0%!FUNC!::E:QnetFltrUtilsCreateAndPublishIface failed with status: %10!s!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=QNET_FLTR FUNC=QnetFltrDP_PublishInterface
{
ntStatus, ItemNTSTATUS -- 10
}
#typev QnetFilterDatapathQmapHalIface_c129 12 "%0%!FUNC!::E:Datapath registration failed with status %10!s!." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=QNET_FLTR FUNC=QnetFltrDP_QmapHalRegister
{
ntStatus, ItemNTSTATUS -- 10
}
#typev QnetFilterDatapathQmapHalIface_c303 15 "%0%!FUNC!::I:This method is not supported." //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=QNET_FLTR FUNC=QnetFltrDP_QmapHalResetChannel
{
}
#typev QnetFilterDatapathQmapHalIface_c97 11 "%0%!FUNC!::I:Bus driver recovered from SSR. Notify client datapath is operational." //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=QNET_FLTR FUNC=QnetFltrDP_QmapHalSendEvent
{
}
#typev QnetFilterDatapathQmapHalIface_c83 10 "%0%!FUNC!::I:Sending Event: %10!s!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=QNET_FLTR FUNC=QnetFltrDP_QmapHalSendEvent
{
eEvent, ItemEnum(_QMAPHAL_STATE_CHANGE_TYPE) -- 10
}
#typev QnetFilterDatapathQmapHalIface_c232 13 "%0%!FUNC!::E:DP QMAP: Client configured channel type %10!s! for channel %11!s!. Ignoring start request for this channel." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=QNET_FLTR FUNC=QnetFltrDP_QmapHalStart
{
stStartParams->channelParams[eQmapChannelType].channelType, ItemEnum(QMAP_HAL_CHANNEL_TYPE) -- 10
eQmapChannelType, ItemEnum(QMAP_HAL_CHANNEL_TYPE) -- 11
}
#typev QnetFilterDatapathQmapHalIface_c283 14 "%0%!FUNC!::E:Transfer Data Failed with status %10!s!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=QNET_FLTR FUNC=QnetFltrDP_QmapHalTransfer
{
ntStatus, ItemNTSTATUS -- 10
}
#typev QnetFilterDatapathQmapHalIface_c314 16 "%0%!FUNC!::I:This method is not supported." //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=QNET_FLTR FUNC=QnetFltrDP_QmapHalconfigureWakeState
{
}
#enumv _QMAPHAL_STATE_CHANGE_TYPE
{
HW_EVENT_INVALID,0x0
HW_EVENT_AMSS_READY,0x1
HW_EVENT_SSR,0x2
HW_EVENT_STARTED,0x3
HW_EVENT_STOPPED,0x4
HW_EVENT_ERROR,0xFF
}
#enumv QMAP_HAL_CHANNEL_TYPE
{
QMAPHAL_DATA_CH_INVALID,0xFF
QMAPHAL_DATA_TX_0,0x0
QMAPHAL_DATA_RX_0,0x1
QMAPHAL_DATA_TX_CTRL_0,0x2
QMAPHAL_DATA_RX_CTRL_0,0x3
QMAPHAL_DATA_CH_MAX,0x4
}
