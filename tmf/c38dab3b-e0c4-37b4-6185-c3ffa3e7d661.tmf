// PDB:  Qcfgbcl850.pdb
// PDB:  Last Updated :2020-09-09:19:38:55:000 (UTC) [tracepdb]
c38dab3b-e0c4-37b4-6185-c3ffa3e7d661 fgbcl // SRC=fgbclACPI.c MJ= MN=
#typev fgbclACPI_c76 10 "%0AssignFgBclAcpiValue::acpi invalid input parameters." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=FGBCLWPP_SelfHost FUNC=AssignFgBclAcpiValue
{
}
#typev fgbclACPI_c146 25 "%0AssignFgBclAcpiValue::ERROR::Unkown ACPI item." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=FGBCLWPP_SelfHost FUNC=AssignFgBclAcpiValue
{
}
#typev fgbclACPI_c142 24 "%0FGBCL_ACPI_MAX_DEBUG_BATT_ID = %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=FGBCLWPP_Core FUNC=AssignFgBclAcpiValue
{
pDeviceContext->maxDebugBattID, ItemLong -- 10
}
#typev fgbclACPI_c138 23 "%0FGBCL_ACPI_MIN_DEBUG_BATT_ID = %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=FGBCLWPP_Core FUNC=AssignFgBclAcpiValue
{
pDeviceContext->minDebugBattID, ItemLong -- 10
}
#typev fgbclACPI_c134 22 "%0FGBCL_ACPI_BATT_PERCENT_ENABLE = %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=FGBCLWPP_Core FUNC=AssignFgBclAcpiValue
{
pDeviceContext->batteryPercentEnable, ItemLong -- 10
}
#typev fgbclACPI_c130 21 "%0FGBCL_ACPI_POLL_TIMER = %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=FGBCLWPP_Core FUNC=AssignFgBclAcpiValue
{
pDeviceContext->bclTimerInterval, ItemLong -- 10
}
#typev fgbclACPI_c126 20 "%0FGBCL_ACPI_VCOMP_LOW2_THRESHOLD = %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=FGBCLWPP_Core FUNC=AssignFgBclAcpiValue
{
pDeviceContext->vcomp_low2_threshold, ItemLong -- 10
}
#typev fgbclACPI_c122 19 "%0FGBCL_ACPI_VCOMP_LOW1_THRESHOLD = %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=FGBCLWPP_Core FUNC=AssignFgBclAcpiValue
{
pDeviceContext->vcomp_low1_threshold, ItemLong -- 10
}
#typev fgbclACPI_c118 18 "%0FGBCL_ACPI_VCOMP_LOW0_THRESHOLD = %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=FGBCLWPP_Core FUNC=AssignFgBclAcpiValue
{
pDeviceContext->vcomp_low0_threshold, ItemLong -- 10
}
#typev fgbclACPI_c114 17 "%0FGBCL_ACPI_VBATT_TOO_LOW_THRESHOLD = %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=FGBCLWPP_Core FUNC=AssignFgBclAcpiValue
{
pDeviceContext->vbatt_too_low_threshold, ItemLong -- 10
}
#typev fgbclACPI_c110 16 "%0FGBCL_ACPI_VBATT_LOW_THRESHOLD = %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=FGBCLWPP_Core FUNC=AssignFgBclAcpiValue
{
pDeviceContext->vbatt_low_threshold, ItemLong -- 10
}
#typev fgbclACPI_c106 15 "%0FGBCL_ACPI_IBATT_TOO_HI_THRESHOLD = %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=FGBCLWPP_Core FUNC=AssignFgBclAcpiValue
{
pDeviceContext->ibatt_too_high_threshold, ItemLong -- 10
}
#typev fgbclACPI_c102 14 "%0FGBCL_ACPI_IBATT_HI_THRESHOLD = %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=FGBCLWPP_Core FUNC=AssignFgBclAcpiValue
{
pDeviceContext->ibatt_high_threshold, ItemLong -- 10
}
#typev fgbclACPI_c98 13 "%0FGBCL_ACPI_BATT_OCP_CURRENT = %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=FGBCLWPP_Core FUNC=AssignFgBclAcpiValue
{
pDeviceContext->OCP_current, ItemLong -- 10
}
#typev fgbclACPI_c93 12 "%0FGBCL_ACPI_ENABLED_FEATURES = %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=FGBCLWPP_Core FUNC=AssignFgBclAcpiValue
{
pDeviceContext->bcl_capabilities, ItemLong -- 10
}
#typev fgbclACPI_c87 11 "%0AssignFgBclAcpiValue::ERROR::Invalid ACPI version." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=FGBCLWPP_SelfHost FUNC=AssignFgBclAcpiValue
{
}
#typev fgbclACPI_c167 26 "%0FgBclAcpi_ParseAndFillFgBclDataStruct::ERROR::Invalid ACPI output buffer." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=FGBCLWPP_SelfHost FUNC=FgBclAcpi_ParseAndFillFgBclDataStruct
{
}
#typev fgbclACPI_c193 28 "%0FgBclAcpi_ParseAndFillFgBclDataStruct::ERROR::AssignMipiBifAcpiValue failed, Error Code = 0x%10!x!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=FGBCLWPP_SelfHost FUNC=FgBclAcpi_ParseAndFillFgBclDataStruct
{
status, ItemLong -- 10
}
#typev fgbclACPI_c199 29 "%0FgBclAcpi_ParseAndFillFgBclDataStruct::ERROR::Invalid ACPI Type." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=FGBCLWPP_SelfHost FUNC=FgBclAcpi_ParseAndFillFgBclDataStruct
{
}
#typev fgbclACPI_c177 27 "%0FgBclAcpi_ParseAndFillFgBclDataStruct::ERROR::Invalid number of ACPI items, expected = %10!d!, received = %11!d!." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=FGBCLWPP_SelfHost FUNC=FgBclAcpi_ParseAndFillFgBclDataStruct
{
(INT32)FGBCL_ACPI_MAX, ItemLong -- 10
numberOfConfigItems, ItemLong -- 11
}
#typev fgbclACPI_c246 32 "%0FgBclAcpi_ParseAndFill_IRQAcpiData::ERROR:: Setting interrupt failed,Error Code =%10!X!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=FGBCLWPP_Core FUNC=FgBclAcpi_ParseAndFill_IRQAcpiData
{
status, ItemLong -- 10
}
// PDB:  Qcfgbcl850.pdb
// PDB:  Last Updated :2020-09-09:19:38:55:000 (UTC) [tracepdb]
#typev fgbclACPI_c240 31 "%0FgBclAcpi_ParseAndFill_IRQAcpiData::Value of IRQ acpi item for  %10!d!,  IrqName is %11!s!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=FGBCLWPP_Core FUNC=FgBclAcpi_ParseAndFill_IRQAcpiData
{
currentArgNum, ItemLong -- 10
(char*)currentArgument->Data, ItemString -- 11
}
#typev fgbclACPI_c228 30 "%0FgBclAcpi_ParseAndFill_IRQAcpiData::++" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=FGBCLWPP_Core FUNC=FgBclAcpi_ParseAndFill_IRQAcpiData
{
}
#typev fgbclACPI_c373 37 "%0FgBclAcpi_ReadConfiguration::++" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=FGBCLWPP_Core FUNC=FgBclAcpi_ReadConfiguration
{
}
#typev fgbclACPI_c322 36 "%0fgbcl::ERROR:: Parsing interrupt data failed,Error Code =%10!X!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=FGBCLWPP_SelfHost FUNC=FgBclAcpi_ReadFgBclConfigurationFromAcpiDsdtTable
{
result, ItemLong -- 10
}
#typev fgbclACPI_c306 35 "%0fgbcl::ERROR:: Reading acpi for interrupt data failed,Error Code =%10!X!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=FGBCLWPP_SelfHost FUNC=FgBclAcpi_ReadFgBclConfigurationFromAcpiDsdtTable
{
result, ItemLong -- 10
}
#typev fgbclACPI_c294 34 "%0FgBclAcpi_ReadFgBclConfigurationFromAcpiDsdtTable::ERROR::FgBclAcpi_ParseAndFillFgBclDataStruct failed, Error Code = 0x%10!x!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=FGBCLWPP_SelfHost FUNC=FgBclAcpi_ReadFgBclConfigurationFromAcpiDsdtTable
{
result, ItemLong -- 10
}
#typev fgbclACPI_c278 33 "%0FgBclAcpi_ReadFgBclConfigurationFromAcpiDsdtTable::acpi output buffer Memory not allocated." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=FGBCLWPP_SelfHost FUNC=FgBclAcpi_ReadFgBclConfigurationFromAcpiDsdtTable
{
}
