// PDB:  qchdcpumd850.pdb
// PDB:  Last Updated :2020-09-09:19:38:55:000 (UTC) [tracepdb]
3563f9ec-55d1-3784-c7fa-f21c2f710e60 QCHDCPUMD // SRC=HDCPManager.cpp MJ= MN=
#typev HDCPManager_cpp236 16 "%0HDCPManager: Some or all of the function in HDCP LIb Missing " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::HDCPManager
{
}
#typev HDCPManager_cpp250 17 "%0HDCPManager CriticalSect failed %10!p! Try other options!!!" //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::HDCPManager
{
m_hCriticalSect, ItemPtr -- 10
}
#typev HDCPManager_cpp198 15 "%0!!! HDCPManager Load HDCP Library failed !!! Setting State to HDCP_STATE_NOT_AVAILABLE" //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::HDCPManager
{
}
#typev HDCPManager_cpp188 14 "%0HDCPManager Load HDCP Library failed Trying other names (%10!p!)!!!" //   LEVEL=UMD_HDCP_WARNING FUNC=HDCPManager::HDCPManager
{
m_hHDCPLib, ItemPtr -- 10
}
#typev HDCPManager_cpp179 88 "%0EXIT:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::HDCPManager
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp179 87 "%0ENTRY:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::HDCPManager
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp177 13 "%0 ###########################################################" //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::HDCPManager
{
}
#typev HDCPManager_cpp176 12 "%0 ################## STart of New Session ###################" //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::HDCPManager
{
}
#typev HDCPManager_cpp175 11 "%0 ###########################################################" //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::HDCPManager
{
}
#typev HDCPManager_cpp172 10 "%0ENTRY:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::HDCPManager
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp1332 127 "%0UserContext (HDCPManager) context is NULL...Cannot Handle this callback " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::ArmCallBack_Threshold
{
}
#typev HDCPManager_cpp1335 128 "%0EXIT:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::ArmCallBack_Threshold
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp1319 126 "%0ENTRY:%10!s!:%11!d! HDCPManager::ArmCallBack_Threshold (downstreamEventType = %12!d!,errorCode= %13!d!,UserContext=%14!p!,transmitter=%15!p!,DxHdcp2_Session=%16!p!,DxHdcp2_Stream=%17!p!,downstreamTransport=%18!p!)" //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::ArmCallBack_Threshold
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
Event->eventType, ItemLong -- 12
Event->eventStatus, ItemLong -- 13
UserContext, ItemPtr -- 14
(const void *)Event->deviceHandle, ItemPtr -- 15
(const void *)Event->sessionHandle, ItemPtr -- 16
(const void *)Event->streamHandle, ItemPtr -- 17
(const void *)Event->connectionHandle, ItemPtr -- 18
}
#typev HDCPManager_cpp1353 130 "%0UserContext (HDCPManager) context is NULL...Cannot Handle this callback" //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::ArmSendDataCallback
{
}
#typev HDCPManager_cpp1358 131 "%0Exit: HDCPManager::DXSendDataCallback " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::ArmSendDataCallback
{
}
#typev HDCPManager_cpp1345 129 "%0ENTRY:%10!s!:%11!d! (sendDataCallbackArg=%12!p!,data=%13!p!,dataSizeInBytes=%14!Iu!)" //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::ArmSendDataCallback
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
sendDataCallbackArg, ItemPtr -- 12
data, ItemPtr -- 13
dataSizeInBytes, ItemPtr -- 14
}
#typev HDCPManager_cpp883 86 "%0HDCP Encrypt Success %10!u! %11!u! %12!u! %13!u! " //   LEVEL=UMD_HDCP_ENCRYPT FUNC=HDCPManager::EncryptHDCPTransmitterStream
{
pPESPrivateData[12], ItemLong -- 10
pPESPrivateData[13], ItemLong -- 11
pPESPrivateData[14], ItemLong -- 12
pPESPrivateData[15], ItemLong -- 13
}
#typev HDCPManager_cpp881 85 "%0HDCP Encrypt Success %10!u! %11!u! %12!u! %13!u! " //   LEVEL=UMD_HDCP_ENCRYPT FUNC=HDCPManager::EncryptHDCPTransmitterStream
{
pPESPrivateData[8], ItemLong -- 10
pPESPrivateData[9], ItemLong -- 11
pPESPrivateData[10], ItemLong -- 12
pPESPrivateData[11], ItemLong -- 13
}
#typev HDCPManager_cpp879 84 "%0HDCP Encrypt Success %10!u! %11!u! %12!u! %13!u! " //   LEVEL=UMD_HDCP_ENCRYPT FUNC=HDCPManager::EncryptHDCPTransmitterStream
{
pPESPrivateData[4], ItemLong -- 10
pPESPrivateData[5], ItemLong -- 11
pPESPrivateData[6], ItemLong -- 12
pPESPrivateData[7], ItemLong -- 13
}
#typev HDCPManager_cpp877 83 "%0HDCP Encrypt Success %10!u! %11!u! %12!u! %13!u! " //   LEVEL=UMD_HDCP_ENCRYPT FUNC=HDCPManager::EncryptHDCPTransmitterStream
{
pPESPrivateData[0], ItemLong -- 10
pPESPrivateData[1], ItemLong -- 11
pPESPrivateData[2], ItemLong -- 12
pPESPrivateData[3], ItemLong -- 13
}
#typev HDCPManager_cpp875 82 "%0HDCPManager::EncryptHDCPTransmitterStream: Input AddrType = %10!d! BuffType = %11!d! Output AddrType = %12!d! BuffType = %13!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::EncryptHDCPTransmitterStream
{
fd_data_ip->addrType, ItemLong -- 10
fd_data_ip->buffType, ItemLong -- 11
fd_data_op->addrType, ItemLong -- 12
fd_data_op->buffType, ItemLong -- 13
}
#typev HDCPManager_cpp868 81 "%0EXIT (FAIL):%10!s!:%11!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::EncryptHDCPTransmitterStream
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp865 80 "%0HDCPManager:DxHDCP2_TransmitterEncrypt Failed %10!ld! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::EncryptHDCPTransmitterStream
{
nStatus, ItemLong -- 10
}
#typev HDCPManager_cpp827 79 "%0HDCP Manager Invalid State %10!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::EncryptHDCPTransmitterStream
{
m_eState, ItemLong -- 10
}
#typev HDCPManager_cpp819 78 "%0ENTRY:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::EncryptHDCPTransmitterStream
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp1403 141 "%0EXIT (FAIL):%10!s!:%11!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::HDCPDataFromDXToOS
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp1401 140 "%0Data ptr(0x%10!X!) or SendData Ptr(0x%11!X!) or OS Context (0x%12!X!) is NULL ...Exit:HDCP_BAD_PARAMS " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::HDCPDataFromDXToOS
{
(UINT)data, ItemLong -- 10
(UINT)m_OSCallbacks.SendData, ItemLong -- 11
(UINT)m_pOSContext, ItemLong -- 12
}
#typev HDCPManager_cpp1417 143 "%0EXIT:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::HDCPDataFromDXToOS
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp1411 142 "%0Pushing [Send] [BYTE=0x%10!d!][SIZE=%11!Iu!][%12!s!] data from DX to OS HDCP Manager " //   LEVEL=UMD_HDCP_SOCKET_DEBUG FUNC=HDCPManager::HDCPDataFromDXToOS
{
*((uint8_t*)data), ItemLong -- 10
dataSizeInBytes, ItemPtr -- 11
*((uint8_t*)data) <= DX_HDCP_MSG_RESERVED31 ? msgIdToStr[*((uint8_t*)data)] : msgIdToStr[DX_HDCP_MSG_RESERVED31], ItemString -- 12
}
#typev HDCPManager_cpp1397 139 "%0ENTRY:%10!s!:%11!d! (data = %12!p!, dataSizeInBytes = %13!Iu!) " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::HDCPDataFromDXToOS
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
data, ItemPtr -- 12
dataSizeInBytes, ItemPtr -- 13
}
#typev HDCPManager_cpp1373 134 "%0EXIT (FAIL):%10!s!:%11!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::HDCPDataFromOSToDX
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp1371 133 "%0Data ptr(0x%10!X!) or DX Callback (0x%11!X!) or IFs Handle(0x%12!X!) is NULL ...Exit:HDCP_BAD_PARAMS " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::HDCPDataFromOSToDX
{
(UINT)data, ItemLong -- 10
(UINT) m_pFnDxHDCP2_HandleDownstreamReceivedData, ItemLong -- 11
(UINT)m_pDownstreamTransportId, ItemLong -- 12
}
#typev HDCPManager_cpp1391 138 "%0EXIT:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::HDCPDataFromOSToDX
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp1388 137 "%0EXIT (FAIL):%10!s!:%11!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::HDCPDataFromOSToDX
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp1387 136 "%0HDCPManager:DxHDCP2_HandleDownstreamReceivedDataType %10!u!d " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::HDCPDataFromOSToDX
{
nStatus, ItemLong -- 10
}
#typev HDCPManager_cpp1381 135 "%0Pushing [Received][BYTE=0x%10!d!][SIZE=%11!Iu!][%12!s!] data from OS to DX implementation " //   LEVEL=UMD_HDCP_SOCKET_DEBUG FUNC=HDCPManager::HDCPDataFromOSToDX
{
*((uint8_t*)data), ItemLong -- 10
dataSizeInBytes, ItemPtr -- 11
*((uint8_t*)data) <= DX_HDCP_MSG_RESERVED31 ? msgIdToStr[*((uint8_t*)data)]:msgIdToStr[DX_HDCP_MSG_RESERVED31], ItemString -- 12
}
#typev HDCPManager_cpp1367 132 "%0ENTRY:%10!s!:%11!d! (data = %12!p!, dataSizeInBytes = %13!Iu!) " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::HDCPDataFromOSToDX
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
data, ItemPtr -- 12
dataSizeInBytes, ItemPtr -- 13
}
#typev HDCPManager_cpp1166 112 "%0HDCPManager Exited " //   LEVEL=UMD_HDCP_DEBUG FUNC=HDCPManager::HDCPManThread
{
}
#typev HDCPManager_cpp1154 110 "%0HDCPManager Closed " //   LEVEL=UMD_HDCP_DEBUG FUNC=HDCPManager::HDCPManThread
{
}
#typev HDCPManager_cpp1151 109 "%0HDCPManager Close " //   LEVEL=UMD_HDCP_DEBUG FUNC=HDCPManager::HDCPManThread
{
}
#typev HDCPManager_cpp1093 102 "%0ReportAuthenticationResult Ptr(0x%10!X!) or OS Context (0x%11!X!) is NULL " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::HDCPManThread
{
(UINT)m_OSCallbacks.ReportAuthenticationResult, ItemLong -- 10
(UINT)m_pOSContext, ItemLong -- 11
}
#typev HDCPManager_cpp1134 108 "%0HDCPManager:Authentication Retry Started." //   LEVEL=UMD_HDCP_SOCKET_DEBUG FUNC=HDCPManager::HDCPManThread
{
}
#typev HDCPManager_cpp1123 107 "%0Closed Downstream Transport for failed authentication scenario" //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::HDCPManThread
{
}
#typev HDCPManager_cpp1117 106 "%0Closed HDCP session for failed authentication scenario" //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::HDCPManThread
{
}
#typev HDCPManager_cpp1111 105 "%0Closed HDCP Video stream for failed authentication scenario" //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::HDCPManThread
{
}
#typev HDCPManager_cpp1106 104 "%0Pushing HDCP_AUTHENICATION_FAIL_GENERIC Authentication to OS HDCP Manager " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::HDCPManThread
{
}
#typev HDCPManager_cpp1101 103 "%0Pushing HDCP_AUTHENICATION_SUCCESS Authentication to OS HDCP Manager " //   LEVEL=UMD_HDCP_SOCKET_DEBUG FUNC=HDCPManager::HDCPManThread
{
}
#typev HDCPManager_cpp1083 101 "%0HDCPManager:Authentication SUCCESS." //   LEVEL=UMD_HDCP_SOCKET_DEBUG FUNC=HDCPManager::HDCPManThread
{
}
#typev HDCPManager_cpp1076 100 "%0HDCPManager:DxHDCP2_TransmitterAuthenticate Started " //   LEVEL=UMD_HDCP_SOCKET_DEBUG FUNC=HDCPManager::HDCPManThread
{
}
#typev HDCPManager_cpp1071 99 "%0DxHDCP2_TransmitterAuthenticate Failed with Error(0x%10!X!)!!!! Try again " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::HDCPManThread
{
nStatus, ItemLong -- 10
}
#typev HDCPManager_cpp1062 98 "%0HDCPManager:m_pFnDxHDCP2_TransmitterOpenStream for Video stream Failed %10!ld! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::HDCPManThread
{
nStatus, ItemLong -- 10
}
#typev HDCPManager_cpp1056 97 "%0HDCPManager:Registry Set to Open Stream before Authentication" //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::HDCPManThread
{
}
#typev HDCPManager_cpp1049 96 "%0ARM_HDCP_Transmitter_Open_SessionType Failed with Error(0x%10!X!) " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::HDCPManThread
{
nStatus, ItemLong -- 10
}
#typev HDCPManager_cpp1040 95 "%0HDCPManager:DxHDCP2_CallbackDrivenDownstreamTransportIfsCreateType Failed %10!ld! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::HDCPManThread
{
nStatus, ItemLong -- 10
}
#typev HDCPManager_cpp1028 94 "%0HDCPManager::HDCPManThread received ConnectEvent m_eState = %10!d!,attempt =%11!d!" //   LEVEL=UMD_HDCP_DEBUG FUNC=HDCPManager::HDCPManThread
{
m_eState, ItemLong -- 10
nErrorCounter, ItemLong -- 11
}
#typev HDCPManager_cpp1022 93 "%0No event Queued for registered MFTs" //   LEVEL=UMD_HDCP_DEBUG FUNC=HDCPManager::HDCPManThread
{
}
#typev HDCPManager_cpp1014 92 "%0HDCPManager::HDCPManThread received m_nHDCPManMFTRegister m_eState = %10!d! " //   LEVEL=UMD_HDCP_DEBUG FUNC=HDCPManager::HDCPManThread
{
m_eState, ItemLong -- 10
}
#typev HDCPManager_cpp1159 111 "%0HDCPManager  received Unknown Event " //   LEVEL=UMD_HDCP_DEBUG FUNC=HDCPManager::HDCPManThread
{
}
#typev HDCPManager_cpp1003 91 "%0ENTRY:%10!s!:%11!d! (ThreadID = 0x%12!X!)" //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::HDCPManThread
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
GetThreadId(NULL), ItemLong -- 12
}
#typev HDCPManager_cpp1313 125 "%0EXIT:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::PostEventstoRegisteredMFTs
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp1310 124 "%0Done Posting Event to pMFTContext = %10!p!" //   LEVEL=UMD_HDCP_DEBUG FUNC=HDCPManager::PostEventstoRegisteredMFTs
{
m_MFTInfo[nMFTCounter].m_pMFTContext, ItemPtr -- 10
}
#typev HDCPManager_cpp1307 123 "%0Posting Event %10!d! to pMFTContext = %11!p!, pFNMFTnotifyCallbackFunction=%12!p!" //   LEVEL=UMD_HDCP_DEBUG FUNC=HDCPManager::PostEventstoRegisteredMFTs
{
downstreamEventType, ItemLong -- 10
m_MFTInfo[nMFTCounter].m_pMFTContext, ItemPtr -- 11
m_MFTInfo[nMFTCounter].m_pFNMFTnotifyCallbackFunction, ItemPtr -- 12
}
#typev HDCPManager_cpp1271 122 "%0Event Received = DX_HDCP2_DOWNSTREAM_EVENT_CIPHER_ENABLED Propagation finished or cipher enabled Can Encrypt" //   LEVEL=UMD_HDCP_SOCKET_DEBUG FUNC=HDCPManager::PostEventstoRegisteredMFTs
{
}
#typev HDCPManager_cpp1267 121 "%0ENTRY:%10!s!:%11!d!, EventType: %12!d! " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::PostEventstoRegisteredMFTs
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
downstreamEventType, ItemLong -- 12
}
#typev HDCPManager_cpp1435 146 "%0EXIT (FAIL):%10!s!:%11!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::RegisterMFTCallbackFn
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp1434 145 "%0Cannot Register Callback,Either (pMFTContext = %10!p!, notifyCallbackFunction = %11!p!) is NULL" //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::RegisterMFTCallbackFn
{
pMFTContext, ItemPtr -- 10
notifyCallbackFunction, ItemPtr -- 11
}
#typev HDCPManager_cpp1464 149 "%0EXIT:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::RegisterMFTCallbackFn
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp1457 148 "%0Recorded MFT callback Information,Posting cached events" //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::RegisterMFTCallbackFn
{
}
#typev HDCPManager_cpp1445 147 "%0Found Empty slot, Recording MFT callback Information " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::RegisterMFTCallbackFn
{
}
#typev HDCPManager_cpp1428 144 "%0ENTRY:%10!s!:%11!d! (pMFTContext = %12!p!, notifyCallbackFunction = %13!p!) " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::RegisterMFTCallbackFn
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
pMFTContext, ItemPtr -- 12
notifyCallbackFunction, ItemPtr -- 13
}
#typev HDCPManager_cpp1495 154 "%0EXIT:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::UnRegisterMFTCallbackFn
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp1487 153 "%0Found MFT slot, Unregistering recorded information" //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::UnRegisterMFTCallbackFn
{
}
#typev HDCPManager_cpp1478 152 "%0EXIT (FAIL):%10!s!:%11!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::UnRegisterMFTCallbackFn
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp1477 151 "%0Cannot UnRegister MFT Context (pMFTContext = %10!p!)" //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::UnRegisterMFTCallbackFn
{
pMFTContext, ItemPtr -- 10
}
#typev HDCPManager_cpp1471 150 "%0ENTRY:%10!s!:%11!d! (pMFTContext = %12!p!) " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::UnRegisterMFTCallbackFn
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
pMFTContext, ItemPtr -- 12
}
#typev HDCPManager_cpp712 72 "%0Input parameter is wrong %10!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::closeHDCPTransmitterStream
{
m_eState, ItemLong -- 10
}
#typev HDCPManager_cpp738 75 "%0Video stream handle closed successfully :%10!s!:%11!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::closeHDCPTransmitterStream
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp731 74 "%0EXIT (FAIL):%10!s!:%11!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::closeHDCPTransmitterStream
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp728 73 "%0HDCPManager:DxHDCP2_TransmitterCloseStreamType Failed %10!ld! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::closeHDCPTransmitterStream
{
nStatus, ItemLong -- 10
}
#typev HDCPManager_cpp705 71 "%0HDCP Manager Invalid State %10!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::closeHDCPTransmitterStream
{
m_eState, ItemLong -- 10
}
#typev HDCPManager_cpp699 70 "%0ENTRY:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::closeHDCPTransmitterStream
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp595 58 "%0EXIT:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::deinitializeHDCPManager
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp590 57 "%0HDCPMAnager all threads and resources cleared" //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::deinitializeHDCPManager
{
}
#typev HDCPManager_cpp589 56 "%0HDCPManager SignalQ Released" //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::deinitializeHDCPManager
{
}
#typev HDCPManager_cpp581 55 "%0HDCPManager Connect Signal Released" //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::deinitializeHDCPManager
{
}
#typev HDCPManager_cpp574 54 "%0HDCPManager Listen Signal Released" //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::deinitializeHDCPManager
{
}
#typev HDCPManager_cpp567 53 "%0HDCPManager Close Signal Released" //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::deinitializeHDCPManager
{
}
#typev HDCPManager_cpp558 52 "%0HDCPManager Thread Released" //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::deinitializeHDCPManager
{
}
#typev HDCPManager_cpp552 51 "%0HDCPManager Thread Join-ed" //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::deinitializeHDCPManager
{
}
#typev HDCPManager_cpp526 50 "%0[New]Shutdown Done" //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::deinitializeHDCPManager
{
}
#typev HDCPManager_cpp470 49 "%0EXIT:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::deinitializeHDCPManager
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp468 48 "%0HDCPManager deinitializeHDCPManager Already Done" //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::deinitializeHDCPManager
{
}
#typev HDCPManager_cpp462 47 "%0ENTRY:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::deinitializeHDCPManager
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp1218 118 "%0ReceiverID %10!hd! %11!hd! %12!hd! %13!hd! %14!hd!,type=%15!d!,version=%16!d!" //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::getTopology
{
pTopologyInfo->devices[nCounter].rcvId.bytes[0], ItemShort -- 10
pTopologyInfo->devices[nCounter].rcvId.bytes[1], ItemShort -- 11
pTopologyInfo->devices[nCounter].rcvId.bytes[2], ItemShort -- 12
pTopologyInfo->devices[nCounter].rcvId.bytes[3], ItemShort -- 13
pTopologyInfo->devices[nCounter].rcvId.bytes[4], ItemShort -- 14
pTopologyInfo->devices[nCounter].type, ItemLong -- 15
pTopologyInfo->devices[nCounter].version, ItemLong -- 16
}
#typev HDCPManager_cpp1215 117 "%0TOPOLOGY CONFIGURATION:  devicesNum=%10!d!,depth=%11!d!" //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::getTopology
{
pTopologyInfo->devicesNum, ItemLong -- 10
pTopologyInfo->depth, ItemLong -- 11
}
#typev HDCPManager_cpp1210 116 "%0EXIT (FAIL):%10!s!:%11!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::getTopology
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp1207 115 "%0DxHDCP2_TransmitterGetTopology Failed %10!ld! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::getTopology
{
nStatus, ItemLong -- 10
}
#typev HDCPManager_cpp1195 114 "%0HDCP Manager Invalid State %10!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::getTopology
{
m_eState, ItemLong -- 10
}
#typev HDCPManager_cpp1189 113 "%0ENTRY:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::getTopology
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp298 23 "%0EXIT:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::initializeHDCPManager
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp296 22 "%0HDCP Manager Invalid State %10!d!" //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::initializeHDCPManager
{
m_eState, ItemLong -- 10
}
#typev HDCPManager_cpp368 33 "%0EXIT:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::initializeHDCPManager
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp364 32 "%0HDCPManager Thread create failed !!!" //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::initializeHDCPManager
{
}
#typev HDCPManager_cpp450 46 "%0EXIT:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::initializeHDCPManager
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp444 45 "%0EXIT:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::initializeHDCPManager
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp441 44 "%0HDCPManager:DxHDCP2_CallbackDrivenDownstreamTransportIfsCreateType Failed %10!ld! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::initializeHDCPManager
{
nStatus, ItemLong -- 10
}
#typev HDCPManager_cpp430 43 "%0EXIT:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::initializeHDCPManager
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp427 42 "%0HDCPManager:DX HDCP2 TransmitterCreate Failed %10!ld!" //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::initializeHDCPManager
{
nStatus, ItemLong -- 10
}
#typev HDCPManager_cpp422 41 "%0%10!s!: DX Init completed successfully" //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::initializeHDCPManager
{
__FUNCTION__, ItemString -- 10
}
#typev HDCPManager_cpp418 40 "%0EXIT:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::initializeHDCPManager
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp415 39 "%0HDCPManager:DX HDCP2 Transmitter Init Failed 0x%10!08x!" //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::initializeHDCPManager
{
nStatus, ItemLong -- 10
}
#typev HDCPManager_cpp411 38 "%0%10!s!: Calling DX Init..." //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::initializeHDCPManager
{
__FUNCTION__, ItemString -- 10
}
#typev HDCPManager_cpp401 37 "%0HDCPManager:Failed to Open Registry Key 0x%10!08x!" //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::initializeHDCPManager
{
status, ItemLong -- 10
}
#typev HDCPManager_cpp396 36 "%0HDCPManager:Failed to Query Key 0x%10!08x!" //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::initializeHDCPManager
{
status, ItemLong -- 10
}
#typev HDCPManager_cpp383 35 "%0CFG file not present on device, passing NULL to DxInit function !!!" //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::initializeHDCPManager
{
}
#typev HDCPManager_cpp378 34 "%0CFG file exist in device, passing file path to DxInit function !!!" //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::initializeHDCPManager
{
}
#typev HDCPManager_cpp354 31 "%0EXIT:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::initializeHDCPManager
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp350 30 "%0HDCPManager Signal create failed!!!" //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::initializeHDCPManager
{
}
#typev HDCPManager_cpp340 29 "%0EXIT:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::initializeHDCPManager
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp336 28 "%0HDCPManager Signal create failed!!!" //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::initializeHDCPManager
{
}
#typev HDCPManager_cpp325 27 "%0EXIT:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::initializeHDCPManager
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp321 26 "%0HDCPManager Signal create failed!!!" //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::initializeHDCPManager
{
}
#typev HDCPManager_cpp312 25 "%0EXIT:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::initializeHDCPManager
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp308 24 "%0HDCPManager Signal Q create failed!!!" //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::initializeHDCPManager
{
}
#typev HDCPManager_cpp290 21 "%0ENTRY:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::initializeHDCPManager
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp648 63 "%0HDCP Manager Invalid State %10!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::openHDCPTransmitterStream
{
m_eState, ItemLong -- 10
}
#typev HDCPManager_cpp682 69 "%0EXIT (FAIL):%10!s!:%11!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::openHDCPTransmitterStream
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp679 68 "%0HDCPManager:openHDCPTransmitterStream Failed %10!ld! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::openHDCPTransmitterStream
{
nStatus, ItemLong -- 10
}
#typev HDCPManager_cpp675 67 "%0Opened Video Stream %10!s!:%11!d!" //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::openHDCPTransmitterStream
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp669 66 "%0EXIT (FAIL):%10!s!:%11!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::openHDCPTransmitterStream
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp666 65 "%0HDCPManager:m_pFnDxHDCP2_TransmitterOpenStream for Video stream Failed %10!ld! " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::openHDCPTransmitterStream
{
nStatus, ItemLong -- 10
}
#typev HDCPManager_cpp655 64 "%0HDCP Manager Audio stream not supported " //   LEVEL=UMD_HDCP_ERROR FUNC=HDCPManager::openHDCPTransmitterStream
{
}
#typev HDCPManager_cpp642 62 "%0ENTRY:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::openHDCPTransmitterStream
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp967 90 "%0EXIT:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::threadEntry
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp960 89 "%0ENTRY:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::threadEntry
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev HDCPManager_cpp275 20 "%0Return HDCPManager::~HDCPManager()" //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::`scalar deleting destructor'
{
}
#typev HDCPManager_cpp259 18 "%0ENTRY:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_INFO FUNC=HDCPManager::`scalar deleting destructor'
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
// PDB:  qchdcpumd850.pdb
// PDB:  Last Updated :2020-09-09:19:38:55:000 (UTC) [tracepdb]
#typev QCHDCPUMD_cpp521 61 "%0HDCP Manager Invalid EndPoint Type %10!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=CreateHDCPContext
{
m_EndpointType, ItemLong -- 10
}
// PDB:  qchdcpumd850.pdb
// PDB:  Last Updated :2020-09-09:19:38:55:000 (UTC) [tracepdb]
#typev QCHDCPUMD_cpp521 60 "%0HDCP Manager Invalid State %10!d! " //   LEVEL=UMD_HDCP_ERROR FUNC=CreateHDCPContext
{
m_eState, ItemLong -- 10
}
#typev QCHDCPUMD_cpp521 59 "%0ENTRY:%10!s!:%11!d! " //   LEVEL=UMD_HDCP_INFO FUNC=CreateHDCPContext
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
// PDB:  qchdcpumd850.pdb
// PDB:  Last Updated :2020-09-09:19:38:55:000 (UTC) [tracepdb]
#typev QCHDCPUMD_cpp482 120 "%0EXIT:%10!s!:%11!d!" //   LEVEL=UMD_HDCP_INFO FUNC=CreateHDCPContext
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
}
#typev QCHDCPUMD_cpp482 119 "%0ENTRY:%10!s!:%11!d! (pOSContext=%12!p!,pCallbacks=%13!p!,EndpointType=%14!d!AdapterLuid.LowPart=%15!d!,AdapterLuid.HighPart=%16!d!)" //   LEVEL=UMD_HDCP_INFO FUNC=CreateHDCPContext
{
__FUNCTION__, ItemString -- 10
__LINE__, ItemLong -- 11
pOSContext, ItemPtr -- 12
pCallbacks, ItemPtr -- 13
EndpointType, ItemLong -- 14
AdapterLuid.LowPart, ItemLong -- 15
AdapterLuid.HighPart, ItemLong -- 16
}
