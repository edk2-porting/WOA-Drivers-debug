// PDB:  qcbattmngr850.pdb
// PDB:  Last Updated :2020-09-09:19:38:55:000 (UTC) [tracepdb]
85aaaebb-c207-315c-92db-1815d9406aac BattMngr // SRC=BattMngrACPI.c MJ= MN=
#typev BattMngrACPI_c541 34 "%0BattMangrAcpi_ParseAndFillDeviceAcpiData::Value of coin charger acpi: %10!s! is %11!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_acpi FUNC=BattMangrAcpi_ParseAndFillDeviceAcpiData
{
currentArgNum, ItemEnum(BATTMNGR_ACPI_COIN_CHARGER_ENTRY_TYPE) -- 10
currentArgument->Argument, ItemLong -- 11
}
#typev BattMngrACPI_c549 35 "%0BattMangrAcpi_ParseAndFillDeviceAcpiData::ERROR::Failed to parse acpi data,Error Code = %10!X!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_acpi FUNC=BattMangrAcpi_ParseAndFillDeviceAcpiData
{
status, ItemLong -- 10
}
#typev BattMngrACPI_c519 33 "%0qcbattmngr::ERROR::Invalid number of args for Coin Cell Charger, expected:%10!d!; received:%11!d!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=BattMngrWPP_SelfHost FUNC=BattMangrAcpi_ParseAndFillDeviceAcpiData
{
BATTMNGR_ACPI_COIN_ARGS, ItemLong -- 10
numberOfConfigItems, ItemLong -- 11
}
#typev BattMngrACPI_c506 32 "%0BattMangrAcpi_ParseAndFillDeviceAcpiData::Value of Proprietary chargers acpi: %10!s! is %11!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_acpi FUNC=BattMangrAcpi_ParseAndFillDeviceAcpiData
{
currentArgNum, ItemEnum(BATTMNGR_ACPI_CHARGERS_ENTRY_TYPE) -- 10
currentArgument->Argument, ItemLong -- 11
}
#typev BattMngrACPI_c476 31 "%0qcbattmngr::ERROR::Invalid number of args for Proprietary Chargers, expected:%10!d!; received:%11!d!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=BattMngrWPP_SelfHost FUNC=BattMangrAcpi_ParseAndFillDeviceAcpiData
{
BATTMNGR_ACPI_CHARGERS_ARGS, ItemLong -- 10
numberOfConfigItems, ItemLong -- 11
}
#typev BattMngrACPI_c463 30 "%0BattMangrAcpi_ParseAndFillDeviceAcpiData::Value of timer acpi: %10!s! is %11!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_acpi FUNC=BattMangrAcpi_ParseAndFillDeviceAcpiData
{
currentArgNum, ItemEnum(BATTMNGR_ACPI_TIMER_ENTRY_TYPE) -- 10
currentArgument->Argument, ItemLong -- 11
}
#typev BattMngrACPI_c418 29 "%0qcbattmngr::ERROR::Invalid number of args for timers, expected:%10!d!; received:%11!d!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=BattMngrWPP_SelfHost FUNC=BattMangrAcpi_ParseAndFillDeviceAcpiData
{
BATTMNGR_ACPI_TIMER_ARGS, ItemLong -- 10
numberOfConfigItems, ItemLong -- 11
}
#typev BattMngrACPI_c402 28 "%0BattMangrAcpi_ParseAndFillDeviceAcpiData::Value of BATTMNGR_ACPI_BATT_MANUFACTURE_YEAR is %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_acpi FUNC=BattMangrAcpi_ParseAndFillDeviceAcpiData
{
pDeviceContext->BattMngrData.BattInfo.batt_manufacture_date.year, ItemLong -- 10
}
#typev BattMngrACPI_c397 27 "%0BattMangrAcpi_ParseAndFillDeviceAcpiData::Value of BATTMNGR_ACPI_BATT_MANUFACTURE_MONTH is %10!u!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_acpi FUNC=BattMangrAcpi_ParseAndFillDeviceAcpiData
{
pDeviceContext->BattMngrData.BattInfo.batt_manufacture_date.month, ItemLong -- 10
}
#typev BattMngrACPI_c392 26 "%0BattMangrAcpi_ParseAndFillDeviceAcpiData::Value of BATTMNGR_ACPI_BATT_MANUFACTURE_DATE is %10!u!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_acpi FUNC=BattMangrAcpi_ParseAndFillDeviceAcpiData
{
pDeviceContext->BattMngrData.BattInfo.batt_manufacture_date.day, ItemLong -- 10
}
#typev BattMngrACPI_c387 25 "%0BattMangrAcpi_ParseAndFillDeviceAcpiData::Value of BATTMNGR_ACPI_BATT_SERIAL_NUM is %10!s!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_acpi FUNC=BattMangrAcpi_ParseAndFillDeviceAcpiData
{
pDeviceContext->BattMngrData.BattInfo.batt_serial_num, ItemWString -- 10
}
#typev BattMngrACPI_c379 24 "%0BattMangrAcpi_ParseAndFillDeviceAcpiData::Value of BATTMNGR_ACPI_BATT_UNIQUE_ID is %10!s!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_acpi FUNC=BattMangrAcpi_ParseAndFillDeviceAcpiData
{
pDeviceContext->BattMngrData.BattInfo.batt_unique_id, ItemWString -- 10
}
#typev BattMngrACPI_c371 23 "%0BattMangrAcpi_ParseAndFillDeviceAcpiData::Value of BATTMNGR_ACPI_MANUFACTURE_NAME is %10!s!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_acpi FUNC=BattMangrAcpi_ParseAndFillDeviceAcpiData
{
pDeviceContext->BattMngrData.BattInfo.batt_manufacture_name, ItemWString -- 10
}
#typev BattMngrACPI_c363 22 "%0BattMangrAcpi_ParseAndFillDeviceAcpiData::Value of BATTMNGR_ACPI_DEVICE_NAME is %10!s!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_acpi FUNC=BattMangrAcpi_ParseAndFillDeviceAcpiData
{
pDeviceContext->BattMngrData.BattInfo.batt_device_name, ItemWString -- 10
}
#typev BattMngrACPI_c355 21 "%0BattMangrAcpi_ParseAndFillDeviceAcpiData::Value of BATTMNGR_ACPI_DEFAULT_ALERT_2 is %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_acpi FUNC=BattMangrAcpi_ParseAndFillDeviceAcpiData
{
pDeviceContext->BattMngrData.BattInfo.batt_info.default_alert2, ItemLong -- 10
}
#typev BattMngrACPI_c350 20 "%0BattMangrAcpi_ParseAndFillDeviceAcpiData::Value of BATTMNGR_ACPI_DEFAULT_ALERT_1 is %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_acpi FUNC=BattMangrAcpi_ParseAndFillDeviceAcpiData
{
pDeviceContext->BattMngrData.BattInfo.batt_info.default_alert1, ItemLong -- 10
}
#typev BattMngrACPI_c345 19 "%0BattMangrAcpi_ParseAndFillDeviceAcpiData::Value of BATTMNGR_ACPI_FULL_CHARGE_CAPACITY is %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_acpi FUNC=BattMangrAcpi_ParseAndFillDeviceAcpiData
{
pDeviceContext->BattMngrData.BattInfo.batt_info.full_charged_capacity, ItemLong -- 10
}
#typev BattMngrACPI_c340 18 "%0BattMangrAcpi_ParseAndFillDeviceAcpiData::Value of BATTMNGR_ACPI_DESIGN_CAPACITY is %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_acpi FUNC=BattMangrAcpi_ParseAndFillDeviceAcpiData
{
pDeviceContext->BattMngrData.BattInfo.batt_info.designed_capacity, ItemLong -- 10
}
#typev BattMngrACPI_c333 17 "%0BattMangrAcpi_ParseAndFillDeviceAcpiData::Value of BATTMNGR_ACPI_BATT_CHEMISTRY is %10!c!%11!c!%12!c!%13!c!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_acpi FUNC=BattMangrAcpi_ParseAndFillDeviceAcpiData
{
pDeviceContext->BattMngrData.BattInfo.batt_info.chemistry[0], ItemChar -- 10
pDeviceContext->BattMngrData.BattInfo.batt_info.chemistry[1], ItemChar -- 11
pDeviceContext->BattMngrData.BattInfo.batt_info.chemistry[2], ItemChar -- 12
pDeviceContext->BattMngrData.BattInfo.batt_info.chemistry[3], ItemChar -- 13
}
#typev BattMngrACPI_c324 16 "%0BattMangrAcpi_ParseAndFillDeviceAcpiData::Value of BATTMNGR_ACPI_BATT_TECHNOLOGY is %10!u!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_acpi FUNC=BattMangrAcpi_ParseAndFillDeviceAcpiData
{
pDeviceContext->BattMngrData.BattInfo.batt_info.technology, ItemLong -- 10
}
#typev BattMngrACPI_c305 15 "%0qcbattmngr::ERROR::Invalid number of args for battery info, expected:%10!d!; received:%11!d!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=BattMngrWPP_SelfHost FUNC=BattMangrAcpi_ParseAndFillDeviceAcpiData
{
BATTMNGR_ACPI_BATT_INFO_ARGS, ItemLong -- 10
numberOfConfigItems, ItemLong -- 11
}
#typev BattMngrACPI_c291 14 "%0BattMangrAcpi_ParseAndFillDeviceAcpiData::Value of %10!s! is %11!u!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_acpi FUNC=BattMangrAcpi_ParseAndFillDeviceAcpiData
{
currentArgNum, ItemEnum(BATTMNGR_ACPI_DEVICE_ENTRY_TYPE) -- 10
currentArgument->Argument, ItemLong -- 11
}
#typev BattMngrACPI_c282 13 "%0BattMangrAcpi_ParseAndFillDeviceAcpiData::                                                Value of BATTMNGR_ACPI_CONFIG_STR_ID is %10!s!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_acpi FUNC=BattMangrAcpi_ParseAndFillDeviceAcpiData
{
pDeviceContext->BattMngrData.configStrID, ItemWString -- 10
}
#typev BattMngrACPI_c245 12 "%0qcbattmngr::ERROR::Invalid number of args for device, expected:%10!d!; received:%11!d!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=BattMngrWPP_SelfHost FUNC=BattMangrAcpi_ParseAndFillDeviceAcpiData
{
BATTMNGR_ACPI_DEVICE_ACPI_ARGS, ItemLong -- 10
numberOfConfigItems, ItemLong -- 11
}
#typev BattMngrACPI_c235 11 "%0BattMangrAcpi_ParseAndFillDeviceAcpiData::++" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_acpi FUNC=BattMangrAcpi_ParseAndFillDeviceAcpiData
{
}
#typev BattMngrACPI_c157 10 "%0BattMangrAcpi_ReadConfiguration::++" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_acpi FUNC=BattMangrAcpi_ReadConfiguration
{
}
#enumv BATTMNGR_ACPI_COIN_CHARGER_ENTRY_TYPE
{
BATTMNGR_ACPI_COIN_EN,0x0
BATTMNGR_ACPI_COIN_RSET,0x1
BATTMNGR_ACPI_COIN_VSET,0x2
BATTMNGR_ACPI_COIN_ARGS,0x3
}
#enumv BATTMNGR_ACPI_CHARGERS_ENTRY_TYPE
{
BATTMNGR_ACPI_HVDCP_CHARGERS,0x0
BATTMNGR_ACPI_HVDCP_V3_CHARGERS,0x1
BATTMNGR_ACPI_I_WALL_CHARGERS,0x2
BATTMNGR_ACPI_CHARGERS_ARGS,0x3
}
#enumv BATTMNGR_ACPI_TIMER_ENTRY_TYPE
{
BATTMNGR_ACPI_CHARGING_TIMERS,0x0
BATTMNGR_ACPI_CHARGING_TOLERABLE_DELAY,0x1
BATTMNGR_ACPI_DISCHARGING_TIMERS,0x2
BATTMNGR_ACPI_DISCHARGING_TOLERABLE_DELAY,0x3
BATTMNGR_ACPI_POLL_TIMERS,0x4
BATTMNGR_ACPI_POLL_TOLERABLE_DELAY,0x5
BATTMNGR_ACPI_CHARGINGTIMEOUT_TIMERS,0x6
BATTMNGR_ACPI_CHARGINGTIMEOUT_TOLERABLE_DELAY,0x7
BATTMNGR_ACPI_TIMER_ARGS,0x8
}
#enumv BATTMNGR_ACPI_DEVICE_ENTRY_TYPE
{
BATTMNGR_ACPI_SELECT_PLATFORM,0x0
BATTMNGR_ACPI_ERROR_STATE_HANDLING,0x1
BATTMNGR_ACPI_LISTEN_TO_BATTC,0x2
BATTMNGR_ACPI_TEST_MODE_POWER_FLAG,0x3
BATTMNGR_ACPI_CONFIG_STR_ID,0x4
BATTMNGR_ACPI_DEVICE_ACPI_ARGS,0x5
}
