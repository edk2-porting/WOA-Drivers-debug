// PDB:  qcbattmngr850.pdb
// PDB:  Last Updated :2020-09-09:19:38:55:000 (UTC) [tracepdb]
5b93b323-74f3-350e-f3cf-94a2cfed312b BattMngr // SRC=BattMngrTech_FGGge_R3.c MJ= MN=
#typev BattMngrPlat_SMChg_FGGge_R3_c5542 63 "%0BattMngrTech_FGGge_R3_Set_SOC_Slope_Limiter::Setting slope limiter failed!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_Check_FG_Slope_Limiter
{
}
#typev BattMngrPlat_SMChg_FGGge_R3_c5542 62 "%0BattMngrTech_FGGge_R3_Set_SOC_Slope_Limiter::slope limiter = %10!d! millipercent" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_Check_FG_Slope_Limiter
{
slopeLimiter, ItemLong -- 10
}
// PDB:  qcbattmngr850.pdb
// PDB:  Last Updated :2020-09-09:19:38:55:000 (UTC) [tracepdb]
#typev BattMngrPlat_SMChg_FGGge_R3_c2487 52 "%0BattMngrTech_FGGge_R3_Start_FCCLearning::Failed to retrieve SW CC SOC" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_Check_StateChange
{
}
#typev BattMngrPlat_SMChg_FGGge_R3_c2487 53 "%0BattMngrTech_FGGge_R3_Start_FCCLearning:: Started FCC Learning at soc %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_Check_StateChange
{
sFCCLearn_start_bat_soc, ItemLong -- 10
}
#typev BattMngrPlat_SMChg_FGGge_R3_c2487 43 "%0BattMngrTech_FGGge_R3_Get_SW_cc_Soc::ERROR::Failed to get SW_CC_SOC info" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_Check_StateChange
{
}
#typev BattMngrPlat_SMChg_FGGge_R3_c2487 42 "%0BattMngrTech_FGGge_R3_Get_SW_cc_Soc SW_CC_SOC RegVal = 0x%10!x!, SW_CC_SOC = %11!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_Check_StateChange
{
regVal, ItemLong -- 10
*sw_cc_soc, ItemLong -- 11
}
// PDB:  qcbattmngr850.pdb
// PDB:  Last Updated :2020-09-09:19:38:55:000 (UTC) [tracepdb]
#typev BattMngrPlat_SMChg_FGGge_R3_c5623 72 "%0BattMngrTech_FGGge_R3_Configure_ESR::ESR FCC = %10!d! mA, control bit = %11!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_Configure_ParallelCharging
{
fcc, ItemLong -- 10
bCtlFcc, ItemLong -- 11
}
// PDB:  qcbattmngr850.pdb
// PDB:  Last Updated :2020-09-09:19:38:55:000 (UTC) [tracepdb]
#typev BattMngrPlat_SMChg_FGGge_R3_c5623 73 "%0BattMngrTech_FGGge_R3_Configure_ESR::Failed configuring ESR FCC!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_Configure_ParallelCharging
{
}
// PDB:  qcbattmngr850.pdb
// PDB:  Last Updated :2020-09-09:19:38:55:000 (UTC) [tracepdb]
#typev BattMngrPlat_SMChg_FGGge_R3_c4383 90 "%0BattMngrTech_FGGge_R3_Get_Raw_KiCoeff_FullSoc:: sramVal = %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_SRAMReadsAndWrites
{
*pRawSramVal, ItemLong -- 10
}
#typev BattMngrPlat_SMChg_FGGge_R3_c4370 89 "%0BattMngrTech_FGGge_R3_Set_ITerm_Low_Window:: status = %10!x!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_SRAMReadsAndWrites
{
status, ItemLong -- 10
}
#typev BattMngrPlat_SMChg_FGGge_R3_c4370 88 "%0BattMngrTech_FGGge_R3_Set_ITerm_Low_Window:: Updated iterm Low Window = %10!d! mA" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_SRAMReadsAndWrites
{
itermLowWindow, ItemLong -- 10
}
#typev BattMngrPlat_SMChg_FGGge_R3_c4361 85 "%0BattMngrTech_FGGge_R3_Adjust_ESR_RSlow_Params::Rconn flag is set,         no adjustment needed for ESR-Rslow scaling factor" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_SRAMReadsAndWrites
{
}
#typev BattMngrPlat_SMChg_FGGge_R3_c4354 71 "%0BattMngrTech_FGGge_R3_Refresh_Batt_FCC:: Failed to update FCC with saved-learned-FCC" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_SRAMReadsAndWrites
{
}
#typev BattMngrPlat_SMChg_FGGge_R3_c4354 70 "%0BattMngrTech_FGGge_R3_Refresh_Batt_FCC:: Update FCC with saved-learned-FCC" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_SRAMReadsAndWrites
{
}
#typev BattMngrPlat_SMChg_FGGge_R3_c4354 69 "%0BattMngrTech_FGGge_R3_Refresh_Batt_FCC:: saved FCC = %10!d! mAh" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_SRAMReadsAndWrites
{
savedFCC, ItemLong -- 10
}
#typev BattMngrPlat_SMChg_FGGge_R3_c4331 65 "%0BattMngrTech_FGGge_R3_Init::Failed initializing ESR pulse" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_SRAMReadsAndWrites
{
}
#typev BattMngrPlat_SMChg_FGGge_R3_c4331 64 "%0BattMngrTech_FGGge_R3_Init::Successfully initializing ESR pulse" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_SRAMReadsAndWrites
{
}
#typev BattMngrPlat_SMChg_FGGge_R3_c4314 40 "%0BattMngrTech_FGGge_R3_Get_ChargeCycle::									  										ERROR::Failed to get saved charge cycles info" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_SRAMReadsAndWrites
{
}
#typev BattMngrPlat_SMChg_FGGge_R3_c4314 39 "%0BattMngrTech_FGGge_R3_Get_ChargeCycle::									 										bucket index = %10!d!, accumulated cycle = %11!d! charge cycles" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_SRAMReadsAndWrites
{
index, ItemLong -- 10
pChargeCycles[index], ItemLong -- 11
}
// PDB:  qcbattmngr850.pdb
// PDB:  Last Updated :2020-09-09:19:38:55:000 (UTC) [tracepdb]
#typev BattMngrPlat_SMChg_FGGge_R3_c4299 35 "%0saved applied delta soc is %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_SRAMReadsAndWrites
{
*applied_Delta_soc, ItemLong -- 10
}
#typev BattMngrPlat_SMChg_FGGge_R3_c4299 34 "%0read saved applied delta soc is %10!d! , out of range, resetting it to 0." //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_SRAMReadsAndWrites
{
tempValue, ItemLong -- 10
}
#typev BattMngrPlat_SMChg_FGGge_R3_c4275 68 "%0BattMngrTech_FGGge_R3_Set_Jeita_Hysteresis::Older PMI revision, use SW JEITA hysteresis" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_SRAMReadsAndWrites
{
}
#typev BattMngrPlat_SMChg_FGGge_R3_c4275 66 "%0BattMngrTech_FGGge_R3_Set_Jeita_Hysteresis::Set hysteresis = %10!d! C" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_SRAMReadsAndWrites
{
tempHysteresis, ItemLong -- 10
}
#typev BattMngrPlat_SMChg_FGGge_R3_c4275 67 "%0BattMngrTech_FGGge_R3_Set_Jeita_Hysteresis::Setting hysteresis failed!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_SRAMReadsAndWrites
{
}
// PDB:  qcbattmngr850.pdb
// PDB:  Last Updated :2020-09-09:19:38:55:000 (UTC) [tracepdb]
#typev BattMngrPlat_SMChg_FGGge_R3_c1858 32 "%0BattMngrTech_FGGge_R3_Check_Full_Soc_Rt_Sts:: ESR Workaround : FULL_SOC RT STATUS is false" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_StatePeriodic_Action
{
}
#typev BattMngrPlat_SMChg_FGGge_R3_c1858 31 "%0BattMngrTech_FGGge_R3_Check_Full_Soc_Rt_Sts:: ESR Workaround : FULL_SOC RT STATUS is true" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_StatePeriodic_Action
{
}
// PDB:  qcbattmngr850.pdb
// PDB:  Last Updated :2020-09-09:19:38:55:000 (UTC) [tracepdb]
#typev BattMngrPlat_SMChg_FGGge_R3_c1849 41 "%0BattMngrTech_FGGge_R1_Check_Empty_Soc_Rt_Sts:: EMPTY_SOC_RT_STS TRUE." //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_StatePeriodic_Action
{
}
#typev BattMngrPlat_SMChg_FGGge_R3_c1832 60 "%0BattMngrTech_FGGge_R3_Get_Battery_Temp_Sts:: in JEITA normal zone" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_StatePeriodic_Action
{
}
#typev BattMngrPlat_SMChg_FGGge_R3_c1832 59 "%0BattMngrTech_FGGge_R3_Get_Battery_Temp_Sts:: in JEITA soft cold zone" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_StatePeriodic_Action
{
}
#typev BattMngrPlat_SMChg_FGGge_R3_c1832 58 "%0BattMngrTech_FGGge_R3_Get_Battery_Temp_Sts:: in JEITA hard cold zone" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_StatePeriodic_Action
{
}
#typev BattMngrPlat_SMChg_FGGge_R3_c1832 57 "%0BattMngrTech_FGGge_R3_Get_Battery_Temp_Sts:: in JEITA soft hot zone" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_StatePeriodic_Action
{
}
#typev BattMngrPlat_SMChg_FGGge_R3_c1832 56 "%0BattMngrTech_FGGge_R3_Get_Battery_Temp_Sts:: in JEITA hard hot zone" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_StatePeriodic_Action
{
}
#typev BattMngrPlat_SMChg_FGGge_R3_c1832 55 "%0BattMngrTech_FGGge_R3_Get_Battery_Temp_Sts:: status = 0x%10!x!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_StatePeriodic_Action
{
outBuf.battTempSts, ItemLong -- 10
}
#typev BattMngrPlat_SMChg_FGGge_R3_c1832 61 "%0BattMngrTech_FGGge_R3_Get_Battery_Temp_Sts::IOCTL_PM_FUELGAUGE_GET_BATT_TEMP_STS failed" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_StatePeriodic_Action
{
}
#typev BattMngrPlat_SMChg_FGGge_R3_c1814 33 "%0BattMngrTech_FGGge_R3_Set_Applied_DeltaSOC:: Write applied delta Soc sram." //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrPlat_SMChg_FGGge_R3_StatePeriodic_Action
{
}
// PDB:  qcbattmngr850.pdb
// PDB:  Last Updated :2020-09-09:19:38:55:000 (UTC) [tracepdb]
#typev BattMngrTech_FGGge_R3_c1534 26 "%0BattMngrTech_FGGge_R3_BatteryPresentStatus:: IOCTL_PM_FUELGAUGE_GET_BATTERY_PRESENT_STS returned GAUGE_FG_FAILURE; battery present status =%10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_BatteryPresentStatus
{
*IsBattPresent, ItemLong -- 10
}
#typev BattMngrTech_FGGge_R3_c1530 25 "%0BattMngrTech_FGGge_R3_BatteryPresentStatus:: IOCTL_PM_FUELGAUGE_GET_BATTERY_PRESENT_STS is successful, battery present status =%10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_BatteryPresentStatus
{
*IsBattPresent, ItemLong -- 10
}
#typev BattMngrTech_FGGge_R3_c1540 27 "%0BattMngrTech_FGGge_R3_BatteryPresentStatus:: IOCTL_PM_FUELGAUGE_GET_BATTERY_PRESENT_STS returned failure; battery present status =%10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_BatteryPresentStatus
{
*IsBattPresent, ItemLong -- 10
}
#typev BattMngrTech_FGGge_R3_c2159 51 "%0BattMngrTech_FGGge_R3_Calculate_FCC:: learned_fcc = %10!d! mAh, not written to sram" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Calculate_FCC
{
learned_fcc, ItemLong -- 10
}
#typev BattMngrTech_FGGge_R3_c2151 50 "%0BattMngrTech_FGGge_R3_Calculate_FCC:: learned_fcc = %10!d! mAh, written to sram" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Calculate_FCC
{
learned_fcc, ItemLong -- 10
}
#typev BattMngrTech_FGGge_R3_c2148 48 "%0BattMngrTech_FGGge_R3_Set_Learned_FCC:: Failed saving learned FCC to SRAM scratch pad addr 0x%10!x!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Calculate_FCC
{
EMPTY_SCRATCH_PAD_ADDR4, ItemLong -- 10
}
#typev BattMngrTech_FGGge_R3_c2148 47 "%0BattMngrTech_FGGge_R3_Set_Learned_FCC:: Learned FCC = %10!d! mAh saved to SRAM scratch pad addr 0x%11!x!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Calculate_FCC
{
learnedFCC, ItemLong -- 10
EMPTY_SCRATCH_PAD_ADDR4, ItemLong -- 11
}
#typev BattMngrTech_FGGge_R3_c2148 46 "%0BattMngrTech_FGGge_R3_Set_Learned_FCC:: set actual FCC = %10!d! mAh" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Calculate_FCC
{
learnedFCC, ItemLong -- 10
}
#typev BattMngrTech_FGGge_R3_c2148 45 "%0BattMngrTech_FGGge_R3_Set_Learned_FCC:: Invalid learned FCC, don't save" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Calculate_FCC
{
}
#typev BattMngrTech_FGGge_R3_c2143 44 "%0BattMngrTech_FGGge_R3_Set_SW_cc_Soc:: Setting CC_SOC to %10!d! (= 0x%11!x!)" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Calculate_FCC
{
sw_cc_soc_tenthpercent, ItemLong -- 10
tempVal, ItemLong -- 11
}
#typev BattMngrTech_FGGge_R3_c2122 49 "%0BattMngrTech_FGGge_R3_Calculate_FCC:: raw learned_fcc = %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Calculate_FCC
{
learned_fcc, ItemLong -- 10
}
#typev BattMngrTech_FGGge_R3_c2113 43 "%0BattMngrTech_FGGge_R3_Get_SW_cc_Soc::ERROR::Failed to get SW_CC_SOC info" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Calculate_FCC
{
}
#typev BattMngrTech_FGGge_R3_c2113 42 "%0BattMngrTech_FGGge_R3_Get_SW_cc_Soc SW_CC_SOC RegVal = 0x%10!x!, SW_CC_SOC = %11!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Calculate_FCC
{
regVal, ItemLong -- 10
*sw_cc_soc, ItemLong -- 11
}
#typev BattMngrTech_FGGge_R3_c3086 76 "%0BattMngrTech_FGGge_R3_DMA_AccessGranted::Error on adding delay" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_DMA_AccessGranted
{
}
#typev BattMngrTech_FGGge_R3_c3142 77 "%0BattMngrTech_FGGge_R3_DMA_Config_Mem_Arbiter::Configured bEnLoLatency = %10!d!, bReqMemArb = %11!d!" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_DMA_Config_Mem_Arbiter
{
bEnMemArbLoLatency, ItemLong -- 10
bReqMemArb, ItemLong -- 11
}
#typev BattMngrTech_FGGge_R3_c3146 78 "%0BattMngrTech_FGGge_R3_DMA_Config_Mem_Arbiter::Failed configuring FG memory arbiter" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_DMA_Config_Mem_Arbiter
{
}
#typev BattMngrTech_FGGge_R3_c3373 79 "%0BattMngrTech_FGGge_R3_DMA_Read_Data::Failed reading from FG DMA at addr 0x%10!x!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_DMA_Read_Data
{
(baseAddr | offset), ItemLong -- 10
}
#typev BattMngrTech_FGGge_R3_c3312 80 "%0BattMngrTech_FGGge_R3_DMA_Write_Data::Failed writing to FG DMA at addr 0x%10!x!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_DMA_SRAM_Write_Registers
{
(baseAddr | offset), ItemLong -- 10
}
#typev BattMngrTech_FGGge_R3_c377 10 "%0BattMngrTech_FGGge_R3_GetFlashPredictionParams::									 OCVEstimate = %10!d! mV, RSlow = %11!d! mOhm, ESR = %12!d! mOhm, ibattFast = %13!d! mA" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_GetFlashPredictionParams
{
*OCVEstimate, ItemLong -- 10
*RSlow, ItemLong -- 11
*esr, ItemLong -- 12
*IBattFast, ItemLong -- 13
}
#typev BattMngrTech_FGGge_R3_c532 16 "%0BattMngrTech_FGGge_R3_GetLatestBatteryData::(-)" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_GetLatestBatteryData
{
}
#typev BattMngrTech_FGGge_R3_c529 15 "%0BattMngrTech_FGGge_R3_GetLatestBatteryData:: ESD : BatteryPercentage = %10!d! , BatteryVoltage = %11!d! mv, ibat = %12!d! mA, battery temperature = %13!d! C, rbattn = %14!d! mOhm" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_GetLatestBatteryData
{
*battPerc, ItemLong -- 10
*voltage, ItemLong -- 11
*battCurrent, ItemLong -- 12
*batteryTemperature, ItemLong -- 13
*Rbatt, ItemLong -- 14
}
#typev BattMngrTech_FGGge_R3_c527 14 "%0BattMngrTech_FGGge_R3_GetLatestBatteryData:: ESD : BatteryPercentage = %10!d! , BatteryVoltage = %11!d! mv, ibat = %12!d! mA, battery temperature = %13!d! C, rbattn = %14!d! mOhm" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_GetLatestBatteryData
{
*battPerc, ItemLong -- 10
*voltage, ItemLong -- 11
*battCurrent, ItemLong -- 12
*batteryTemperature, ItemLong -- 13
*Rbatt, ItemLong -- 14
}
#typev BattMngrTech_FGGge_R3_c526 13 "%0BattMngrTech_FGGge_R3_GetLatestBatteryData:: ESD : ibat = %10!d! mA, battery temperature = %11!d! C, rbattn = %12!d! mOhm" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_GetLatestBatteryData
{
*battCurrent, ItemLong -- 10
*batteryTemperature, ItemLong -- 11
*Rbatt, ItemLong -- 12
}
#typev BattMngrTech_FGGge_R3_c525 12 "%0BattMngrTech_FGGge_R3_GetLatestBatteryData:: ESD : BatteryPercentage = %10!d! , BatteryVoltage = %11!d! mv" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_GetLatestBatteryData
{
*battPerc, ItemLong -- 10
*voltage, ItemLong -- 11
}
#typev BattMngrTech_FGGge_R3_c455 11 "%0BattMngrTech_FGGge_R3_GetLatestBatteryData::(+)" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_GetLatestBatteryData
{
}
#typev BattMngrTech_FGGge_R3_c1440 24 "%0BattMngrTech_FGGge_R3_Get_SRAMGaugingData:: SRAM_DATA : Actual FCC = %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Get_SRAMGaugingData
{
StaticSRAMDataR3.actualFCC, ItemLong -- 10
}
#typev BattMngrTech_FGGge_R3_c1431 23 "%0BattMngrTech_FGGge_R3_Get_SRAMGaugingData:: SRAM_DATA : BattSOCRegVal = 0x%10!x!, CC_SOCRegVal = 0x%11!x!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Get_SRAMGaugingData
{
BattSOCReg, ItemLong -- 10
signed_regval, ItemLong -- 11
}
#typev BattMngrTech_FGGge_R3_c1430 22 "%0BattMngrTech_FGGge_R3_Get_SRAMGaugingData:: SRAM_DATA : battery_SOC = %10!u!, CC_SOC = %11!u!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Get_SRAMGaugingData
{
StaticSRAMDataR3.battery_SOC, ItemLong -- 10
StaticSRAMDataR3.CC_SOC, ItemLong -- 11
}
#typev BattMngrTech_FGGge_R3_c1429 21 "%0BattMngrTech_FGGge_R3_Get_SRAMGaugingData:: SRAM_DATA : SOC_system = %10!u!, SOC_monotonic = %11!u!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Get_SRAMGaugingData
{
StaticSRAMDataR3.SOC_system, ItemLong -- 10
StaticSRAMDataR3.SOC_monotonic, ItemLong -- 11
}
#typev BattMngrTech_FGGge_R3_c1428 20 "%0BattMngrTech_FGGge_R3_Get_SRAMGaugingData:: SRAM_DATA : OCVEstimate = %10!u! mV, Rslow = %11!u! mOhm" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Get_SRAMGaugingData
{
StaticSRAMDataR3.OCVEstimate, ItemLong -- 10
StaticSRAMDataR3.RSlow, ItemLong -- 11
}
#typev BattMngrTech_FGGge_R3_c3640 86 "%0BattMngrTech_FGGge_R3_Read_IbatFast::ibatFast = %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Read_IbatFast
{
*pIbat, ItemLong -- 10
}
#typev BattMngrTech_FGGge_R3_c3644 87 "%0BattMngrTech_FGGge_R3_Read_IbatFast::Reading failed!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Read_IbatFast
{
}
#typev BattMngrTech_FGGge_R3_c1803 38 "%0BattMngrTech_FGGge_R3_Set_ChargeCycle failed, breaking" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Set_ChargeCycle
{
}
#typev BattMngrTech_FGGge_R3_c1798 37 "%0Set_ChargeCycle::bucket = %10!d!, cycles = %11!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Set_ChargeCycle
{
chargeCycelBuckets, ItemLong -- 10
ChargeCycles[chargeCycelBuckets], ItemLong -- 11
}
#typev BattMngrTech_FGGge_R3_c1794 36 "%0Set_ChargeCycle::bucket = %10!d!, cycles = %11!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Set_ChargeCycle
{
chargeCycelBuckets, ItemLong -- 10
ChargeCycles[chargeCycelBuckets], ItemLong -- 11
}
#typev BattMngrTech_FGGge_R3_c3549 84 "%0BattMngrTech_FGGge_R3_Set_ESR_Rslow_Params::Setting          'Rconn done' flag" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Set_ESR_Rslow_Params
{
}
#typev BattMngrTech_FGGge_R3_c3539 83 "%0BattMngrTech_FGGge_R3_Set_ESR_Rslow_Params::Setting           charging ESR to rslow scaling factor to %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Set_ESR_Rslow_Params
{
value, ItemLong -- 10
}
#typev BattMngrTech_FGGge_R3_c3531 82 "%0BattMngrTech_FGGge_R3_Set_ESR_Rslow_Params::Setting           discharging ESR to rslow scaling factor to %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Set_ESR_Rslow_Params
{
value, ItemLong -- 10
}
#typev BattMngrTech_FGGge_R3_c3521 81 "%0BattMngrTech_FGGge_R3_Set_ESR_Rslow_Params::Invalid parameter(s)          battEsr + Rconn = 0" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Set_ESR_Rslow_Params
{
}
#typev BattMngrTech_FGGge_R3_c2962 75 "%0BattMngrTech_FGGge_R3_Set_ESR_Update_Step:: Failed to Update ESR update steps" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Set_ESR_Update_Step
{
}
#typev BattMngrTech_FGGge_R3_c2958 74 "%0BattMngrTech_FGGge_R3_Set_ESR_Update_Step:: Updated ESR update steps" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Set_ESR_Update_Step
{
}
#typev BattMngrTech_FGGge_R3_c662 19 "%0BattMngrTech_FGGge_R3_Set_JEITA_Thresholds:: (-)" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Set_JEITA_Thresholds
{
}
#typev BattMngrTech_FGGge_R3_c653 18 "%0BattMngrTech_FGGge_R3_Set_JEITA_Thresholds::hard cold = %10!d! C, soft cold = %11!d! C, soft hot = %12!d! C, hard hot = %13!d! C" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Set_JEITA_Thresholds
{
hard_cold, ItemLong -- 10
soft_cold, ItemLong -- 11
soft_hot, ItemLong -- 12
hard_hot, ItemLong -- 13
}
#typev BattMngrTech_FGGge_R3_c652 17 "%0BattMngrTech_FGGge_R3_Set_JEITA_Thresholds:: (+)" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Set_JEITA_Thresholds
{
}
#typev BattMngrTech_FGGge_R3_c3755 91 "%0BattMngrTech_FGGge_R3_Set_Raw_KiCoeff_FullSoc:: set sramVal = %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Set_Raw_KiCoeff_FullSoc
{
rawSramVal, ItemLong -- 10
}
#typev BattMngrTech_FGGge_R3_c1607 29 "%0BattMngrTech_FGGge_R3_Test_Critical_VBatt:: ESD : SOC_counter = %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Test_Critical_VBatt
{
sBATTMNGR_FGGGE_ESD_SOC_CNTR, ItemLong -- 10
}
#typev BattMngrTech_FGGge_R3_c1597 28 "%0BattMngrTech_FGGge_R3_Test_Critical_VBatt:: ESD : VBAT_LOW RT STATUS is true" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Test_Critical_VBatt
{
}
#typev BattMngrTech_FGGge_R3_c1615 30 "%0BattMngrTech_FGGge_R3_Test_Critical_VBatt:: ESD : VBAT_LOW RT status is False ESD mode disabled and counter reset to 0" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_FGGge FUNC=BattMngrTech_FGGge_R3_Test_Critical_VBatt
{
}
