// PDB:  qciommu850.pdb
// PDB:  Last Updated :2020-09-09:19:38:55:000 (UTC) [tracepdb]
9b9ff64b-1a19-3d43-b162-fe8883b89158 IOMMU // SRC=Vcm.cpp MJ= MN=
#typev Vcm_cpp4407 283 "%0 Vcm.cpp::%!FUNC!::4407 : pNode->GetAVCM() is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=CheckErrataApplicableClients
{
}
#typev Vcm_cpp4390 282 "%0 Vcm.cpp::%!FUNC!::4390 : pAssocitatedAVCMsCollection is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=CheckErrataApplicableClients
{
}
#typev Vcm_cpp1060 45 "%0 Vcm.cpp::%!FUNC! :Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1052 44 "%0 Vcm.cpp::%!FUNC!::1052 : Hyp call SmmuHypAssignPageTableNodes to assign page table to/from CP VM Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1020 43 "%0 Vcm.cpp::%!FUNC!::1020 : Invalid AVCM CP ID." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1004 42 "%0 Vcm.cpp::%!FUNC!::1004 : pNode->GetAVCM() is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp991 41 "%0 Vcm.cpp::%!FUNC!::991 :Access Control VM mismatch" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp984 40 "%0 Vcm.cpp::%!FUNC!::984 : pNode->GetAVCM() is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp968 39 "%0 Vcm.cpp::%!FUNC!::968 : pAssocitatedAVCMsCollection is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp961 38 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp316 12 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmAddAVCMToCollection
{
}
#typev Vcm_cpp305 11 "%0 Vcm.cpp::%!FUNC!::305 : pNode memory allocation failed." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmAddAVCMToCollection
{
}
#typev Vcm_cpp296 10 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmAddAVCMToCollection
{
}
#typev Vcm_cpp433 21 "%0 Vcm.cpp::%!FUNC!::433 : SmmuFlushContextTLB failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmFlushTLBsAssociatedWith
{
}
#typev Vcm_cpp421 20 "%0 Vcm.cpp::%!FUNC!::421 : pNode->GetAVCM() is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmFlushTLBsAssociatedWith
{
}
#typev Vcm_cpp402 19 "%0 Vcm.cpp::%!FUNC!::402 : pAssocitatedAVCMsCollection is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmFlushTLBsAssociatedWith
{
}
#typev Vcm_cpp389 18 "%0 Vcm.cpp::%!FUNC!::389 : Invalid parameter - VcmId is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmFlushTLBsAssociatedWith
{
}
#typev Vcm_cpp383 17 "%0 Vcm.cpp::%!FUNC!::383 : Invalid parameter - VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmFlushTLBsAssociatedWith
{
}
#typev Vcm_cpp2586 144 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalActivate
{
}
#typev Vcm_cpp2575 143 "%0 Vcm.cpp::%!FUNC!::2575 : SmmuPageTableBind failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalActivate
{
}
#typev Vcm_cpp2561 142 "%0 Vcm.cpp::%!FUNC!::2561 : AvcmId is already active" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalActivate
{
}
#typev Vcm_cpp2550 141 "%0 Vcm.cpp::%!FUNC!::2550 : AvcmIDBarker is Invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalActivate
{
}
#typev Vcm_cpp2541 140 "%0 Vcm.cpp::%!FUNC!::2541 : AvcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalActivate
{
}
#typev Vcm_cpp2532 139 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalActivate
{
}
#typev Vcm_cpp2358 129 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2347 128 "%0 Vcm.cpp::%!FUNC!::2347 : VcmAddAVCMToCollection failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2325 127 "%0 Vcm.cpp::%!FUNC!::2325 : ExAllocatePoolWithTag failed -- could not allocate memory for avcm" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2312 126 "%0 Vcm.cpp::%!FUNC!::2312 : SmmuPageTableAlloc failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2283 125 "%0 Vcm.cpp::%!FUNC!::2283 : Context bank of different CP VMs can have same VCM" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2265 124 "%0 Vcm.cpp::%!FUNC!::2265 : pAssocitatedAVCMsCollection is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2256 123 "%0 Vcm.cpp::%!FUNC!::2256 :Access Control VM mismatch" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2251 122 "%0 Vcm.cpp::%!FUNC!::2251 :CtxId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2245 121 "%0 Vcm.cpp::%!FUNC!::2245 : Vcm Barker corrupted" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2238 120 "%0 Vcm.cpp::%!FUNC!::2238 : VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2234 119 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp1885 95 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1878 94 "%0 Vcm.cpp::%!FUNC!::1878 : Backfill ghost mdl pages failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1851 93 "%0 Vcm.cpp::%!FUNC!::1851 : SmmuPageTableMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1835 92 "%0 Vcm.cpp::%!FUNC!::1835 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1813 91 "%0 Vcm.cpp::%!FUNC!::1813 : could not get pagelist" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1798 90 "%0 Vcm.cpp::%!FUNC!::1798 : Reservation is already backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1790 89 "%0 Vcm.cpp::%!FUNC!::1790 : Reservation is already backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1783 88 "%0 Vcm.cpp::%!FUNC!::1783 : Mdl Object is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1776 87 "%0 Vcm.cpp::%!FUNC!::1776 :ResId cannot be used with this API" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1767 86 "%0 Vcm.cpp::%!FUNC!::1767 : ResId barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1760 85 "%0 Vcm.cpp::%!FUNC!::1760 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1755 84 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBack
{
}
#typev Vcm_cpp2053 108 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2047 107 "%0 Vcm.cpp::%!FUNC!::2047 : Backfill ghost mdl pages failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2020 106 "%0 Vcm.cpp::%!FUNC!::2020 : SmmuPageTableMapContiguous failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2000 105 "%0 Vcm.cpp::%!FUNC!::2000 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp1981 104 "%0 Vcm.cpp::%!FUNC!::1981 : PhysAddr address not aligned to 4k" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp1974 103 "%0 Vcm.cpp::%!FUNC!::1974 : Size of PhysAddr address not aligned to 4k" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp1967 102 "%0 Vcm.cpp::%!FUNC!::1967 : Size of PhysAddr address is zero" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp1960 101 "%0 Vcm.cpp::%!FUNC!::1960 : Reservation is already backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp1952 100 "%0 Vcm.cpp::%!FUNC!::1952 : Reservation is already backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp1945 99 "%0 Vcm.cpp::%!FUNC!::1945 :ResId cannot be used with this API" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp1936 98 "%0 Vcm.cpp::%!FUNC!::1936 : ResId barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp1929 97 "%0 Vcm.cpp::%!FUNC!::1929 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp1924 96 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp3662 226 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3651 225 "%0 Vcm.cpp::%!FUNC!::3651 : SmmuPageTableUnMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3620 224 "%0 Vcm.cpp::%!FUNC!::3620 : Pagelist is invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3604 223 "%0 Vcm.cpp::%!FUNC!::3604 : BackFill MDL not setup properly" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3589 222 "%0 Vcm.cpp::%!FUNC!::3589 : Cannot backfill if reservation is not already backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3582 221 "%0 Vcm.cpp::%!FUNC!::3582 : Already backfilled" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3572 220 "%0 Vcm.cpp::%!FUNC!::3572 : ResId is INVALID" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3563 219 "%0 Vcm.cpp::%!FUNC!::3563 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3558 218 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3896 243 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3887 242 "%0 Vcm.cpp::%!FUNC!::3887 : SmmuPageTableMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3872 241 "%0 Vcm.cpp::%!FUNC!::3872 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3842 240 "%0 Vcm.cpp::%!FUNC!::3842 : Size mismatch -- physical memory not equal to the virtual space to be backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3835 239 "%0 Vcm.cpp::%!FUNC!::3835 : Bound not created with to allow VcmBackInBound" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3828 238 "%0 Vcm.cpp::%!FUNC!::3828 : BoundId is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3823 237 "%0 Vcm.cpp::%!FUNC!::3823 : BoundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3818 236 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3738 233 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3728 232 "%0 Vcm.cpp::%!FUNC!::3728 : VcmFlushTLBsAssociatedWith failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3716 231 "%0 Vcm.cpp::%!FUNC!::3716 : SmmuPageTableUnMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3700 230 "%0 Vcm.cpp::%!FUNC!::3700 : Reservation is NOT backfilled" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3692 229 "%0 Vcm.cpp::%!FUNC!::3692 : ResId is Corrupted" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3685 228 "%0 Vcm.cpp::%!FUNC!::3685 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3679 227 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3759 235 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalClearFault
{
}
#typev Vcm_cpp3757 234 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalClearFault
{
}
#typev Vcm_cpp822 30 "%0 Vcm.cpp::%!FUNC! :Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp761 29 "%0 Vcm.cpp::%!FUNC!::761 : Failed to initialize Virtmem" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp751 28 "%0 Vcm.cpp::%!FUNC!::751 :pAssocitatedAVCMsCollection is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp712 27 "%0 Vcm.cpp::%!FUNC!::712 : Failed to create wait lock" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp705 26 "%0 Vcm.cpp::%!FUNC!::705 : Failed to allocate memory for VCM" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp692 25 "%0 Vcm.cpp::%!FUNC!::692 : Invalid parameter - Requested address space exceeds 32b boundary" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp685 24 "%0 Vcm.cpp::%!FUNC!::685 : Invalid paramter - multiple ACVM attr" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp679 23 "%0 Vcm.cpp::%!FUNC!::679 : Invalid paramter - Len cannot be 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp674 22 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp3073 178 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3055 177 "%0 Vcm.cpp::%!FUNC!::3055 : SmmuPageTableReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3022 176 "%0 Vcm.cpp::%!FUNC!::3022 : VcmManagementVirtmemInit failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3000 175 "%0 Vcm.cpp::%!FUNC!::3000 : VcmManagementVirtmemAlloc failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp2982 174 "%0 Vcm.cpp::%!FUNC!::2982 : boundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp2972 173 "%0 Vcm.cpp::%!FUNC!::2972 : Special bound needs preallocated L2" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp2964 172 "%0 Vcm.cpp::%!FUNC!::2964 : Vcm is not associated" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp2955 171 "%0 Vcm.cpp::%!FUNC!::2955 : Len is 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp2948 170 "%0 Vcm.cpp::%!FUNC!::2948 : VcmId is Invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp2942 169 "%0 Vcm.cpp::%!FUNC!::2942 : VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp2936 168 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp2683 150 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalDeactivate
{
}
#typev Vcm_cpp2673 149 "%0 Vcm.cpp::%!FUNC!::2673 : SmmuPageTableUnBind failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeactivate
{
}
#typev Vcm_cpp2658 148 "%0 Vcm.cpp::%!FUNC!::2658 : Association already not active" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeactivate
{
}
#typev Vcm_cpp2646 147 "%0 Vcm.cpp::%!FUNC!::2646 : AvcmId->AvcmBarker != AVCM_BARKER" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeactivate
{
}
#typev Vcm_cpp2636 146 "%0 Vcm.cpp::%!FUNC!::2636 : AvcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeactivate
{
}
#typev Vcm_cpp2627 145 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalDeactivate
{
}
#typev Vcm_cpp2446 135 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp2421 134 "%0 Vcm.cpp::%!FUNC!::2421 : VcmRemoveAVCMFromCollection failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp2412 133 "%0 Vcm.cpp::%!FUNC!::2412 : AvcmId is in use right now" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp2402 132 "%0 Vcm.cpp::%!FUNC!::2402 : AvcmBarker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp2396 131 "%0 Vcm.cpp::%!FUNC!::2396 : AvcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp2392 130 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp924 37 "%0 Vcm.cpp::%!FUNC! :Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalFree
{
}
#typev Vcm_cpp901 36 "%0 Vcm.cpp::%!FUNC!::901 : SmmuPageTableFree Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFree
{
}
#typev Vcm_cpp890 35 "%0 Vcm.cpp::%!FUNC!::890 : Vcm is currently busy 1" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFree
{
}
#typev Vcm_cpp880 34 "%0 Vcm.cpp::%!FUNC!::880 : Vcm is currently busy 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFree
{
}
#typev Vcm_cpp870 33 "%0 Vcm.cpp::%!FUNC!::870 : Invalid parameter - VcmId is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFree
{
}
#typev Vcm_cpp864 32 "%0 Vcm.cpp::%!FUNC!::864 : Invalid parameter - VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFree
{
}
#typev Vcm_cpp858 31 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalFree
{
}
#typev Vcm_cpp3475 209 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3458 208 "%0 Vcm.cpp::%!FUNC!::3458 : SmmuPageTableUnReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3441 207 "%0 Vcm.cpp::%!FUNC!::3441 : VcmManagementVirtmemFree failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3427 206 "%0 Vcm.cpp::%!FUNC!::3427 : VcmManagementVirtmemDeinit failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3416 205 "%0 Vcm.cpp::%!FUNC!::3416 : Active reservations within the bound" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3410 204 "%0 Vcm.cpp::%!FUNC!::3410 : Bound barker is invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3403 203 "%0 Vcm.cpp::%!FUNC!::3403 : BoundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3399 202 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3538 217 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetBoundSize
{
}
#typev Vcm_cpp3532 216 "%0 Vcm.cpp::%!FUNC!::3532 : BoundId is INVALID" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetBoundSize
{
}
#typev Vcm_cpp3525 215 "%0 Vcm.cpp::%!FUNC!::3525 : BoundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetBoundSize
{
}
#typev Vcm_cpp3522 214 "%0 Vcm.cpp::%!FUNC! : Enter" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetBoundSize
{
}
#typev Vcm_cpp3508 213 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetBoundStartAddr
{
}
#typev Vcm_cpp3501 212 "%0 Vcm.cpp::%!FUNC!::3501 : BoundId is INVALID" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetBoundStartAddr
{
}
#typev Vcm_cpp3494 211 "%0 Vcm.cpp::%!FUNC!::3494 : BoundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetBoundStartAddr
{
}
#typev Vcm_cpp3490 210 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetBoundStartAddr
{
}
#typev Vcm_cpp2735 154 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetDevAddr
{
}
#typev Vcm_cpp2727 153 "%0 Vcm.cpp::%!FUNC!::2727 : Reservation Id invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetDevAddr
{
}
#typev Vcm_cpp2720 152 "%0 Vcm.cpp::%!FUNC!::2720 : Reservation Id is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetDevAddr
{
}
#typev Vcm_cpp2715 151 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetDevAddr
{
}
#typev Vcm_cpp4267 274 "%0 Vcm.cpp::%!FUNC!::4267 :PageTableHandle is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetPTBaseAddr
{
}
#typev Vcm_cpp4262 273 "%0 Vcm.cpp::%!FUNC!::4262 :A valid page table does not exist" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetPTBaseAddr
{
}
#typev Vcm_cpp4257 272 "%0 Vcm.cpp::%!FUNC!::4257 : VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetPTBaseAddr
{
}
#typev Vcm_cpp4252 271 "%0 Vcm.cpp::%!FUNC!::4252 : AvcmIDBarker is Invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetPTBaseAddr
{
}
#typev Vcm_cpp4247 270 "%0 Vcm.cpp::%!FUNC!::4247 : AvcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetPTBaseAddr
{
}
#typev Vcm_cpp2802 159 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetReservation
{
}
#typev Vcm_cpp2790 158 "%0 Vcm.cpp::%!FUNC!::2790 : Deivcee address is invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetReservation
{
}
#typev Vcm_cpp2782 157 "%0 Vcm.cpp::%!FUNC!::2782 : VcmId is invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetReservation
{
}
#typev Vcm_cpp2775 156 "%0 Vcm.cpp::%!FUNC!::2775 : VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetReservation
{
}
#typev Vcm_cpp2770 155 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetReservation
{
}
#typev Vcm_cpp1708 83 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetReservationAttr
{
}
#typev Vcm_cpp1700 82 "%0 Vcm.cpp::%!FUNC!::1700 : ResId barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetReservationAttr
{
}
#typev Vcm_cpp1693 81 "%0 Vcm.cpp::%!FUNC!::1693 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetReservationAttr
{
}
#typev Vcm_cpp1688 80 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetReservationAttr
{
}
#typev Vcm_cpp4221 269 "%0 Vcm.cpp::%!FUNC!::4221 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4206 268 "%0 Vcm.cpp::%!FUNC!::4206 :Failed API SmmuPartialMapUnmap" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4188 267 "%0 Vcm.cpp::%!FUNC!::4188 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4171 266 "%0 Vcm.cpp::%!FUNC!::4171 : pPageList Object is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4160 265 "%0 Vcm.cpp::%!FUNC!::4160 :ResId cannot be used with this API" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4147 264 "%0 Vcm.cpp::%!FUNC!::4147 : ResId barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4136 263 "%0 Vcm.cpp::%!FUNC!::4136 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4581 291 "%0 Vcm.cpp::%!FUNC!::4581 :Failed SmmuRemoveContextFromCollection with %10!s!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPutDomainInPassThrough
{
retVal, ItemNTSTATUS -- 10
}
#typev Vcm_cpp4571 290 "%0 Vcm.cpp::%!FUNC!::4571 : IommuDomainConfigure failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPutDomainInPassThrough
{
}
#typev Vcm_cpp4525 289 "%0 Vcm.cpp::%!FUNC!::4525 :Domain is not attached, Invalid domain mode change request" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPutDomainInPassThrough
{
}
#typev Vcm_cpp4519 288 "%0 Vcm.cpp::%!FUNC!::4519 :SMMU Context Bank is invalid." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPutDomainInPassThrough
{
}
#typev Vcm_cpp4508 287 "%0 Vcm.cpp::%!FUNC!::4508 :SmmuInternalGetARIDHandle Fail" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPutDomainInPassThrough
{
}
#typev Vcm_cpp4500 286 "%0 Vcm.cpp::%!FUNC!::4500 : AvcmIDBarker is Invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPutDomainInPassThrough
{
}
#typev Vcm_cpp4491 285 "%0 Vcm.cpp::%!FUNC!::4491 : AvcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPutDomainInPassThrough
{
}
#typev Vcm_cpp4481 284 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalPutDomainInPassThrough
{
}
#typev Vcm_cpp4581 291 "%0 Vcm.cpp::%!FUNC!::4581 :Failed SmmuRemoveContextFromCollection with %10!s!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=`VcmInternalPutDomainInPassThrough'::`1'::fin$0
{
retVal, ItemNTSTATUS -- 10
}
#typev Vcm_cpp4571 290 "%0 Vcm.cpp::%!FUNC!::4571 : IommuDomainConfigure failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=`VcmInternalPutDomainInPassThrough'::`1'::fin$0
{
}
#typev Vcm_cpp4525 289 "%0 Vcm.cpp::%!FUNC!::4525 :Domain is not attached, Invalid domain mode change request" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=`VcmInternalPutDomainInPassThrough'::`1'::fin$0
{
}
#typev Vcm_cpp4519 288 "%0 Vcm.cpp::%!FUNC!::4519 :SMMU Context Bank is invalid." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=`VcmInternalPutDomainInPassThrough'::`1'::fin$0
{
}
#typev Vcm_cpp4508 287 "%0 Vcm.cpp::%!FUNC!::4508 :SmmuInternalGetARIDHandle Fail" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=`VcmInternalPutDomainInPassThrough'::`1'::fin$0
{
}
#typev Vcm_cpp4500 286 "%0 Vcm.cpp::%!FUNC!::4500 : AvcmIDBarker is Invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=`VcmInternalPutDomainInPassThrough'::`1'::fin$0
{
}
#typev Vcm_cpp4491 285 "%0 Vcm.cpp::%!FUNC!::4491 : AvcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=`VcmInternalPutDomainInPassThrough'::`1'::fin$0
{
}
#typev Vcm_cpp4481 284 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=`VcmInternalPutDomainInPassThrough'::`1'::fin$0
{
}
#typev Vcm_cpp4331 279 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalRegisterIsr
{
}
#typev Vcm_cpp4318 278 "%0 Vcm.cpp::%!FUNC!::4318 : Invalid Context Handle" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalRegisterIsr
{
}
#typev Vcm_cpp4311 277 "%0 Vcm.cpp::%!FUNC!::4311 : Callback function pointer is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalRegisterIsr
{
}
#typev Vcm_cpp4304 276 "%0 Vcm.cpp::%!FUNC!::4304 : Invalid Client Id" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalRegisterIsr
{
}
#typev Vcm_cpp4300 275 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalRegisterIsr
{
}
#typev Vcm_cpp1245 55 "%0 Vcm.cpp::%!FUNC! :Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1227 54 "%0 Vcm.cpp::%!FUNC!::1227 : SmmuPageTableReserve Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1192 53 "%0 Vcm.cpp::%!FUNC!::1192 : VcmManagementVirtmemAlloc returned invalid virtAddr" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1165 52 "%0 Vcm.cpp::%!FUNC!::1165 : Malloc failure - Could not alloce RES" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1154 51 "%0 Vcm.cpp::%!FUNC!::1154 : Vcm has no associated pagetable" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1145 50 "%0 Vcm.cpp::%!FUNC!::1145 : Invalid parameter - Alignment request not supported" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1140 49 "%0 Vcm.cpp::%!FUNC!::1140 : Invalid parameter - Requested size is 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1133 48 "%0 Vcm.cpp::%!FUNC!::1133 : Invalid parameter - Vcm barker is corrupted" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1128 47 "%0 Vcm.cpp::%!FUNC!::1128 : Invalid parameter - VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1123 46 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1432 66 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1417 65 "%0 Vcm.cpp::%!FUNC!::1417 : SmmuPageTableReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1384 64 "%0 Vcm.cpp::%!FUNC!::1384 : VcmManagementVirtmemAllocAt failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1361 63 "%0 Vcm.cpp::%!FUNC!::1361 : Could not allocate memory for RES" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1351 62 "%0 Vcm.cpp::%!FUNC!::1351 : Request not confined to 32bit boundary" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1340 61 "%0 Vcm.cpp::%!FUNC!::1340 : Target address not aligned to 1k" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1334 60 "%0 Vcm.cpp::%!FUNC!::1334 : No pagetable association for the provided Vcm" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1326 59 "%0 Vcm.cpp::%!FUNC!::1326 : Invalid parameter - Len is 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1319 58 "%0 Vcm.cpp::%!FUNC!::1319 : Invalid parameter - VcmId barker invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1313 57 "%0 Vcm.cpp::%!FUNC!::1313 : Invalid parameter - VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1309 56 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp3383 201 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3367 200 "%0 Vcm.cpp::%!FUNC!::3367 : SmmuPageTableReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3329 199 "%0 Vcm.cpp::%!FUNC!::3329 : VcmManagementVirtmemAllocAt failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3306 198 "%0 Vcm.cpp::%!FUNC!::3306 : ExAllocatePoolWithTag failed -- could not allocate memory for RES" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3295 197 "%0 Vcm.cpp::%!FUNC!::3295 : Reservation request exceeds 32bit boundary" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3284 196 "%0 Vcm.cpp::%!FUNC!::3284 : Target request not aligned to 1k" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3278 195 "%0 Vcm.cpp::%!FUNC!::3278 : Vcm not associated" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3270 194 "%0 Vcm.cpp::%!FUNC!::3270 : Requested Len is 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3263 193 "%0 Vcm.cpp::%!FUNC!::3263 : Reservation not allowed within this bound" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3256 192 "%0 Vcm.cpp::%!FUNC!::3256 : Bound Id is invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3248 191 "%0 Vcm.cpp::%!FUNC!::3248 : Bound Id is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3244 190 "%0 Vcm.cpp::%!FUNC! :Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3224 189 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3206 188 "%0 Vcm.cpp::%!FUNC!::3206 : SmmuPageTableReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3169 187 "%0 Vcm.cpp::%!FUNC!::3169 : VcmManagementVirtmemAlloc failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3143 186 "%0 Vcm.cpp::%!FUNC!::3143 : ExAllocatePoolWithTag failure, could not allocate memory for RES" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3132 185 "%0 Vcm.cpp::%!FUNC!::3132 : Vcm not associated" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3125 184 "%0 Vcm.cpp::%!FUNC!::3125 : Requested alignment not supported" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3119 183 "%0 Vcm.cpp::%!FUNC!::3119 : Requested reservation size is 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3112 182 "%0 Vcm.cpp::%!FUNC!::3112 : Cannot reserve into bound allocated using BOUND_BACK_INTO attrib" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3105 181 "%0 Vcm.cpp::%!FUNC!::3105 : BoundId is Invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3097 180 "%0 Vcm.cpp::%!FUNC!::3097 : Bound Id is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3093 179 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp1657 79 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSetReservationAttr
{
}
#typev Vcm_cpp1645 78 "%0 Vcm.cpp::%!FUNC!::1645 : SmmuPageTableSetAttributes failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalSetReservationAttr
{
}
#typev Vcm_cpp1625 77 "%0 Vcm.cpp::%!FUNC!::1625 : Reservation ID barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalSetReservationAttr
{
}
#typev Vcm_cpp1618 76 "%0 Vcm.cpp::%!FUNC!::1618 : Reservation ID is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalSetReservationAttr
{
}
#typev Vcm_cpp1613 75 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSetReservationAttr
{
}
#typev Vcm_cpp4026 253 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSmmuGetARIDConfig
{
}
#typev Vcm_cpp4013 252 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSmmuGetARIDConfig
{
}
#typev Vcm_cpp2189 118 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2175 117 "%0 Vcm.cpp::%!FUNC!::2175 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2150 116 "%0 Vcm.cpp::%!FUNC!::2150 : VcmFlushTLBsAssociatedWith failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2139 115 "%0 Vcm.cpp::%!FUNC!::2139 : SmmuPageTableUnMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2122 114 "%0 Vcm.cpp::%!FUNC!::2122 : BackUnfill failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2113 113 "%0 Vcm.cpp::%!FUNC!::2113 : Reservation is not backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2106 112 "%0 Vcm.cpp::%!FUNC!::2106 :ResId cannot be used with this API" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2097 111 "%0 Vcm.cpp::%!FUNC!::2097 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2090 110 "%0 Vcm.cpp::%!FUNC!::2090 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2085 109 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp3998 251 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp3986 250 "%0 Vcm.cpp::%!FUNC!::3986 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp3969 249 "%0 Vcm.cpp::%!FUNC!::3969 : VcmFlushTLBsAssociatedWith failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp3958 248 "%0 Vcm.cpp::%!FUNC!::3958 : SmmuPageTableUnMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp3942 247 "%0 Vcm.cpp::%!FUNC!::3942 : Bound not created with correct attributes to allow VcmUnbackInBound" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp3935 246 "%0 Vcm.cpp::%!FUNC!::3935 : Bound barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp3930 245 "%0 Vcm.cpp::%!FUNC!::3930 : BoundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp3925 244 "%0 Vcm.cpp::%!FUNC! :Enter" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4360 281 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnregisterIsr
{
}
#typev Vcm_cpp4353 280 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnregisterIsr
{
}
#typev Vcm_cpp1556 74 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1540 73 "%0 Vcm.cpp::%!FUNC!::1540 : SmmuPageTableUnReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1523 72 "%0 Vcm.cpp::%!FUNC!::1523 : SmmuPageTableUnReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1507 71 "%0 Vcm.cpp::%!FUNC!::1507 : VcmManagementVirtmemFree failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1486 70 "%0 Vcm.cpp::%!FUNC!::1486 : ResId is in use" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1479 69 "%0 Vcm.cpp::%!FUNC!::1479 : Invalid parameter - ResId barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1472 68 "%0 Vcm.cpp::%!FUNC!::1472 : Invalid parameter - Reservation ID is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1467 67 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp4107 262 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4101 261 "%0 Vcm.cpp::%!FUNC!::4101 : SmmuPageTableGetMap Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4088 260 "%0 Vcm.cpp::%!FUNC!::4088 : pageMapInfo.pPageList == NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4073 259 "%0 Vcm.cpp::%!FUNC!::4073 : MdlObject is not big enough to fullfill this request" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4062 258 "%0 Vcm.cpp::%!FUNC!::4062 : Bad MdlObject" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4057 257 "%0 Vcm.cpp::%!FUNC!::4057 : Size parameter cannot be 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4052 256 "%0 Vcm.cpp::%!FUNC!::4052 : Corrupt VCM ID" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4047 255 "%0 Vcm.cpp::%!FUNC!::4047 : Bad VCM ID" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4043 254 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp369 16 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmRemoveAVCMFromCollection
{
}
#typev Vcm_cpp354 15 "%0 Vcm.cpp::%!FUNC!::354 : pAssociatedAvcm is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmRemoveAVCMFromCollection
{
}
#typev Vcm_cpp337 14 "%0 Vcm.cpp::%!FUNC!::337 : VcmId->pCollectionVcmAssociatedAVCMs is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmRemoveAVCMFromCollection
{
}
#typev Vcm_cpp330 13 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmRemoveAVCMFromCollection
{
}
