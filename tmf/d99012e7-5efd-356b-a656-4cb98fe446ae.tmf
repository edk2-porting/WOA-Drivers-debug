// PDB:  qcqdss7280.pdb
// PDB:  Last Updated :2022-05-17:11:06:06:456 (UTC) [tracepdb]
d99012e7-5efd-356b-a656-4cb98fe446ae DCC Driver // SRC=dcc.cpp MJ= MN=
#typev dcc_cpp536 20 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::mDccContext->mHypMode invalid. Bailing out." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_DCC FUNC=programSegments
{
}
#typev dcc_cpp530 19 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::DCC Segment already locked. ulLockVal 0x%10!X!. Unexpected. Bailing out." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_DCC FUNC=programSegments
{
ulLockVal, ItemLong -- 10
}
#typev dcc_cpp595 22 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::DCC Segment not locked. ulLockVal 0x%10!X!. Unexpected. Bailing out." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_DCC FUNC=programSegments
{
ulLockVal, ItemLong -- 10
}
#typev dcc_cpp620 24 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::Segment not locked by Secure Space. Attempting to lock through Non secure space. ulLockVal 0x%10!X!" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DCC FUNC=programSegments
{
ulLockVal, ItemLong -- 10
}
#typev dcc_cpp611 23 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::Now attempting to lock the dcc segment as secure master. ulLockVal 0x%10!X!" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DCC FUNC=programSegments
{
ulLockVal, ItemLong -- 10
}
#typev dcc_cpp590 21 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::Attempting to Unlock the segment previously locked by Non secure master. ulLockVal 0x%10!X!" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DCC FUNC=programSegments
{
ulLockVal, ItemLong -- 10
}
#typev dcc_cpp520 18 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::Segment not locked. Attempting to lock through Non secure space first." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DCC FUNC=programSegments
{
}
#typev dcc_cpp536 20 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::mDccContext->mHypMode invalid. Bailing out." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_DCC FUNC=programSegments$fin$0
{
}
#typev dcc_cpp530 19 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::DCC Segment already locked. ulLockVal 0x%10!X!. Unexpected. Bailing out." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_DCC FUNC=programSegments$fin$0
{
ulLockVal, ItemLong -- 10
}
#typev dcc_cpp595 22 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::DCC Segment not locked. ulLockVal 0x%10!X!. Unexpected. Bailing out." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_DCC FUNC=programSegments$fin$0
{
ulLockVal, ItemLong -- 10
}
#typev dcc_cpp620 24 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::Segment not locked by Secure Space. Attempting to lock through Non secure space. ulLockVal 0x%10!X!" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DCC FUNC=programSegments$fin$0
{
ulLockVal, ItemLong -- 10
}
#typev dcc_cpp611 23 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::Now attempting to lock the dcc segment as secure master. ulLockVal 0x%10!X!" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DCC FUNC=programSegments$fin$0
{
ulLockVal, ItemLong -- 10
}
#typev dcc_cpp590 21 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::Attempting to Unlock the segment previously locked by Non secure master. ulLockVal 0x%10!X!" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DCC FUNC=programSegments$fin$0
{
ulLockVal, ItemLong -- 10
}
#typev dcc_cpp520 18 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::Segment not locked. Attempting to lock through Non secure space first." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=TRACE_DCC FUNC=programSegments$fin$0
{
}
#typev dcc_cpp458 17 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::Failed to Mmap Config address" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_DCC FUNC=read_dcc_hw_info
{
}
#typev dcc_cpp449 16 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::Failed to Mmap Sram address" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_DCC FUNC=read_dcc_hw_info
{
}
#typev dcc_cpp439 15 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::Loop Value Start bit Position %10!x! and Loop Offset Encoding bits used %11!x!" //   LEVEL=TRACE_LEVEL_CRITICAL FLAGS=TRACE_DCC FUNC=read_dcc_hw_info
{
mDccContext->mPlatformConfig.mLoopCommandEncoding.mulLoopValueStartBitPos, ItemLong -- 10
mDccContext->mPlatformConfig.mLoopCommandEncoding.mLoopOffsetEncodingBitsUsed, ItemLong -- 11
}
#typev dcc_cpp436 14 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::DCC Loop offset fix is configured" //   LEVEL=TRACE_LEVEL_CRITICAL FLAGS=TRACE_DCC FUNC=read_dcc_hw_info
{
}
#typev dcc_cpp426 13 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::DCC LL num info %10!x!" //   LEVEL=TRACE_LEVEL_CRITICAL FLAGS=TRACE_DCC FUNC=read_dcc_hw_info
{
mDccContext->mPlatformConfig.mMaxSegmentsAllowed, ItemLong -- 10
}
#typev dcc_cpp423 12 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::DCC Sram Size info %10!x!" //   LEVEL=TRACE_LEVEL_CRITICAL FLAGS=TRACE_DCC FUNC=read_dcc_hw_info
{
mDccContext->mPlatformConfig.mTotalSRamSize, ItemLong -- 10
}
#typev dcc_cpp420 11 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::DCC Hw info %10!x!" //   LEVEL=TRACE_LEVEL_CRITICAL FLAGS=TRACE_DCC FUNC=read_dcc_hw_info
{
mDccContext->mPlatformConfig.HwInfoDesc.u32Raw, ItemLong -- 10
}
#typev dcc_cpp417 10 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::DCC Hw version %10!x!" //   LEVEL=TRACE_LEVEL_CRITICAL FLAGS=TRACE_DCC FUNC=read_dcc_hw_info
{
mDccContext->mPlatformConfig.HwVersion, ItemLong -- 10
}
#typev dcc_cpp458 17 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::Failed to Mmap Config address" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_DCC FUNC=read_dcc_hw_info$fin$0
{
}
#typev dcc_cpp449 16 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::Failed to Mmap Sram address" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=TRACE_DCC FUNC=read_dcc_hw_info$fin$0
{
}
#typev dcc_cpp439 15 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::Loop Value Start bit Position %10!x! and Loop Offset Encoding bits used %11!x!" //   LEVEL=TRACE_LEVEL_CRITICAL FLAGS=TRACE_DCC FUNC=read_dcc_hw_info$fin$0
{
mDccContext->mPlatformConfig.mLoopCommandEncoding.mulLoopValueStartBitPos, ItemLong -- 10
mDccContext->mPlatformConfig.mLoopCommandEncoding.mLoopOffsetEncodingBitsUsed, ItemLong -- 11
}
#typev dcc_cpp436 14 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::DCC Loop offset fix is configured" //   LEVEL=TRACE_LEVEL_CRITICAL FLAGS=TRACE_DCC FUNC=read_dcc_hw_info$fin$0
{
}
#typev dcc_cpp426 13 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::DCC LL num info %10!x!" //   LEVEL=TRACE_LEVEL_CRITICAL FLAGS=TRACE_DCC FUNC=read_dcc_hw_info$fin$0
{
mDccContext->mPlatformConfig.mMaxSegmentsAllowed, ItemLong -- 10
}
#typev dcc_cpp423 12 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::DCC Sram Size info %10!x!" //   LEVEL=TRACE_LEVEL_CRITICAL FLAGS=TRACE_DCC FUNC=read_dcc_hw_info$fin$0
{
mDccContext->mPlatformConfig.mTotalSRamSize, ItemLong -- 10
}
#typev dcc_cpp420 11 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::DCC Hw info %10!x!" //   LEVEL=TRACE_LEVEL_CRITICAL FLAGS=TRACE_DCC FUNC=read_dcc_hw_info$fin$0
{
mDccContext->mPlatformConfig.HwInfoDesc.u32Raw, ItemLong -- 10
}
#typev dcc_cpp417 10 "%0 [%!LEVEL!] dcc.cpp::%!FUNC!()::DCC Hw version %10!x!" //   LEVEL=TRACE_LEVEL_CRITICAL FLAGS=TRACE_DCC FUNC=read_dcc_hw_info$fin$0
{
mDccContext->mPlatformConfig.HwVersion, ItemLong -- 10
}
