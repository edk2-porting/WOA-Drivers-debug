// PDB:  qcdx11chpeum850.pdb
// PDB:  Last Updated :2020-09-09:19:38:55:000 (UTC) [tracepdb]
ebfc5144-a3cf-30c8-08f1-832512e5d3b1 utils // SRC=dxgpuscope.cpp MJ= MN=
#typev dxgpuscope_cpp1030 19 "%0GPU SCOPE: Error: Could not print counter info to string" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=scope FUNC=DxGpuScope::AddCounterToString
{
}
#typev dxgpuscope_cpp81 10 "%0Destroy" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=scope FUNC=DxGpuScope::Create
{
}
#typev dxgpuscope_cpp104 10 "%0Destroy" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=scope FUNC=DxGpuScope::Destroy
{
}
#typev dxgpuscope_cpp277 11 "%0GPU SCOPE: Disabled" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=scope FUNC=DxGpuScope::Disable
{
}
#typev dxgpuscope_cpp421 14 "%0GPU SCOPE: All Counter Allocations Failed. GPU SCOPE Disabled." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=scope FUNC=DxGpuScope::Init
{
}
#typev dxgpuscope_cpp349 13 "%0GPU SCOPE: Error: Invalid/Unsupported Mode: %10!d!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=scope FUNC=DxGpuScope::Init
{
m_scopeState.scopeMode, ItemLong -- 10
}
#typev dxgpuscope_cpp323 12 "%0GPU SCOPE: Error: Could not open file: %10!s!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=scope FUNC=DxGpuScope::Init
{
gpuScopeFilename, ItemString -- 10
}
#typev dxgpuscope_cpp1993 23 "%0GPU SCOPE: Error: Invalid Packet Type: %10!x!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=scope FUNC=DxGpuScope::ParseSpace
{
*(pHostRead - 1), ItemLong -- 10
}
#typev dxgpuscope_cpp1985 22 "%0GPU SCOPE - Skip processing scope alloc." //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=scope FUNC=DxGpuScope::ParseSpace
{
}
#typev dxgpuscope_cpp958 19 "%0GPU SCOPE: Error: Could not print counter info to string" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=scope FUNC=DxGpuScope::ReserveCounterList
{
}
#typev dxgpuscope_cpp959 18 "%0GPU SCOPE: Counter not selected: %10!s!:%11!d!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=scope FUNC=DxGpuScope::ReserveCounterList
{
pPerfCounter->groupName, ItemString -- 10
pPerfCounter->counterType.counterId, ItemLong -- 11
}
#typev dxgpuscope_cpp952 17 "%0GPU SCOPE: Counter selected: %10!s!:%11!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=scope FUNC=DxGpuScope::ReserveCounterList
{
pPerfCounter->groupName, ItemString -- 10
pPerfCounter->counterType.counterId, ItemLong -- 11
}
#typev dxgpuscope_cpp950 19 "%0GPU SCOPE: Error: Could not print counter info to string" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=scope FUNC=DxGpuScope::ReserveCounterList
{
}
#typev dxgpuscope_cpp938 16 "%0GPU SCOPE: Error: Could not print counter info to string" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=scope FUNC=DxGpuScope::ReserveCounterList
{
}
#typev dxgpuscope_cpp929 15 "%0GPU SCOPE: Error: Could not print counter info to string" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=scope FUNC=DxGpuScope::ReserveCounterList
{
}
#typev dxgpuscope_cpp1223 21 "%0Scope: Incorrect stage mode footer usage" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=scope FUNC=DxGpuScope::SampleStageInternal
{
}
#typev dxgpuscope_cpp1209 20 "%0Scope: Incorrect stage mode header usage" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=scope FUNC=DxGpuScope::SampleStageInternal
{
}
// PDB:  qcdx11x86um850.pdb
// PDB:  Last Updated :2020-09-09:19:38:55:000 (UTC) [tracepdb]
#typev dxgpuscope_cpp1030 19 "%0GPU SCOPE: Error: Could not print counter info to string" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=scope FUNC=DxGpuScope::AddCounterToString
{
}
#typev dxgpuscope_cpp81 10 "%0Destroy" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=scope FUNC=DxGpuScope::Create
{
}
#typev dxgpuscope_cpp104 10 "%0Destroy" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=scope FUNC=DxGpuScope::Destroy
{
}
#typev dxgpuscope_cpp277 11 "%0GPU SCOPE: Disabled" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=scope FUNC=DxGpuScope::Disable
{
}
#typev dxgpuscope_cpp421 14 "%0GPU SCOPE: All Counter Allocations Failed. GPU SCOPE Disabled." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=scope FUNC=DxGpuScope::Init
{
}
#typev dxgpuscope_cpp349 13 "%0GPU SCOPE: Error: Invalid/Unsupported Mode: %10!d!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=scope FUNC=DxGpuScope::Init
{
m_scopeState.scopeMode, ItemLong -- 10
}
#typev dxgpuscope_cpp323 12 "%0GPU SCOPE: Error: Could not open file: %10!s!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=scope FUNC=DxGpuScope::Init
{
gpuScopeFilename, ItemString -- 10
}
#typev dxgpuscope_cpp1993 23 "%0GPU SCOPE: Error: Invalid Packet Type: %10!x!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=scope FUNC=DxGpuScope::ParseSpace
{
*(pHostRead - 1), ItemLong -- 10
}
#typev dxgpuscope_cpp1985 22 "%0GPU SCOPE - Skip processing scope alloc." //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=scope FUNC=DxGpuScope::ParseSpace
{
}
#typev dxgpuscope_cpp959 18 "%0GPU SCOPE: Counter not selected: %10!s!:%11!d!" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=scope FUNC=DxGpuScope::ReserveCounterList
{
pPerfCounter->groupName, ItemString -- 10
pPerfCounter->counterType.counterId, ItemLong -- 11
}
#typev dxgpuscope_cpp958 19 "%0GPU SCOPE: Error: Could not print counter info to string" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=scope FUNC=DxGpuScope::ReserveCounterList
{
}
#typev dxgpuscope_cpp952 17 "%0GPU SCOPE: Counter selected: %10!s!:%11!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=scope FUNC=DxGpuScope::ReserveCounterList
{
pPerfCounter->groupName, ItemString -- 10
pPerfCounter->counterType.counterId, ItemLong -- 11
}
#typev dxgpuscope_cpp950 19 "%0GPU SCOPE: Error: Could not print counter info to string" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=scope FUNC=DxGpuScope::ReserveCounterList
{
}
#typev dxgpuscope_cpp938 16 "%0GPU SCOPE: Error: Could not print counter info to string" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=scope FUNC=DxGpuScope::ReserveCounterList
{
}
#typev dxgpuscope_cpp929 15 "%0GPU SCOPE: Error: Could not print counter info to string" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=scope FUNC=DxGpuScope::ReserveCounterList
{
}
#typev dxgpuscope_cpp1223 21 "%0Scope: Incorrect stage mode footer usage" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=scope FUNC=DxGpuScope::SampleStageInternal
{
}
#typev dxgpuscope_cpp1209 20 "%0Scope: Incorrect stage mode header usage" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=scope FUNC=DxGpuScope::SampleStageInternal
{
}
