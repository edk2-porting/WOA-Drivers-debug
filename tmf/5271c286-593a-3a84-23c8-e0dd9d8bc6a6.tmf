// PDB:  qcsmmu7180.pdb
// PDB:  Last Updated :2021-10-17:21:53:36:738 (UTC) [tracepdb]
5271c286-593a-3a84-23c8-e0dd9d8bc6a6 SMMU // SRC=Vcm.cpp MJ= MN=
#typev Vcm_cpp4603 289 "%0 Vcm.cpp::%!FUNC!::4603 : pNode->GetAVCM() is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=CheckErrataApplicableClients
{
}
#typev Vcm_cpp4586 288 "%0 Vcm.cpp::%!FUNC!::4586 : pAssocitatedAVCMsCollection is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=CheckErrataApplicableClients
{
}
#typev Vcm_cpp1138 45 "%0 Vcm.cpp::%!FUNC! :Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1130 44 "%0 Vcm.cpp::%!FUNC!::1130 : Hyp call SmmuHypAssignPageTableNodes to assign page table to/from CP VM Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1098 43 "%0 Vcm.cpp::%!FUNC!::1098 : Invalid AVCM CP ID." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1082 42 "%0 Vcm.cpp::%!FUNC!::1082 : pNode->GetAVCM() is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1069 41 "%0 Vcm.cpp::%!FUNC!::1069 :Access Control VM mismatch" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1062 40 "%0 Vcm.cpp::%!FUNC!::1062 : pNode->GetAVCM() is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1046 39 "%0 Vcm.cpp::%!FUNC!::1046 : pAssocitatedAVCMsCollection is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1039 38 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp381 12 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmAddAVCMToCollection
{
}
#typev Vcm_cpp370 11 "%0 Vcm.cpp::%!FUNC!::370 : pNode memory allocation failed." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmAddAVCMToCollection
{
}
#typev Vcm_cpp361 10 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmAddAVCMToCollection
{
}
#typev Vcm_cpp499 21 "%0 Vcm.cpp::%!FUNC!::499 : SmmuFlushContextTLB failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmFlushTLBsAssociatedWith
{
}
#typev Vcm_cpp487 20 "%0 Vcm.cpp::%!FUNC!::487 : pNode->GetAVCM() is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmFlushTLBsAssociatedWith
{
}
#typev Vcm_cpp468 19 "%0 Vcm.cpp::%!FUNC!::468 : pAssocitatedAVCMsCollection is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmFlushTLBsAssociatedWith
{
}
#typev Vcm_cpp455 18 "%0 Vcm.cpp::%!FUNC!::455 : Invalid parameter - VcmId is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmFlushTLBsAssociatedWith
{
}
#typev Vcm_cpp449 17 "%0 Vcm.cpp::%!FUNC!::449 : Invalid parameter - VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmFlushTLBsAssociatedWith
{
}
#typev Vcm_cpp2701 144 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalActivate
{
}
#typev Vcm_cpp2690 143 "%0 Vcm.cpp::%!FUNC!::2690 : SmmuPageTableBind failed, AvcmID:[%10!p!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalActivate
{
AvcmId, ItemPtr -- 10
}
#typev Vcm_cpp2677 142 "%0 Vcm.cpp::%!FUNC!::2677 : AvcmId is already active, AvcmID:[%10!p!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalActivate
{
AvcmId, ItemPtr -- 10
}
#typev Vcm_cpp2665 141 "%0 Vcm.cpp::%!FUNC!::2665 : AvcmIDBarker is Invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalActivate
{
}
#typev Vcm_cpp2656 140 "%0 Vcm.cpp::%!FUNC!::2656 : AvcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalActivate
{
}
#typev Vcm_cpp2647 139 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalActivate
{
}
#typev Vcm_cpp2472 129 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2461 128 "%0 Vcm.cpp::%!FUNC!::2461 : VcmAddAVCMToCollection failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2437 127 "%0 Vcm.cpp::%!FUNC!::2437 : WdfMemoryCreate failed -- could not allocate memory for avcm" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2414 126 "%0 Vcm.cpp::%!FUNC!::2414 : SmmuPageTableAlloc failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2385 125 "%0 Vcm.cpp::%!FUNC!::2385 : Context bank of different CP VMs can have same VCM" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2367 124 "%0 Vcm.cpp::%!FUNC!::2367 : pAssocitatedAVCMsCollection is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2358 123 "%0 Vcm.cpp::%!FUNC!::2358 :Access Control VM mismatch" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2353 122 "%0 Vcm.cpp::%!FUNC!::2353 :CtxId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2347 121 "%0 Vcm.cpp::%!FUNC!::2347 : Vcm Barker corrupted" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2340 120 "%0 Vcm.cpp::%!FUNC!::2340 : VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2336 119 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp1988 95 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1981 94 "%0 Vcm.cpp::%!FUNC!::1981 : Backfill ghost mdl pages failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1954 93 "%0 Vcm.cpp::%!FUNC!::1954 : SmmuPageTableMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1938 92 "%0 Vcm.cpp::%!FUNC!::1938 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1916 91 "%0 Vcm.cpp::%!FUNC!::1916 : could not get pagelist" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1901 90 "%0 Vcm.cpp::%!FUNC!::1901 : Reservation is already backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1893 89 "%0 Vcm.cpp::%!FUNC!::1893 : Reservation is already backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1886 88 "%0 Vcm.cpp::%!FUNC!::1886 : Mdl Object is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1879 87 "%0 Vcm.cpp::%!FUNC!::1879 :ResId cannot be used with this API" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1870 86 "%0 Vcm.cpp::%!FUNC!::1870 : ResId barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1863 85 "%0 Vcm.cpp::%!FUNC!::1863 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1858 84 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBack
{
}
#typev Vcm_cpp2156 108 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2150 107 "%0 Vcm.cpp::%!FUNC!::2150 : Backfill ghost mdl pages failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2123 106 "%0 Vcm.cpp::%!FUNC!::2123 : SmmuPageTableMapContiguous failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2103 105 "%0 Vcm.cpp::%!FUNC!::2103 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2084 104 "%0 Vcm.cpp::%!FUNC!::2084 : PhysAddr address not aligned to 4k" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2077 103 "%0 Vcm.cpp::%!FUNC!::2077 : Size of PhysAddr address not aligned to 4k" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2070 102 "%0 Vcm.cpp::%!FUNC!::2070 : Size of PhysAddr address is zero" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2063 101 "%0 Vcm.cpp::%!FUNC!::2063 : Reservation is already backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2055 100 "%0 Vcm.cpp::%!FUNC!::2055 : Reservation is already backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2048 99 "%0 Vcm.cpp::%!FUNC!::2048 :ResId cannot be used with this API" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2039 98 "%0 Vcm.cpp::%!FUNC!::2039 : ResId barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2032 97 "%0 Vcm.cpp::%!FUNC!::2032 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2027 96 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp3820 226 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3809 225 "%0 Vcm.cpp::%!FUNC!::3809 : SmmuPageTableUnMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3774 224 "%0 Vcm.cpp::%!FUNC!::3774 : Pagelist is invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3758 223 "%0 Vcm.cpp::%!FUNC!::3758 : BackFill MDL not setup properly" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3743 222 "%0 Vcm.cpp::%!FUNC!::3743 : Cannot backfill if reservation is not already backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3736 221 "%0 Vcm.cpp::%!FUNC!::3736 : Already backfilled" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3726 220 "%0 Vcm.cpp::%!FUNC!::3726 : ResId is INVALID" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3717 219 "%0 Vcm.cpp::%!FUNC!::3717 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3712 218 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp4054 243 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp4045 242 "%0 Vcm.cpp::%!FUNC!::4045 : SmmuPageTableMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp4030 241 "%0 Vcm.cpp::%!FUNC!::4030 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp4000 240 "%0 Vcm.cpp::%!FUNC!::4000 : Size mismatch -- physical memory not equal to the virtual space to be backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3993 239 "%0 Vcm.cpp::%!FUNC!::3993 : Bound not created with to allow VcmBackInBound" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3986 238 "%0 Vcm.cpp::%!FUNC!::3986 : BoundId is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3981 237 "%0 Vcm.cpp::%!FUNC!::3981 : BoundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3976 236 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3896 233 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3886 232 "%0 Vcm.cpp::%!FUNC!::3886 : VcmFlushTLBsAssociatedWith failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3874 231 "%0 Vcm.cpp::%!FUNC!::3874 : SmmuPageTableUnMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3858 230 "%0 Vcm.cpp::%!FUNC!::3858 : Reservation is NOT backfilled" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3850 229 "%0 Vcm.cpp::%!FUNC!::3850 : ResId is Corrupted" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3843 228 "%0 Vcm.cpp::%!FUNC!::3843 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3837 227 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3917 235 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalClearFault
{
}
#typev Vcm_cpp3915 234 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalClearFault
{
}
#typev Vcm_cpp895 30 "%0 Vcm.cpp::%!FUNC! :Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp833 29 "%0 Vcm.cpp::%!FUNC!::833 : Failed to initialize Virtmem" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp823 28 "%0 Vcm.cpp::%!FUNC!::823 :pAssocitatedAVCMsCollection is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp788 27 "%0 Vcm.cpp::%!FUNC!::788 : Failed to create wait lock" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp778 26 "%0 Vcm.cpp::%!FUNC!::778 : Failed to allocate memory for VCM" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp758 25 "%0 Vcm.cpp::%!FUNC!::758 : Invalid parameter - Requested address space exceeds 32b boundary" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp751 24 "%0 Vcm.cpp::%!FUNC!::751 : Invalid paramter - multiple ACVM attr" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp745 23 "%0 Vcm.cpp::%!FUNC!::745 : Invalid paramter - Len cannot be 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp740 22 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp3201 178 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3183 177 "%0 Vcm.cpp::%!FUNC!::3183 : SmmuPageTableReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3150 176 "%0 Vcm.cpp::%!FUNC!::3150 : VcmManagementVirtmemInit failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3128 175 "%0 Vcm.cpp::%!FUNC!::3128 : VcmManagementVirtmemAlloc failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3107 174 "%0 Vcm.cpp::%!FUNC!::3107 : Memory allocation failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3087 173 "%0 Vcm.cpp::%!FUNC!::3087 : Special bound needs preallocated L2" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3079 172 "%0 Vcm.cpp::%!FUNC!::3079 : Vcm is not associated" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3070 171 "%0 Vcm.cpp::%!FUNC!::3070 : Len is 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3063 170 "%0 Vcm.cpp::%!FUNC!::3063 : VcmId is Invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3057 169 "%0 Vcm.cpp::%!FUNC!::3057 : VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3051 168 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp2798 150 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalDeactivate
{
}
#typev Vcm_cpp2788 149 "%0 Vcm.cpp::%!FUNC!::2788 : SmmuPageTableUnBind failed, AvcmID:[%10!p!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeactivate
{
AvcmId, ItemPtr -- 10
}
#typev Vcm_cpp2775 148 "%0 Vcm.cpp::%!FUNC!::2775 : Association already not active, AvcmID:[%10!p!]" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeactivate
{
AvcmId, ItemPtr -- 10
}
#typev Vcm_cpp2761 147 "%0 Vcm.cpp::%!FUNC!::2761 : AvcmId->AvcmBarker != AVCM_BARKER" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeactivate
{
}
#typev Vcm_cpp2751 146 "%0 Vcm.cpp::%!FUNC!::2751 : AvcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeactivate
{
}
#typev Vcm_cpp2742 145 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalDeactivate
{
}
#typev Vcm_cpp2561 135 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp2535 134 "%0 Vcm.cpp::%!FUNC!::2535 : VcmRemoveAVCMFromCollection failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp2526 133 "%0 Vcm.cpp::%!FUNC!::2526 : AvcmId is in use right now" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp2516 132 "%0 Vcm.cpp::%!FUNC!::2516 : AvcmBarker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp2510 131 "%0 Vcm.cpp::%!FUNC!::2510 : AvcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp2506 130 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp1002 37 "%0 Vcm.cpp::%!FUNC! :Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalFree
{
}
#typev Vcm_cpp974 36 "%0 Vcm.cpp::%!FUNC!::974 : SmmuPageTableFree Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFree
{
}
#typev Vcm_cpp963 35 "%0 Vcm.cpp::%!FUNC!::963 : Vcm is currently busy 1" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFree
{
}
#typev Vcm_cpp953 34 "%0 Vcm.cpp::%!FUNC!::953 : Vcm is currently busy 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFree
{
}
#typev Vcm_cpp943 33 "%0 Vcm.cpp::%!FUNC!::943 : Invalid parameter - VcmId is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFree
{
}
#typev Vcm_cpp937 32 "%0 Vcm.cpp::%!FUNC!::937 : Invalid parameter - VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFree
{
}
#typev Vcm_cpp931 31 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalFree
{
}
#typev Vcm_cpp3627 209 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3609 208 "%0 Vcm.cpp::%!FUNC!::3609 : SmmuPageTableUnReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3592 207 "%0 Vcm.cpp::%!FUNC!::3592 : VcmManagementVirtmemFree failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3578 206 "%0 Vcm.cpp::%!FUNC!::3578 : VcmManagementVirtmemDeinit failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3567 205 "%0 Vcm.cpp::%!FUNC!::3567 : Active reservations within the bound" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3561 204 "%0 Vcm.cpp::%!FUNC!::3561 : Bound barker is invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3554 203 "%0 Vcm.cpp::%!FUNC!::3554 : BoundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3550 202 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3690 217 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetBoundSize
{
}
#typev Vcm_cpp3684 216 "%0 Vcm.cpp::%!FUNC!::3684 : BoundId is INVALID" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetBoundSize
{
}
#typev Vcm_cpp3677 215 "%0 Vcm.cpp::%!FUNC!::3677 : BoundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetBoundSize
{
}
#typev Vcm_cpp3674 214 "%0 Vcm.cpp::%!FUNC! : Enter" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetBoundSize
{
}
#typev Vcm_cpp3660 213 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetBoundStartAddr
{
}
#typev Vcm_cpp3653 212 "%0 Vcm.cpp::%!FUNC!::3653 : BoundId is INVALID" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetBoundStartAddr
{
}
#typev Vcm_cpp3646 211 "%0 Vcm.cpp::%!FUNC!::3646 : BoundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetBoundStartAddr
{
}
#typev Vcm_cpp3642 210 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetBoundStartAddr
{
}
#typev Vcm_cpp2850 154 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetDevAddr
{
}
#typev Vcm_cpp2842 153 "%0 Vcm.cpp::%!FUNC!::2842 : Reservation Id invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetDevAddr
{
}
#typev Vcm_cpp2835 152 "%0 Vcm.cpp::%!FUNC!::2835 : Reservation Id is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetDevAddr
{
}
#typev Vcm_cpp2830 151 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetDevAddr
{
}
#typev Vcm_cpp4189 254 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetFaultInfo
{
}
#typev Vcm_cpp4184 253 "%0 Vcm.cpp::%!FUNC!::4184 : Output parameter is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetFaultInfo
{
}
#typev Vcm_cpp4179 252 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetFaultInfo
{
}
#typev Vcm_cpp4482 281 "%0 Vcm.cpp::%!FUNC!::4482 :PageTableHandle is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetPTBaseAddr
{
}
#typev Vcm_cpp4477 280 "%0 Vcm.cpp::%!FUNC!::4477 :A valid page table does not exist" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetPTBaseAddr
{
}
#typev Vcm_cpp4472 279 "%0 Vcm.cpp::%!FUNC!::4472 : VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetPTBaseAddr
{
}
#typev Vcm_cpp4467 278 "%0 Vcm.cpp::%!FUNC!::4467 : AvcmIDBarker is Invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetPTBaseAddr
{
}
#typev Vcm_cpp4462 277 "%0 Vcm.cpp::%!FUNC!::4462 : AvcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetPTBaseAddr
{
}
#typev Vcm_cpp2917 159 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetReservation
{
}
#typev Vcm_cpp2905 158 "%0 Vcm.cpp::%!FUNC!::2905 : Deivcee address is invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetReservation
{
}
#typev Vcm_cpp2897 157 "%0 Vcm.cpp::%!FUNC!::2897 : VcmId is invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetReservation
{
}
#typev Vcm_cpp2890 156 "%0 Vcm.cpp::%!FUNC!::2890 : VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetReservation
{
}
#typev Vcm_cpp2885 155 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetReservation
{
}
#typev Vcm_cpp1811 83 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetReservationAttr
{
}
#typev Vcm_cpp1803 82 "%0 Vcm.cpp::%!FUNC!::1803 : ResId barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetReservationAttr
{
}
#typev Vcm_cpp1796 81 "%0 Vcm.cpp::%!FUNC!::1796 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetReservationAttr
{
}
#typev Vcm_cpp1791 80 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetReservationAttr
{
}
#typev Vcm_cpp4436 276 "%0 Vcm.cpp::%!FUNC!::4436 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4421 275 "%0 Vcm.cpp::%!FUNC!::4421 :Failed API SmmuPartialMapUnmap" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4403 274 "%0 Vcm.cpp::%!FUNC!::4403 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4386 273 "%0 Vcm.cpp::%!FUNC!::4386 : pPageList Object is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4375 272 "%0 Vcm.cpp::%!FUNC!::4375 :ResId cannot be used with this API" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4362 271 "%0 Vcm.cpp::%!FUNC!::4362 : ResId barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4351 270 "%0 Vcm.cpp::%!FUNC!::4351 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4538 285 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalRegisterIsr
{
}
#typev Vcm_cpp4526 284 "%0 Vcm.cpp::%!FUNC!::4526 : Callback function pointer is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalRegisterIsr
{
}
#typev Vcm_cpp4519 283 "%0 Vcm.cpp::%!FUNC!::4519 : Invalid Client Id" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalRegisterIsr
{
}
#typev Vcm_cpp4515 282 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalRegisterIsr
{
}
#typev Vcm_cpp1335 55 "%0 Vcm.cpp::%!FUNC! :Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1317 54 "%0 Vcm.cpp::%!FUNC!::1317 : SmmuPageTableReserve Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1282 53 "%0 Vcm.cpp::%!FUNC!::1282 : VcmManagementVirtmemAlloc returned invalid virtAddr" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1252 52 "%0 Vcm.cpp::%!FUNC!::1252 : Malloc failure - Could not alloce RES" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1232 51 "%0 Vcm.cpp::%!FUNC!::1232 : Vcm has no associated pagetable" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1223 50 "%0 Vcm.cpp::%!FUNC!::1223 : Invalid parameter - Alignment request not supported" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1218 49 "%0 Vcm.cpp::%!FUNC!::1218 : Invalid parameter - Requested size is 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1211 48 "%0 Vcm.cpp::%!FUNC!::1211 : Invalid parameter - Vcm barker is corrupted" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1206 47 "%0 Vcm.cpp::%!FUNC!::1206 : Invalid parameter - VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1201 46 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1534 66 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1519 65 "%0 Vcm.cpp::%!FUNC!::1519 : SmmuPageTableReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1486 64 "%0 Vcm.cpp::%!FUNC!::1486 : VcmManagementVirtmemAllocAt failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1460 63 "%0 Vcm.cpp::%!FUNC!::1460 : Could not allocate memory for RES" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1441 62 "%0 Vcm.cpp::%!FUNC!::1441 : Request not confined to 32bit boundary" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1430 61 "%0 Vcm.cpp::%!FUNC!::1430 : Target address not aligned to 1k" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1424 60 "%0 Vcm.cpp::%!FUNC!::1424 : No pagetable association for the provided Vcm" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1416 59 "%0 Vcm.cpp::%!FUNC!::1416 : Invalid parameter - Len is 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1409 58 "%0 Vcm.cpp::%!FUNC!::1409 : Invalid parameter - VcmId barker invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1403 57 "%0 Vcm.cpp::%!FUNC!::1403 : Invalid parameter - VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1399 56 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp3534 201 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3518 200 "%0 Vcm.cpp::%!FUNC!::3518 : SmmuPageTableReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3480 199 "%0 Vcm.cpp::%!FUNC!::3480 : VcmManagementVirtmemAllocAt failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3455 198 "%0 Vcm.cpp::%!FUNC!::3455 : Memory allocation failed -- could not allocate memory for RES" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3435 197 "%0 Vcm.cpp::%!FUNC!::3435 : Reservation request exceeds 32bit boundary" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3424 196 "%0 Vcm.cpp::%!FUNC!::3424 : Target request not aligned to 1k" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3418 195 "%0 Vcm.cpp::%!FUNC!::3418 : Vcm not associated" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3410 194 "%0 Vcm.cpp::%!FUNC!::3410 : Requested Len is 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3403 193 "%0 Vcm.cpp::%!FUNC!::3403 : Reservation not allowed within this bound" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3396 192 "%0 Vcm.cpp::%!FUNC!::3396 : Bound Id is invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3388 191 "%0 Vcm.cpp::%!FUNC!::3388 : Bound Id is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3384 190 "%0 Vcm.cpp::%!FUNC! :Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3364 189 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3346 188 "%0 Vcm.cpp::%!FUNC!::3346 : SmmuPageTableReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3309 187 "%0 Vcm.cpp::%!FUNC!::3309 : VcmManagementVirtmemAlloc failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3280 186 "%0 Vcm.cpp::%!FUNC!::3280 : Memory allocation failure, could not allocate memory for RES" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3260 185 "%0 Vcm.cpp::%!FUNC!::3260 : Vcm not associated" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3253 184 "%0 Vcm.cpp::%!FUNC!::3253 : Requested alignment not supported" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3247 183 "%0 Vcm.cpp::%!FUNC!::3247 : Requested reservation size is 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3240 182 "%0 Vcm.cpp::%!FUNC!::3240 : Cannot reserve into bound allocated using BOUND_BACK_INTO attrib" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3233 181 "%0 Vcm.cpp::%!FUNC!::3233 : BoundId is Invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3225 180 "%0 Vcm.cpp::%!FUNC!::3225 : Bound Id is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3221 179 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp1760 79 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSetReservationAttr
{
}
#typev Vcm_cpp1748 78 "%0 Vcm.cpp::%!FUNC!::1748 : SmmuPageTableSetAttributes failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalSetReservationAttr
{
}
#typev Vcm_cpp1728 77 "%0 Vcm.cpp::%!FUNC!::1728 : Reservation ID barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalSetReservationAttr
{
}
#typev Vcm_cpp1721 76 "%0 Vcm.cpp::%!FUNC!::1721 : Reservation ID is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalSetReservationAttr
{
}
#typev Vcm_cpp1716 75 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSetReservationAttr
{
}
#typev Vcm_cpp4213 256 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSmmuGetContextBankConfig
{
}
#typev Vcm_cpp4201 255 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSmmuGetContextBankConfig
{
}
#typev Vcm_cpp4242 260 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSmmuSetPowerState
{
}
#typev Vcm_cpp4240 259 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSmmuSetPowerState
{
}
#typev Vcm_cpp4227 258 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSmmuSetState
{
}
#typev Vcm_cpp4225 257 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSmmuSetState
{
}
#typev Vcm_cpp2292 118 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2278 117 "%0 Vcm.cpp::%!FUNC!::2278 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2253 116 "%0 Vcm.cpp::%!FUNC!::2253 : VcmFlushTLBsAssociatedWith failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2242 115 "%0 Vcm.cpp::%!FUNC!::2242 : SmmuPageTableUnMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2225 114 "%0 Vcm.cpp::%!FUNC!::2225 : BackUnfill failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2216 113 "%0 Vcm.cpp::%!FUNC!::2216 : Reservation is not backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2209 112 "%0 Vcm.cpp::%!FUNC!::2209 :ResId cannot be used with this API" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2200 111 "%0 Vcm.cpp::%!FUNC!::2200 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2193 110 "%0 Vcm.cpp::%!FUNC!::2193 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2188 109 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp4156 251 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4144 250 "%0 Vcm.cpp::%!FUNC!::4144 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4127 249 "%0 Vcm.cpp::%!FUNC!::4127 : VcmFlushTLBsAssociatedWith failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4116 248 "%0 Vcm.cpp::%!FUNC!::4116 : SmmuPageTableUnMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4100 247 "%0 Vcm.cpp::%!FUNC!::4100 : Bound not created with correct attributes to allow VcmUnbackInBound" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4093 246 "%0 Vcm.cpp::%!FUNC!::4093 : Bound barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4088 245 "%0 Vcm.cpp::%!FUNC!::4088 : BoundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4083 244 "%0 Vcm.cpp::%!FUNC! :Enter" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4567 287 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnregisterIsr
{
}
#typev Vcm_cpp4560 286 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnregisterIsr
{
}
#typev Vcm_cpp1659 74 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1642 73 "%0 Vcm.cpp::%!FUNC!::1642 : SmmuPageTableUnReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1625 72 "%0 Vcm.cpp::%!FUNC!::1625 : SmmuPageTableUnReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1609 71 "%0 Vcm.cpp::%!FUNC!::1609 : VcmManagementVirtmemFree failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1588 70 "%0 Vcm.cpp::%!FUNC!::1588 : ResId is in use" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1581 69 "%0 Vcm.cpp::%!FUNC!::1581 : Invalid parameter - ResId barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1574 68 "%0 Vcm.cpp::%!FUNC!::1574 : Invalid parameter - Reservation ID is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1569 67 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp4322 269 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4316 268 "%0 Vcm.cpp::%!FUNC!::4316 : SmmuPageTableGetMap Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4303 267 "%0 Vcm.cpp::%!FUNC!::4303 : pageMapInfo.pPageList == NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4288 266 "%0 Vcm.cpp::%!FUNC!::4288 : MdlObject is not big enough to fullfill this request" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4277 265 "%0 Vcm.cpp::%!FUNC!::4277 : Bad MdlObject" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4272 264 "%0 Vcm.cpp::%!FUNC!::4272 : Size parameter cannot be 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4267 263 "%0 Vcm.cpp::%!FUNC!::4267 : Corrupt VCM ID" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4262 262 "%0 Vcm.cpp::%!FUNC!::4262 : Bad VCM ID" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4258 261 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp434 16 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmRemoveAVCMFromCollection
{
}
#typev Vcm_cpp419 15 "%0 Vcm.cpp::%!FUNC!::419 : pAssociatedAvcm is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmRemoveAVCMFromCollection
{
}
#typev Vcm_cpp402 14 "%0 Vcm.cpp::%!FUNC!::402 : VcmId->pCollectionVcmAssociatedAVCMs is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmRemoveAVCMFromCollection
{
}
#typev Vcm_cpp395 13 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmRemoveAVCMFromCollection
{
}
