// PDB:  qcpil.pdb
// PDB:  Last Updated :2021-10-17:21:53:58:868 (UTC) [tracepdb]
334dbf84-af8e-32c5-8a64-ae7e066158e2 PIL-Rel // SRC=standard_interface.c MJ= MN=
#typev standard_interface_c414 38 "%0Exit GetMemoryLayout." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_INTERFACES FUNC=GetMemoryLayout
{
}
#typev standard_interface_c411 37 "%0Returning a memory descriptor with %10!I64d! runs, and %11!I64d! total number of pages." //   LEVEL=TRACE_LEVEL_RELEASE FLAGS=DBG_INTERFACES FUNC=GetMemoryLayout
{
MemoryDescriptor->NumberOfRuns, ItemLongLong -- 10
MemoryDescriptor->TotalNumberOfPages, ItemLongLong -- 11
}
#typev standard_interface_c402 36 "%0Error: Not enough runs provided by the caller, expected %10!d!, received %11!I64x!." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INTERFACES FUNC=GetMemoryLayout
{
PIL_QUALCOMM_IMAGE_NUM_MEMORY_RUNS, ItemLong -- 10
MemoryDescriptor->NumberOfRuns, ItemLongLongX -- 11
}
#typev standard_interface_c384 34 "%0Error: Failure getting mapped virtual address for subsystem with GUID: %10!s!." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INTERFACES FUNC=GetMemoryLayout
{
(PGUID)&imageMemory.ImageGuid, ItemGuid -- 10
}
#typev standard_interface_c231 25 "%0Warning: Image details not found in relocatable image list." //   LEVEL=TRACE_LEVEL_WARNING FLAGS=DBG_INTERFACES FUNC=GetMemoryLayout
{
}
#typev standard_interface_c227 24 "%0Warning: Going with preallocated memory to find image details" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=DBG_INTERFACES FUNC=GetMemoryLayout
{
}
#typev standard_interface_c246 26 "%0Error: imageInfo from GetImageInfo is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INTERFACES FUNC=GetMemoryLayout
{
}
#typev standard_interface_c354 33 "%0Error: Not enough runs provided by the caller, expected %10!d!, received %11!I64x!." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INTERFACES FUNC=GetMemoryLayout
{
PIL_QUALCOMM_IMAGE_NUM_MEMORY_RUNS, ItemLong -- 10
MemoryDescriptor->NumberOfRuns, ItemLongLongX -- 11
}
#typev standard_interface_c336 31 "%0Error: Failed to get virtual address for a loaded image GUID: %10!s!." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INTERFACES FUNC=GetMemoryLayout
{
(PGUID)&imageInfo->ImageGuid, ItemGuid -- 10
}
#typev standard_interface_c303 29 "%0Error: Not enough runs provided by the caller, expected %10!d!, received %11!I64x!." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INTERFACES FUNC=GetMemoryLayout
{
PIL_QUALCOMM_IMAGE_NUM_MEMORY_RUNS, ItemLong -- 10
MemoryDescriptor->NumberOfRuns, ItemLongLongX -- 11
}
#typev standard_interface_c310 30 "%0Error: The calculation of segment sizes failed." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INTERFACES FUNC=GetMemoryLayout
{
}
// PDB:  qcpil.pdb
// PDB:  Last Updated :2021-10-17:21:53:58:868 (UTC) [tracepdb]
#typev standard_interface_c283 27 "%0Error: Failed to retrieve virtual address for a non-relocated image with GUID: %10!s!." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INTERFACES FUNC=GetMemoryLayout
{
(PGUID)&imageInfo->ImageGuid, ItemGuid -- 10
}
// PDB:  qcpil.pdb
// PDB:  Last Updated :2021-10-17:21:53:58:868 (UTC) [tracepdb]
#typev standard_interface_c213 23 "%0Searching image info in PIL owned images list." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_INTERFACES FUNC=GetMemoryLayout
{
}
#typev standard_interface_c201 22 "%0Entered GetMemoryLayout." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_INTERFACES FUNC=GetMemoryLayout
{
}
#typev standard_interface_c485 45 "%0Exit QueryISImageProtected." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_INTERFACES FUNC=QueryIsImageTZLocked
{
}
#typev standard_interface_c479 44 "%0Either Subsystem image not yet loaded by PIL (or) Subsystem not a loadable image by PIL" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_INTERFACES FUNC=QueryIsImageTZLocked
{
}
#typev standard_interface_c478 43 "%0Subsystem information not found in PIL loaded images list, SS image was not protected by TZ" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_INTERFACES FUNC=QueryIsImageTZLocked
{
}
#typev standard_interface_c465 42 "%0SS image was not yet protected by TZ, no need to unlock image for dump collection." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_INTERFACES FUNC=QueryIsImageTZLocked
{
}
#typev standard_interface_c454 41 "%0SS image was protected by TZ, needs to unlock image before collecting dump." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_INTERFACES FUNC=QueryIsImageTZLocked
{
}
#typev standard_interface_c444 40 "%0SS image found in PIL loaded images list, checking image protection info." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_INTERFACES FUNC=QueryIsImageTZLocked
{
}
#typev standard_interface_c432 39 "%0Entered QueryISImageProtected." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_INTERFACES FUNC=QueryIsImageTZLocked
{
}
#typev standard_interface_c184 21 "%0Exit QueryIsItSSImage." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_INTERFACES FUNC=QueryIsItSSImage
{
}
#typev standard_interface_c180 20 "%0GUID does not belongs to one of SS image loaded by PIL" //   LEVEL=TRACE_LEVEL_RELEASE FLAGS=DBG_INTERFACES FUNC=QueryIsItSSImage
{
}
#typev standard_interface_c175 19 "%0GUID belongs to one of SS image loaded by PIL" //   LEVEL=TRACE_LEVEL_RELEASE FLAGS=DBG_INTERFACES FUNC=QueryIsItSSImage
{
}
#typev standard_interface_c163 18 "%0GUID belongs to one of SS image loaded by PIL" //   LEVEL=TRACE_LEVEL_RELEASE FLAGS=DBG_INTERFACES FUNC=QueryIsItSSImage
{
}
#typev standard_interface_c152 17 "%0Entered QueryIsItSSImage." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_INTERFACES FUNC=QueryIsItSSImage
{
}
#typev standard_interface_c132 16 "%0Exit SetMemoryProtection." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_INTERFACES FUNC=SetMemoryProtection
{
}
#typev standard_interface_c66 12 "%0Warning: Unable to locate the image info for image with GUID: %10!s!." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INTERFACES FUNC=SetMemoryProtection
{
SubsystemId, ItemGuid -- 10
}
#typev standard_interface_c117 15 "%0Warning: Memory protection has not been enabled for image with GUID: %10!s!." //   LEVEL=TRACE_LEVEL_WARNING FLAGS=DBG_INTERFACES FUNC=SetMemoryProtection
{
SubsystemId, ItemGuid -- 10
}
#typev standard_interface_c102 14 "%0Successfully unlocked memory region for image with GUID: %10!s!." //   LEVEL=TRACE_LEVEL_RELEASE FLAGS=DBG_INTERFACES FUNC=SetMemoryProtection
{
SubsystemId, ItemGuid -- 10
}
#typev standard_interface_c91 13 "%0Warning: Unable to unlock the memory region associated with the image with GUID: %10!s!." //   LEVEL=TRACE_LEVEL_WARNING FLAGS=DBG_INTERFACES FUNC=SetMemoryProtection
{
SubsystemId, ItemGuid -- 10
}
#typev standard_interface_c49 11 "%0Warning: Enabling memory protection is not supported for memory region associated with the image." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INTERFACES FUNC=SetMemoryProtection
{
}
#typev standard_interface_c33 10 "%0Entered SetMemoryProtection." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_INTERFACES FUNC=SetMemoryProtection
{
}
#typev standard_interface_c132 16 "%0Exit SetMemoryProtection." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_INTERFACES FUNC=SetMemoryProtection$fin$0
{
}
#typev standard_interface_c66 12 "%0Warning: Unable to locate the image info for image with GUID: %10!s!." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INTERFACES FUNC=SetMemoryProtection$fin$0
{
SubsystemId, ItemGuid -- 10
}
#typev standard_interface_c117 15 "%0Warning: Memory protection has not been enabled for image with GUID: %10!s!." //   LEVEL=TRACE_LEVEL_WARNING FLAGS=DBG_INTERFACES FUNC=SetMemoryProtection$fin$0
{
SubsystemId, ItemGuid -- 10
}
#typev standard_interface_c102 14 "%0Successfully unlocked memory region for image with GUID: %10!s!." //   LEVEL=TRACE_LEVEL_RELEASE FLAGS=DBG_INTERFACES FUNC=SetMemoryProtection$fin$0
{
SubsystemId, ItemGuid -- 10
}
#typev standard_interface_c91 13 "%0Warning: Unable to unlock the memory region associated with the image with GUID: %10!s!." //   LEVEL=TRACE_LEVEL_WARNING FLAGS=DBG_INTERFACES FUNC=SetMemoryProtection$fin$0
{
SubsystemId, ItemGuid -- 10
}
#typev standard_interface_c49 11 "%0Warning: Enabling memory protection is not supported for memory region associated with the image." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_INTERFACES FUNC=SetMemoryProtection$fin$0
{
}
#typev standard_interface_c33 10 "%0Entered SetMemoryProtection." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=DBG_INTERFACES FUNC=SetMemoryProtection$fin$0
{
}
