// PDB:  qcsmmu850.pdb
// PDB:  Last Updated :2020-09-09:19:38:55:000 (UTC) [tracepdb]
981d97eb-ac88-3182-11c0-668ef6c66263 SMMU // SRC=Vcm.cpp MJ= MN=
#typev Vcm_cpp4491 287 "%0 Vcm.cpp::%!FUNC!::4491 : pNode->GetAVCM() is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=CheckErrataApplicableClients
{
}
#typev Vcm_cpp4474 286 "%0 Vcm.cpp::%!FUNC!::4474 : pAssocitatedAVCMsCollection is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=CheckErrataApplicableClients
{
}
#typev Vcm_cpp1122 45 "%0 Vcm.cpp::%!FUNC! :Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1114 44 "%0 Vcm.cpp::%!FUNC!::1114 : Hyp call SmmuHypAssignPageTableNodes to assign page table to/from CP VM Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1082 43 "%0 Vcm.cpp::%!FUNC!::1082 : Invalid AVCM CP ID." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1066 42 "%0 Vcm.cpp::%!FUNC!::1066 : pNode->GetAVCM() is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1053 41 "%0 Vcm.cpp::%!FUNC!::1053 :Access Control VM mismatch" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1046 40 "%0 Vcm.cpp::%!FUNC!::1046 : pNode->GetAVCM() is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1030 39 "%0 Vcm.cpp::%!FUNC!::1030 : pAssocitatedAVCMsCollection is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1023 38 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp378 12 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmAddAVCMToCollection
{
}
#typev Vcm_cpp367 11 "%0 Vcm.cpp::%!FUNC!::367 : pNode memory allocation failed." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmAddAVCMToCollection
{
}
#typev Vcm_cpp358 10 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmAddAVCMToCollection
{
}
#typev Vcm_cpp495 21 "%0 Vcm.cpp::%!FUNC!::495 : SmmuFlushContextTLB failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmFlushTLBsAssociatedWith
{
}
#typev Vcm_cpp483 20 "%0 Vcm.cpp::%!FUNC!::483 : pNode->GetAVCM() is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmFlushTLBsAssociatedWith
{
}
#typev Vcm_cpp464 19 "%0 Vcm.cpp::%!FUNC!::464 : pAssocitatedAVCMsCollection is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmFlushTLBsAssociatedWith
{
}
#typev Vcm_cpp451 18 "%0 Vcm.cpp::%!FUNC!::451 : Invalid parameter - VcmId is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmFlushTLBsAssociatedWith
{
}
#typev Vcm_cpp445 17 "%0 Vcm.cpp::%!FUNC!::445 : Invalid parameter - VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmFlushTLBsAssociatedWith
{
}
#typev Vcm_cpp2647 144 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalActivate
{
}
#typev Vcm_cpp2636 143 "%0 Vcm.cpp::%!FUNC!::2636 : SmmuPageTableBind failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalActivate
{
}
#typev Vcm_cpp2622 142 "%0 Vcm.cpp::%!FUNC!::2622 : AvcmId is already active" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalActivate
{
}
#typev Vcm_cpp2611 141 "%0 Vcm.cpp::%!FUNC!::2611 : AvcmIDBarker is Invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalActivate
{
}
#typev Vcm_cpp2602 140 "%0 Vcm.cpp::%!FUNC!::2602 : AvcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalActivate
{
}
#typev Vcm_cpp2593 139 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalActivate
{
}
#typev Vcm_cpp2419 129 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2408 128 "%0 Vcm.cpp::%!FUNC!::2408 : VcmAddAVCMToCollection failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2386 127 "%0 Vcm.cpp::%!FUNC!::2386 : ExAllocatePoolWithTag failed -- could not allocate memory for avcm" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2373 126 "%0 Vcm.cpp::%!FUNC!::2373 : SmmuPageTableAlloc failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2344 125 "%0 Vcm.cpp::%!FUNC!::2344 : Context bank of different CP VMs can have same VCM" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2326 124 "%0 Vcm.cpp::%!FUNC!::2326 : pAssocitatedAVCMsCollection is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2317 123 "%0 Vcm.cpp::%!FUNC!::2317 :Access Control VM mismatch" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2312 122 "%0 Vcm.cpp::%!FUNC!::2312 :CtxId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2306 121 "%0 Vcm.cpp::%!FUNC!::2306 : Vcm Barker corrupted" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2299 120 "%0 Vcm.cpp::%!FUNC!::2299 : VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2295 119 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp1947 95 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1940 94 "%0 Vcm.cpp::%!FUNC!::1940 : Backfill ghost mdl pages failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1913 93 "%0 Vcm.cpp::%!FUNC!::1913 : SmmuPageTableMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1897 92 "%0 Vcm.cpp::%!FUNC!::1897 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1875 91 "%0 Vcm.cpp::%!FUNC!::1875 : could not get pagelist" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1860 90 "%0 Vcm.cpp::%!FUNC!::1860 : Reservation is already backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1852 89 "%0 Vcm.cpp::%!FUNC!::1852 : Reservation is already backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1845 88 "%0 Vcm.cpp::%!FUNC!::1845 : Mdl Object is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1838 87 "%0 Vcm.cpp::%!FUNC!::1838 :ResId cannot be used with this API" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1829 86 "%0 Vcm.cpp::%!FUNC!::1829 : ResId barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1822 85 "%0 Vcm.cpp::%!FUNC!::1822 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1817 84 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBack
{
}
#typev Vcm_cpp2115 108 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2109 107 "%0 Vcm.cpp::%!FUNC!::2109 : Backfill ghost mdl pages failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2082 106 "%0 Vcm.cpp::%!FUNC!::2082 : SmmuPageTableMapContiguous failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2062 105 "%0 Vcm.cpp::%!FUNC!::2062 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2043 104 "%0 Vcm.cpp::%!FUNC!::2043 : PhysAddr address not aligned to 4k" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2036 103 "%0 Vcm.cpp::%!FUNC!::2036 : Size of PhysAddr address not aligned to 4k" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2029 102 "%0 Vcm.cpp::%!FUNC!::2029 : Size of PhysAddr address is zero" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2022 101 "%0 Vcm.cpp::%!FUNC!::2022 : Reservation is already backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2014 100 "%0 Vcm.cpp::%!FUNC!::2014 : Reservation is already backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2007 99 "%0 Vcm.cpp::%!FUNC!::2007 :ResId cannot be used with this API" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp1998 98 "%0 Vcm.cpp::%!FUNC!::1998 : ResId barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp1991 97 "%0 Vcm.cpp::%!FUNC!::1991 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp1986 96 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp3723 226 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3712 225 "%0 Vcm.cpp::%!FUNC!::3712 : SmmuPageTableUnMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3681 224 "%0 Vcm.cpp::%!FUNC!::3681 : Pagelist is invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3665 223 "%0 Vcm.cpp::%!FUNC!::3665 : BackFill MDL not setup properly" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3650 222 "%0 Vcm.cpp::%!FUNC!::3650 : Cannot backfill if reservation is not already backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3643 221 "%0 Vcm.cpp::%!FUNC!::3643 : Already backfilled" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3633 220 "%0 Vcm.cpp::%!FUNC!::3633 : ResId is INVALID" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3624 219 "%0 Vcm.cpp::%!FUNC!::3624 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3619 218 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3957 243 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3948 242 "%0 Vcm.cpp::%!FUNC!::3948 : SmmuPageTableMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3933 241 "%0 Vcm.cpp::%!FUNC!::3933 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3903 240 "%0 Vcm.cpp::%!FUNC!::3903 : Size mismatch -- physical memory not equal to the virtual space to be backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3896 239 "%0 Vcm.cpp::%!FUNC!::3896 : Bound not created with to allow VcmBackInBound" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3889 238 "%0 Vcm.cpp::%!FUNC!::3889 : BoundId is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3884 237 "%0 Vcm.cpp::%!FUNC!::3884 : BoundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3879 236 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3799 233 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3789 232 "%0 Vcm.cpp::%!FUNC!::3789 : VcmFlushTLBsAssociatedWith failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3777 231 "%0 Vcm.cpp::%!FUNC!::3777 : SmmuPageTableUnMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3761 230 "%0 Vcm.cpp::%!FUNC!::3761 : Reservation is NOT backfilled" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3753 229 "%0 Vcm.cpp::%!FUNC!::3753 : ResId is Corrupted" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3746 228 "%0 Vcm.cpp::%!FUNC!::3746 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3740 227 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3820 235 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalClearFault
{
}
#typev Vcm_cpp3818 234 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalClearFault
{
}
#typev Vcm_cpp884 30 "%0 Vcm.cpp::%!FUNC! :Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp823 29 "%0 Vcm.cpp::%!FUNC!::823 : Failed to initialize Virtmem" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp813 28 "%0 Vcm.cpp::%!FUNC!::813 :pAssocitatedAVCMsCollection is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp774 27 "%0 Vcm.cpp::%!FUNC!::774 : Failed to create wait lock" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp767 26 "%0 Vcm.cpp::%!FUNC!::767 : Failed to allocate memory for VCM" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp754 25 "%0 Vcm.cpp::%!FUNC!::754 : Invalid parameter - Requested address space exceeds 32b boundary" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp747 24 "%0 Vcm.cpp::%!FUNC!::747 : Invalid paramter - multiple ACVM attr" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp741 23 "%0 Vcm.cpp::%!FUNC!::741 : Invalid paramter - Len cannot be 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp736 22 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp3134 178 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3116 177 "%0 Vcm.cpp::%!FUNC!::3116 : SmmuPageTableReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3083 176 "%0 Vcm.cpp::%!FUNC!::3083 : VcmManagementVirtmemInit failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3061 175 "%0 Vcm.cpp::%!FUNC!::3061 : VcmManagementVirtmemAlloc failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3043 174 "%0 Vcm.cpp::%!FUNC!::3043 : boundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3033 173 "%0 Vcm.cpp::%!FUNC!::3033 : Special bound needs preallocated L2" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3025 172 "%0 Vcm.cpp::%!FUNC!::3025 : Vcm is not associated" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3016 171 "%0 Vcm.cpp::%!FUNC!::3016 : Len is 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3009 170 "%0 Vcm.cpp::%!FUNC!::3009 : VcmId is Invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3003 169 "%0 Vcm.cpp::%!FUNC!::3003 : VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp2997 168 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp2744 150 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalDeactivate
{
}
#typev Vcm_cpp2734 149 "%0 Vcm.cpp::%!FUNC!::2734 : SmmuPageTableUnBind failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeactivate
{
}
#typev Vcm_cpp2719 148 "%0 Vcm.cpp::%!FUNC!::2719 : Association already not active" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeactivate
{
}
#typev Vcm_cpp2707 147 "%0 Vcm.cpp::%!FUNC!::2707 : AvcmId->AvcmBarker != AVCM_BARKER" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeactivate
{
}
#typev Vcm_cpp2697 146 "%0 Vcm.cpp::%!FUNC!::2697 : AvcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeactivate
{
}
#typev Vcm_cpp2688 145 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalDeactivate
{
}
#typev Vcm_cpp2507 135 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp2482 134 "%0 Vcm.cpp::%!FUNC!::2482 : VcmRemoveAVCMFromCollection failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp2473 133 "%0 Vcm.cpp::%!FUNC!::2473 : AvcmId is in use right now" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp2463 132 "%0 Vcm.cpp::%!FUNC!::2463 : AvcmBarker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp2457 131 "%0 Vcm.cpp::%!FUNC!::2457 : AvcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp2453 130 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp986 37 "%0 Vcm.cpp::%!FUNC! :Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalFree
{
}
#typev Vcm_cpp963 36 "%0 Vcm.cpp::%!FUNC!::963 : SmmuPageTableFree Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFree
{
}
#typev Vcm_cpp952 35 "%0 Vcm.cpp::%!FUNC!::952 : Vcm is currently busy 1" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFree
{
}
#typev Vcm_cpp942 34 "%0 Vcm.cpp::%!FUNC!::942 : Vcm is currently busy 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFree
{
}
#typev Vcm_cpp932 33 "%0 Vcm.cpp::%!FUNC!::932 : Invalid parameter - VcmId is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFree
{
}
#typev Vcm_cpp926 32 "%0 Vcm.cpp::%!FUNC!::926 : Invalid parameter - VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFree
{
}
#typev Vcm_cpp920 31 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalFree
{
}
#typev Vcm_cpp3536 209 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3519 208 "%0 Vcm.cpp::%!FUNC!::3519 : SmmuPageTableUnReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3502 207 "%0 Vcm.cpp::%!FUNC!::3502 : VcmManagementVirtmemFree failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3488 206 "%0 Vcm.cpp::%!FUNC!::3488 : VcmManagementVirtmemDeinit failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3477 205 "%0 Vcm.cpp::%!FUNC!::3477 : Active reservations within the bound" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3471 204 "%0 Vcm.cpp::%!FUNC!::3471 : Bound barker is invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3464 203 "%0 Vcm.cpp::%!FUNC!::3464 : BoundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3460 202 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3599 217 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetBoundSize
{
}
#typev Vcm_cpp3593 216 "%0 Vcm.cpp::%!FUNC!::3593 : BoundId is INVALID" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetBoundSize
{
}
#typev Vcm_cpp3586 215 "%0 Vcm.cpp::%!FUNC!::3586 : BoundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetBoundSize
{
}
#typev Vcm_cpp3583 214 "%0 Vcm.cpp::%!FUNC! : Enter" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetBoundSize
{
}
#typev Vcm_cpp3569 213 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetBoundStartAddr
{
}
#typev Vcm_cpp3562 212 "%0 Vcm.cpp::%!FUNC!::3562 : BoundId is INVALID" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetBoundStartAddr
{
}
#typev Vcm_cpp3555 211 "%0 Vcm.cpp::%!FUNC!::3555 : BoundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetBoundStartAddr
{
}
#typev Vcm_cpp3551 210 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetBoundStartAddr
{
}
#typev Vcm_cpp2796 154 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetDevAddr
{
}
#typev Vcm_cpp2788 153 "%0 Vcm.cpp::%!FUNC!::2788 : Reservation Id invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetDevAddr
{
}
#typev Vcm_cpp2781 152 "%0 Vcm.cpp::%!FUNC!::2781 : Reservation Id is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetDevAddr
{
}
#typev Vcm_cpp2776 151 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetDevAddr
{
}
#typev Vcm_cpp4092 254 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetFaultInfo
{
}
#typev Vcm_cpp4087 253 "%0 Vcm.cpp::%!FUNC!::4087 : Output parameter is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetFaultInfo
{
}
#typev Vcm_cpp4082 252 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetFaultInfo
{
}
#typev Vcm_cpp4370 279 "%0 Vcm.cpp::%!FUNC!::4370 :PageTableHandle is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetPTBaseAddr
{
}
#typev Vcm_cpp4365 278 "%0 Vcm.cpp::%!FUNC!::4365 :A valid page table does not exist" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetPTBaseAddr
{
}
#typev Vcm_cpp4360 277 "%0 Vcm.cpp::%!FUNC!::4360 : VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetPTBaseAddr
{
}
#typev Vcm_cpp4355 276 "%0 Vcm.cpp::%!FUNC!::4355 : AvcmIDBarker is Invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetPTBaseAddr
{
}
#typev Vcm_cpp4350 275 "%0 Vcm.cpp::%!FUNC!::4350 : AvcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetPTBaseAddr
{
}
#typev Vcm_cpp2863 159 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetReservation
{
}
#typev Vcm_cpp2851 158 "%0 Vcm.cpp::%!FUNC!::2851 : Deivcee address is invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetReservation
{
}
#typev Vcm_cpp2843 157 "%0 Vcm.cpp::%!FUNC!::2843 : VcmId is invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetReservation
{
}
#typev Vcm_cpp2836 156 "%0 Vcm.cpp::%!FUNC!::2836 : VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetReservation
{
}
#typev Vcm_cpp2831 155 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetReservation
{
}
#typev Vcm_cpp1770 83 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetReservationAttr
{
}
#typev Vcm_cpp1762 82 "%0 Vcm.cpp::%!FUNC!::1762 : ResId barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetReservationAttr
{
}
#typev Vcm_cpp1755 81 "%0 Vcm.cpp::%!FUNC!::1755 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetReservationAttr
{
}
#typev Vcm_cpp1750 80 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetReservationAttr
{
}
#typev Vcm_cpp4324 274 "%0 Vcm.cpp::%!FUNC!::4324 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4309 273 "%0 Vcm.cpp::%!FUNC!::4309 :Failed API SmmuPartialMapUnmap" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4291 272 "%0 Vcm.cpp::%!FUNC!::4291 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4274 271 "%0 Vcm.cpp::%!FUNC!::4274 : pPageList Object is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4263 270 "%0 Vcm.cpp::%!FUNC!::4263 :ResId cannot be used with this API" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4250 269 "%0 Vcm.cpp::%!FUNC!::4250 : ResId barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4239 268 "%0 Vcm.cpp::%!FUNC!::4239 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4426 283 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalRegisterIsr
{
}
#typev Vcm_cpp4414 282 "%0 Vcm.cpp::%!FUNC!::4414 : Callback function pointer is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalRegisterIsr
{
}
#typev Vcm_cpp4407 281 "%0 Vcm.cpp::%!FUNC!::4407 : Invalid Client Id" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalRegisterIsr
{
}
#typev Vcm_cpp4403 280 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalRegisterIsr
{
}
#typev Vcm_cpp1307 55 "%0 Vcm.cpp::%!FUNC! :Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1289 54 "%0 Vcm.cpp::%!FUNC!::1289 : SmmuPageTableReserve Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1254 53 "%0 Vcm.cpp::%!FUNC!::1254 : VcmManagementVirtmemAlloc returned invalid virtAddr" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1227 52 "%0 Vcm.cpp::%!FUNC!::1227 : Malloc failure - Could not alloce RES" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1216 51 "%0 Vcm.cpp::%!FUNC!::1216 : Vcm has no associated pagetable" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1207 50 "%0 Vcm.cpp::%!FUNC!::1207 : Invalid parameter - Alignment request not supported" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1202 49 "%0 Vcm.cpp::%!FUNC!::1202 : Invalid parameter - Requested size is 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1195 48 "%0 Vcm.cpp::%!FUNC!::1195 : Invalid parameter - Vcm barker is corrupted" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1190 47 "%0 Vcm.cpp::%!FUNC!::1190 : Invalid parameter - VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1185 46 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1494 66 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1479 65 "%0 Vcm.cpp::%!FUNC!::1479 : SmmuPageTableReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1446 64 "%0 Vcm.cpp::%!FUNC!::1446 : VcmManagementVirtmemAllocAt failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1423 63 "%0 Vcm.cpp::%!FUNC!::1423 : Could not allocate memory for RES" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1413 62 "%0 Vcm.cpp::%!FUNC!::1413 : Request not confined to 32bit boundary" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1402 61 "%0 Vcm.cpp::%!FUNC!::1402 : Target address not aligned to 1k" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1396 60 "%0 Vcm.cpp::%!FUNC!::1396 : No pagetable association for the provided Vcm" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1388 59 "%0 Vcm.cpp::%!FUNC!::1388 : Invalid parameter - Len is 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1381 58 "%0 Vcm.cpp::%!FUNC!::1381 : Invalid parameter - VcmId barker invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1375 57 "%0 Vcm.cpp::%!FUNC!::1375 : Invalid parameter - VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1371 56 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp3444 201 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3428 200 "%0 Vcm.cpp::%!FUNC!::3428 : SmmuPageTableReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3390 199 "%0 Vcm.cpp::%!FUNC!::3390 : VcmManagementVirtmemAllocAt failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3367 198 "%0 Vcm.cpp::%!FUNC!::3367 : ExAllocatePoolWithTag failed -- could not allocate memory for RES" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3356 197 "%0 Vcm.cpp::%!FUNC!::3356 : Reservation request exceeds 32bit boundary" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3345 196 "%0 Vcm.cpp::%!FUNC!::3345 : Target request not aligned to 1k" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3339 195 "%0 Vcm.cpp::%!FUNC!::3339 : Vcm not associated" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3331 194 "%0 Vcm.cpp::%!FUNC!::3331 : Requested Len is 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3324 193 "%0 Vcm.cpp::%!FUNC!::3324 : Reservation not allowed within this bound" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3317 192 "%0 Vcm.cpp::%!FUNC!::3317 : Bound Id is invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3309 191 "%0 Vcm.cpp::%!FUNC!::3309 : Bound Id is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3305 190 "%0 Vcm.cpp::%!FUNC! :Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3285 189 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3267 188 "%0 Vcm.cpp::%!FUNC!::3267 : SmmuPageTableReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3230 187 "%0 Vcm.cpp::%!FUNC!::3230 : VcmManagementVirtmemAlloc failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3204 186 "%0 Vcm.cpp::%!FUNC!::3204 : ExAllocatePoolWithTag failure, could not allocate memory for RES" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3193 185 "%0 Vcm.cpp::%!FUNC!::3193 : Vcm not associated" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3186 184 "%0 Vcm.cpp::%!FUNC!::3186 : Requested alignment not supported" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3180 183 "%0 Vcm.cpp::%!FUNC!::3180 : Requested reservation size is 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3173 182 "%0 Vcm.cpp::%!FUNC!::3173 : Cannot reserve into bound allocated using BOUND_BACK_INTO attrib" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3166 181 "%0 Vcm.cpp::%!FUNC!::3166 : BoundId is Invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3158 180 "%0 Vcm.cpp::%!FUNC!::3158 : Bound Id is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3154 179 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp1719 79 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSetReservationAttr
{
}
#typev Vcm_cpp1707 78 "%0 Vcm.cpp::%!FUNC!::1707 : SmmuPageTableSetAttributes failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalSetReservationAttr
{
}
#typev Vcm_cpp1687 77 "%0 Vcm.cpp::%!FUNC!::1687 : Reservation ID barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalSetReservationAttr
{
}
#typev Vcm_cpp1680 76 "%0 Vcm.cpp::%!FUNC!::1680 : Reservation ID is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalSetReservationAttr
{
}
#typev Vcm_cpp1675 75 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSetReservationAttr
{
}
#typev Vcm_cpp4116 256 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSmmuGetContextBankConfig
{
}
#typev Vcm_cpp4104 255 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSmmuGetContextBankConfig
{
}
#typev Vcm_cpp4130 258 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSmmuSetState
{
}
#typev Vcm_cpp4128 257 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSmmuSetState
{
}
#typev Vcm_cpp2251 118 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2237 117 "%0 Vcm.cpp::%!FUNC!::2237 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2212 116 "%0 Vcm.cpp::%!FUNC!::2212 : VcmFlushTLBsAssociatedWith failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2201 115 "%0 Vcm.cpp::%!FUNC!::2201 : SmmuPageTableUnMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2184 114 "%0 Vcm.cpp::%!FUNC!::2184 : BackUnfill failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2175 113 "%0 Vcm.cpp::%!FUNC!::2175 : Reservation is not backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2168 112 "%0 Vcm.cpp::%!FUNC!::2168 :ResId cannot be used with this API" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2159 111 "%0 Vcm.cpp::%!FUNC!::2159 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2152 110 "%0 Vcm.cpp::%!FUNC!::2152 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2147 109 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp4059 251 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4047 250 "%0 Vcm.cpp::%!FUNC!::4047 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4030 249 "%0 Vcm.cpp::%!FUNC!::4030 : VcmFlushTLBsAssociatedWith failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4019 248 "%0 Vcm.cpp::%!FUNC!::4019 : SmmuPageTableUnMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4003 247 "%0 Vcm.cpp::%!FUNC!::4003 : Bound not created with correct attributes to allow VcmUnbackInBound" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp3996 246 "%0 Vcm.cpp::%!FUNC!::3996 : Bound barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp3991 245 "%0 Vcm.cpp::%!FUNC!::3991 : BoundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp3986 244 "%0 Vcm.cpp::%!FUNC! :Enter" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4455 285 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnregisterIsr
{
}
#typev Vcm_cpp4448 284 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnregisterIsr
{
}
#typev Vcm_cpp1618 74 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1602 73 "%0 Vcm.cpp::%!FUNC!::1602 : SmmuPageTableUnReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1585 72 "%0 Vcm.cpp::%!FUNC!::1585 : SmmuPageTableUnReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1569 71 "%0 Vcm.cpp::%!FUNC!::1569 : VcmManagementVirtmemFree failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1548 70 "%0 Vcm.cpp::%!FUNC!::1548 : ResId is in use" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1541 69 "%0 Vcm.cpp::%!FUNC!::1541 : Invalid parameter - ResId barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1534 68 "%0 Vcm.cpp::%!FUNC!::1534 : Invalid parameter - Reservation ID is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1529 67 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp4210 267 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4204 266 "%0 Vcm.cpp::%!FUNC!::4204 : SmmuPageTableGetMap Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4191 265 "%0 Vcm.cpp::%!FUNC!::4191 : pageMapInfo.pPageList == NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4176 264 "%0 Vcm.cpp::%!FUNC!::4176 : MdlObject is not big enough to fullfill this request" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4165 263 "%0 Vcm.cpp::%!FUNC!::4165 : Bad MdlObject" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4160 262 "%0 Vcm.cpp::%!FUNC!::4160 : Size parameter cannot be 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4155 261 "%0 Vcm.cpp::%!FUNC!::4155 : Corrupt VCM ID" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4150 260 "%0 Vcm.cpp::%!FUNC!::4150 : Bad VCM ID" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4146 259 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp431 16 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmRemoveAVCMFromCollection
{
}
#typev Vcm_cpp416 15 "%0 Vcm.cpp::%!FUNC!::416 : pAssociatedAvcm is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmRemoveAVCMFromCollection
{
}
#typev Vcm_cpp399 14 "%0 Vcm.cpp::%!FUNC!::399 : VcmId->pCollectionVcmAssociatedAVCMs is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmRemoveAVCMFromCollection
{
}
#typev Vcm_cpp392 13 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmRemoveAVCMFromCollection
{
}
