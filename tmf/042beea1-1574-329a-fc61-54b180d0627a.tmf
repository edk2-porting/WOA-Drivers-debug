// PDB:  qcpmicglink7180.pdb
// PDB:  Last Updated :2021-10-17:21:53:32:888 (UTC) [tracepdb]
042beea1-1574-329a-fc61-54b180d0627a PmicGlink // SRC=PmicGlinkIoImpl.c MJ= MN=
#typev PmicGlinkIoImpl_c928 49 "%0BattMngrControlCharging::--" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrControlCharging
{
}
#typev PmicGlinkIoImpl_c772 30 "%0BattMngrControlCharging::Signalling charger cable event" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrControlCharging
{
}
#typev PmicGlinkIoImpl_c762 29 "%0BattMngrControlCharging::Charge current from OS is %10!d! mA" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrControlCharging
{
((PPMIC_GLINK_DEVICE_CONTEXT)Context)->BattMngrData.ControlCharging.batt_max_charge_current, ItemLong -- 10
}
#typev PmicGlinkIoImpl_c832 36 "%0BattMngrControlCharging::Signalling charger cable event" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrControlCharging
{
}
#typev PmicGlinkIoImpl_c827 35 "%0BattMngrControlCharging:: Unknown Proprietary charger GUID passed" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrControlCharging
{
}
#typev PmicGlinkIoImpl_c821 34 "%0BattMngrControlCharging::Charge current based on Invalid Wall charger GUID is %10!d! mA" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrControlCharging
{
((PPMIC_GLINK_DEVICE_CONTEXT)Context)->BattMngrData.ControlCharging.batt_max_charge_current, ItemLong -- 10
}
#typev PmicGlinkIoImpl_c814 33 "%0BattMngrControlCharging::Charge current based on QC3.0 GUID is %10!d! mA" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrControlCharging
{
((PPMIC_GLINK_DEVICE_CONTEXT)Context)->BattMngrData.ControlCharging.batt_max_charge_current, ItemLong -- 10
}
#typev PmicGlinkIoImpl_c807 32 "%0BattMngrControlCharging::Charge current based on QC2.0 GUID is %10!d! mA" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrControlCharging
{
((PPMIC_GLINK_DEVICE_CONTEXT)Context)->BattMngrData.ControlCharging.batt_max_charge_current, ItemLong -- 10
}
#typev PmicGlinkIoImpl_c800 31 "%0BattMngrControlCharging::Proprietary charger GUID requested" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrControlCharging
{
}
#typev PmicGlinkIoImpl_c918 48 "%0BattMngrControlCharging::Signalling charger cable event" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrControlCharging
{
}
#typev PmicGlinkIoImpl_c914 47 "%0BattMngrControlCharging:: Unknown Proprietary charger GUID from USB Type-C port passed" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrControlCharging
{
}
#typev PmicGlinkIoImpl_c908 46 "%0BattMngrControlCharging::Charge current from USB Type-C port based on Invalid Wall charger GUID is %10!d! mA" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrControlCharging
{
((PPMIC_GLINK_DEVICE_CONTEXT)Context)->BattMngrData.ControlCharging.batt_max_charge_current, ItemLong -- 10
}
#typev PmicGlinkIoImpl_c901 45 "%0BattMngrControlCharging::Charge current from USB Type-C port based on QC 3.0 GUID is %10!d! mA" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrControlCharging
{
((PPMIC_GLINK_DEVICE_CONTEXT)Context)->BattMngrData.ControlCharging.batt_max_charge_current, ItemLong -- 10
}
#typev PmicGlinkIoImpl_c894 44 "%0BattMngrControlCharging::Charge current from USB Type-C port based on QC2.0 GUID is %10!d! mA" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrControlCharging
{
((PPMIC_GLINK_DEVICE_CONTEXT)Context)->BattMngrData.ControlCharging.batt_max_charge_current, ItemLong -- 10
}
#typev PmicGlinkIoImpl_c887 43 "%0BattMngrControlCharging:: port type is %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrControlCharging
{
((PPMIC_GLINK_DEVICE_CONTEXT)Context)->BattMngrData.ControlCharging.batt_charger_port_type, ItemLong -- 10
}
#typev PmicGlinkIoImpl_c883 42 "%0BattMngrControlCharging:: USB Type-C port charger voltage is %10!d! mV" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrControlCharging
{
((PPMIC_GLINK_DEVICE_CONTEXT)Context)->BattMngrData.ControlCharging.batt_charger_voltage, ItemLong -- 10
}
#typev PmicGlinkIoImpl_c879 41 "%0BattMngrControlCharging::Proprietary charger GUID from USB Type-C port requested" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrControlCharging
{
}
#typev PmicGlinkIoImpl_c870 40 "%0BattMngrControlCharging::Signalling charger cable event" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrControlCharging
{
}
#typev PmicGlinkIoImpl_c862 39 "%0BattMngrControlCharging:: Port type is %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrControlCharging
{
((PPMIC_GLINK_DEVICE_CONTEXT)Context)->BattMngrData.ControlCharging.batt_charger_port_type, ItemLong -- 10
}
#typev PmicGlinkIoImpl_c858 38 "%0BattMngrControlCharging:: USB Type-C port charger voltage is %10!d! mV" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrControlCharging
{
((PPMIC_GLINK_DEVICE_CONTEXT)Context)->BattMngrData.ControlCharging.batt_charger_voltage, ItemLong -- 10
}
#typev PmicGlinkIoImpl_c854 37 "%0BattMngrControlCharging:: USB Type-C port charge current from OS is %10!d! mA" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrControlCharging
{
((PPMIC_GLINK_DEVICE_CONTEXT)Context)->BattMngrData.ControlCharging.batt_max_charge_current, ItemLong -- 10
}
#typev PmicGlinkIoImpl_c747 28 "%0BattMngrControlCharging::++" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrControlCharging
{
}
#typev PmicGlinkIoImpl_c176 10 "%0BattMngrGetBatteryId::cannot talk to firmware, returning invalid battery tag" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrGetBatteryId
{
}
#typev PmicGlinkIoImpl_c197 12 "%0BattMngrGetBatteryId::Battery ID is %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrGetBatteryId
{
getBattIdOut->batt_id, ItemLong -- 10
}
#typev PmicGlinkIoImpl_c179 11 "%0BattMngrGetBatteryId::currentTime = %10!I64d!, previousTime = %11!I64d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrGetBatteryId
{
currentTimeStamp, ItemLongLong -- 10
previousRunTimeStamp, ItemLongLong -- 11
}
#typev PmicGlinkIoImpl_c709 26 "%0BattMngrGetBatteryInfoManufactureSerialNumber:: battery manufacture serial number is %10!s!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrGetBatteryInfo
{
((PPMIC_GLINK_DEVICE_CONTEXT)Context)->BattMngrData.BattInfo.batt_serial_num, ItemWString -- 10
}
#typev PmicGlinkIoImpl_c705 25 "%0BattMngrGetBatteryInfoManufactureUniqueName:: battery manufacture unique name is %10!s!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrGetBatteryInfo
{
((PPMIC_GLINK_DEVICE_CONTEXT)Context)->BattMngrData.BattInfo.batt_unique_id, ItemWString -- 10
}
#typev PmicGlinkIoImpl_c701 24 "%0BattMngrGetBatteryInfoManufactureName:: battery manufacture name  is %10!s!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrGetBatteryInfo
{
((PPMIC_GLINK_DEVICE_CONTEXT)Context)->BattMngrData.BattInfo.batt_manufacture_name, ItemWString -- 10
}
#typev PmicGlinkIoImpl_c697 23 "%0BattMngrGetBatteryInfoManufactureDate:: battery manufacture date  is %10!u!,%11!u!,%12!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrGetBatteryInfo
{
((PBATT_MNGR_MANUFACTURE_DATE_OUT)battInfoOut)->day, ItemLong -- 10
((PBATT_MNGR_MANUFACTURE_DATE_OUT)battInfoOut)->month, ItemLong -- 11
((PBATT_MNGR_MANUFACTURE_DATE_OUT)battInfoOut)->year, ItemLong -- 12
}
#typev PmicGlinkIoImpl_c693 22 "%0BattMngrGetBatteryInfoDeviceName:: battery device name is %10!s!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrGetBatteryInfo
{
battInfoOut->batt_device_name, ItemWString -- 10
}
#typev PmicGlinkIoImpl_c689 21 "%0BattMngrGetBatteryInfoEstimatedTime::Battery estimated time is %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrGetBatteryInfo
{
battInfoOut->batt_estimated_time, ItemLong -- 10
}
#typev PmicGlinkIoImpl_c681 17 "%0BattMngrGetBatteryInfoGranularity::Granularity and capacity is  %10!d!mWh and %11!d!mWh" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrGetBatteryInfo
{
pScaleOut->granularity, ItemLong -- 10
pScaleOut->capacity, ItemLong -- 11
}
#typev PmicGlinkIoImpl_c634 27 "%0BattMngrGetBatteryInfo::++" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrGetBatteryInfo
{
}
#typev PmicGlinkIoImpl_c333 16 "%0BattMngrGetBatteryInfoInfo::Battery Info:capabilities =%10!d!,chemistry[0]=%11!c!,chemistry[1]=%12!c!,chemistry[2]=%13!c!,chemistry[3]=%14!c!,critical_bias=%15!d!,cycle_count=%16!d!,default_alert1=%17!d!mWh,default_alert2=%18!d!mWh,designed_capacity=%19!d!mWh,full_capacity=%20!d!mWh,technology=%21!c!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrGetBatteryInfoInfo
{
((PBATT_MNGR_INFO_OUT_TYPE)battInfoOut)->capabilities, ItemLong -- 10
((PBATT_MNGR_INFO_OUT_TYPE)battInfoOut)->chemistry[0], ItemChar -- 11
((PBATT_MNGR_INFO_OUT_TYPE)battInfoOut)->chemistry[1], ItemChar -- 12
((PBATT_MNGR_INFO_OUT_TYPE)battInfoOut)->chemistry[2], ItemChar -- 13
((PBATT_MNGR_INFO_OUT_TYPE)battInfoOut)->chemistry[3], ItemChar -- 14
((PBATT_MNGR_INFO_OUT_TYPE)battInfoOut)->critical_bias, ItemLong -- 15
((PBATT_MNGR_INFO_OUT_TYPE)battInfoOut)->cycle_count, ItemLong -- 16
((PBATT_MNGR_INFO_OUT_TYPE)battInfoOut)->default_alert1, ItemLong -- 17
((PBATT_MNGR_INFO_OUT_TYPE)battInfoOut)->default_alert2, ItemLong -- 18
((PBATT_MNGR_INFO_OUT_TYPE)battInfoOut)->designed_capacity, ItemLong -- 19
((PBATT_MNGR_INFO_OUT_TYPE)battInfoOut)->full_charged_capacity, ItemLong -- 20
((PBATT_MNGR_INFO_OUT_TYPE)battInfoOut)->technology, ItemChar -- 21
}
#typev PmicGlinkIoImpl_c396 20 "%0BattMngrGetBatteryInfoTemperature::--" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrGetBatteryInfoTemperature
{
}
#typev PmicGlinkIoImpl_c394 19 "%0BattMngrGetBatteryInfoTemperature::Battery temperature is %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrGetBatteryInfoTemperature
{
battInfoOut->batt_temperature, ItemLong -- 10
}
#typev PmicGlinkIoImpl_c391 18 "%0BattMngrGetBatteryInfoTemperature::++" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrGetBatteryInfoTemperature
{
}
#typev PmicGlinkIoImpl_c1217 56 "%0BattMngrGetBatteryPresentStauts::ERROR::Error Code =%10!X!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrGetBatteryPresentStauts
{
status, ItemLong -- 10
}
#typev PmicGlinkIoImpl_c1210 55 "%0BattMngrGetBatteryPresentStauts::Battery Present is %10!d!,battery perc is %11!d!,capacity is %12!d!mWh,rate is %13!d!mAh, battery temp is %14!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrGetBatteryPresentStauts
{
pBatteryPresentStatus->IsBatteryPresent, ItemLong -- 10
pBatteryPresentStatus->battPercentage, ItemLong -- 11
pBatteryPresentStatus->capacity, ItemLong -- 12
pBatteryPresentStatus->battRate, ItemLong -- 13
pBatteryPresentStatus->battTemperature, ItemLong -- 14
}
#typev PmicGlinkIoImpl_c292 15 "%0BattMngrGetChargerStatus::setting Notify back to FALSE." //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrGetChargerStatus
{
}
#typev PmicGlinkIoImpl_c282 14 "%0BattMngrGetChargerStatus::triggering heartbeat event." //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrGetChargerStatus
{
}
#typev PmicGlinkIoImpl_c268 13 "%0BattMngrGetChargerStatus::Battery status info:power state =%10!d!, capacity =%11!d! mWh, rate =%12!ld! mW, voltage =%13!d! mV" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrGetChargerStatus
{
chgStatusOut->power_state, ItemLong -- 10
chgStatusOut->capacity, ItemLong -- 11
chgStatusOut->rate, ItemLong -- 12
chgStatusOut->voltage, ItemLong -- 13
}
#typev PmicGlinkIoImpl_c1283 62 "%0BattMngrHandleGenericTestInfo:: active port is %10!d!, state ID is %11!d!, charger type is %12!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrHandleGenericTestInfo
{
pDeviceContext->BattMngrData.TestInfo.chargerInfo.activePort, ItemLong -- 10
pDeviceContext->BattMngrData.TestInfo.chargerInfo.stateID, ItemLong -- 11
pDeviceContext->BattMngrData.TestInfo.chargerInfo.chargerType, ItemLong -- 12
}
#typev PmicGlinkIoImpl_c1281 61 "%0BattMngrHandleGenericTestInfo:: max battery current is %10!d! mA, max battery voltage is %11!d! mV, max charger current is %12!d! mA, max charger voltage is %13!d! mV" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrHandleGenericTestInfo
{
pDeviceContext->BattMngrData.TestInfo.chargerInfo.maxBatteryCurrent, ItemLong -- 10
pDeviceContext->BattMngrData.TestInfo.chargerInfo.maxBatteryVoltage, ItemLong -- 11
pDeviceContext->BattMngrData.TestInfo.chargerInfo.maxChargerCurrent, ItemLong -- 12
pDeviceContext->BattMngrData.TestInfo.chargerInfo.maxChargerVoltage, ItemLong -- 13
}
#typev PmicGlinkIoImpl_c1279 60 "%0BattMngrHandleGenericTestInfo::aicl_done is %10!d!, final_icl is %11!d! mA" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrHandleGenericTestInfo
{
pDeviceContext->BattMngrData.TestInfo.chargerInfo.aicl_done, ItemLong -- 10
pDeviceContext->BattMngrData.TestInfo.chargerInfo.final_icl, ItemLong -- 11
}
#typev PmicGlinkIoImpl_c1288 63 "%0BattMngrHandleGenericTestInfo:: command not supported" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrHandleGenericTestInfo
{
}
#typev PmicGlinkIoImpl_c1272 59 "%0BattMngrHandleGenericTestInfo::PmicGlink_SyncSendReceive failed. Error Code =%10!X!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrHandleGenericTestInfo
{
status, ItemLong -- 10
}
#typev PmicGlinkIoImpl_c1256 58 "%0BattMngrHandleGenericTestInfo::OutputBuffer is NULL. Error Code =%10!X!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrHandleGenericTestInfo
{
status, ItemLong -- 10
}
#typev PmicGlinkIoImpl_c1251 57 "%0BattMngrHandleGenericTestInfo::++" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=BattMngrHandleGenericTestInfo
{
}
#typev PmicGlinkIoImpl_c1553 53 "%0BattMngrSetChargeRate:: received new charge perc = %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=HandleBattMngrRequest
{
((PPMIC_GLINK_DEVICE_CONTEXT)Context)->BattMngrData.ChargeRate.charge_perc, ItemLong -- 10
}
#typev PmicGlinkIoImpl_c1564 54 "%0BattMngrRemoveMiniclassRef::++" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=HandleBattMngrRequest
{
}
#typev PmicGlinkIoImpl_c1616 68 "%0qcpmicglink::WARNING::Invalid IOCTL request,IOControlCode =%10!d!" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=PmicGlinkWPP_SelfHost FUNC=HandleBattMngrRequest
{
IoControlCode, ItemLong -- 10
}
#typev PmicGlinkIoImpl_c1509 50 "%0BattMngrSetStatusNotificaionCriteria::Set Notify to TRUE." //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=HandleBattMngrRequest
{
}
#typev PmicGlinkIoImpl_c1520 52 "%0Notification disabled" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=HandleBattMngrRequest
{
}
#typev PmicGlinkIoImpl_c1520 51 "%0BattMngrDisableStatusNotificaion::++" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=HandleBattMngrRequest
{
}
#typev PmicGlinkIoImpl_c1454 66 "%0qcpmicglink::WARNING:: HandleBattMngrRequest Context is NULL pointer, Error Code =%10!X!,IoControlCode =%11!d!" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=PmicGlinkWPP_SelfHost FUNC=HandleBattMngrRequest
{
status, ItemLong -- 10
IoControlCode, ItemLong -- 11
}
#typev PmicGlinkIoImpl_c1448 65 "%0qcpmicglink::WARNING:: HandleBattMngrRequest byteReturned is NULL pointer, Error Code =%10!X!,IoControlCode =%11!d!" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=PmicGlinkWPP_SelfHost FUNC=HandleBattMngrRequest
{
status, ItemLong -- 10
IoControlCode, ItemLong -- 11
}
#typev PmicGlinkIoImpl_c1441 64 "%0qcpmicglink::WARNING::Validate Request failed, Error Code =%10!X!,IoControlCode =%11!d!" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=PmicGlinkWPP_SelfHost FUNC=HandleBattMngrRequest
{
status, ItemLong -- 10
IoControlCode, ItemLong -- 11
}
#typev PmicGlinkIoImpl_c1697 71 "%0%!FUNC!::UCSI Read: CCI=0x%10!08X!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=PmicGlinkUCSIReadBuffer
{
pUcsiData->cci.AsUINT32, ItemLong -- 10
}
#typev PmicGlinkIoImpl_c1689 70 "%0%!FUNC!::UCSI Read: Previous Command is PPM_RESET but Link is down, update CCI on behalf of FW" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=PmicGlinkUCSIReadBuffer
{
}
// PDB:  qcpmicglink7180.pdb
// PDB:  Last Updated :2021-10-17:21:53:32:888 (UTC) [tracepdb]
#typev PmicGlinkQueue_c421 69 "%0%!FUNC!::UCSI Write: Command=0x%10!02X!, DataLength=0x%11!02X!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=PmicGlinkWPP_ioimpl FUNC=OnIoDeviceControl
{
(unsigned char)pUcsiData->control.Command, ItemLong -- 10
(unsigned char)pUcsiData->control.DataLength, ItemLong -- 11
}
#typev PmicGlinkQueue_c421 74 "%0qcpmicglink::WARNING:: HandlePmicGlinkRequest Glink Channel not connected, Error Code =%10!X!,IoControlCode =%11!d!" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=PmicGlinkWPP_SelfHost FUNC=OnIoDeviceControl
{
status, ItemLong -- 10
IoControlCode, ItemLong -- 11
}
#typev PmicGlinkQueue_c421 73 "%0qcpmicglink::WARNING:: HandlePmicGlinkRequest Context is NULL pointer, Error Code =%10!X!,IoControlCode =%11!d!" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=PmicGlinkWPP_SelfHost FUNC=OnIoDeviceControl
{
status, ItemLong -- 10
IoControlCode, ItemLong -- 11
}
