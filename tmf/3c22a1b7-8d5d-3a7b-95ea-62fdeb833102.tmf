// PDB:  qcsmmu7280.pdb
// PDB:  Last Updated :2022-05-17:11:06:06:456 (UTC) [tracepdb]
3c22a1b7-8d5d-3a7b-95ea-62fdeb833102 SMMU // SRC=Vcm.cpp MJ= MN=
#typev Vcm_cpp4642 289 "%0 Vcm.cpp::%!FUNC!::4642 : pNode->GetAVCM() is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=CheckErrataApplicableClients
{
}
#typev Vcm_cpp4625 288 "%0 Vcm.cpp::%!FUNC!::4625 : pAssocitatedAVCMsCollection is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=CheckErrataApplicableClients
{
}
#typev Vcm_cpp1134 45 "%0 Vcm.cpp::%!FUNC! :Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1126 44 "%0 Vcm.cpp::%!FUNC!::1126 : Hyp call SmmuHypAssignPageTableNodes to assign page table to/from CP VM Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1094 43 "%0 Vcm.cpp::%!FUNC!::1094 : Invalid AVCM CP ID." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1078 42 "%0 Vcm.cpp::%!FUNC!::1078 : pNode->GetAVCM() is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1065 41 "%0 Vcm.cpp::%!FUNC!::1065 :Access Control VM mismatch" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1058 40 "%0 Vcm.cpp::%!FUNC!::1058 : pNode->GetAVCM() is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1042 39 "%0 Vcm.cpp::%!FUNC!::1042 : pAssocitatedAVCMsCollection is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp1035 38 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=ProcessWhitelistPTNodes
{
}
#typev Vcm_cpp382 12 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmAddAVCMToCollection
{
}
#typev Vcm_cpp371 11 "%0 Vcm.cpp::%!FUNC!::371 : pNode memory allocation failed." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmAddAVCMToCollection
{
}
#typev Vcm_cpp362 10 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmAddAVCMToCollection
{
}
#typev Vcm_cpp500 21 "%0 Vcm.cpp::%!FUNC!::500 : SmmuFlushContextTLB failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmFlushTLBsAssociatedWith
{
}
#typev Vcm_cpp488 20 "%0 Vcm.cpp::%!FUNC!::488 : pNode->GetAVCM() is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmFlushTLBsAssociatedWith
{
}
#typev Vcm_cpp469 19 "%0 Vcm.cpp::%!FUNC!::469 : pAssocitatedAVCMsCollection is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmFlushTLBsAssociatedWith
{
}
#typev Vcm_cpp456 18 "%0 Vcm.cpp::%!FUNC!::456 : Invalid parameter - VcmId is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmFlushTLBsAssociatedWith
{
}
#typev Vcm_cpp450 17 "%0 Vcm.cpp::%!FUNC!::450 : Invalid parameter - VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmFlushTLBsAssociatedWith
{
}
#typev Vcm_cpp2715 144 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalActivate
{
}
#typev Vcm_cpp2704 143 "%0 Vcm.cpp::%!FUNC!::2704 : SmmuPageTableBind failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalActivate
{
}
#typev Vcm_cpp2690 142 "%0 Vcm.cpp::%!FUNC!::2690 : AvcmId is already active" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalActivate
{
}
#typev Vcm_cpp2679 141 "%0 Vcm.cpp::%!FUNC!::2679 : AvcmIDBarker is Invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalActivate
{
}
#typev Vcm_cpp2670 140 "%0 Vcm.cpp::%!FUNC!::2670 : AvcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalActivate
{
}
#typev Vcm_cpp2661 139 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalActivate
{
}
#typev Vcm_cpp2486 129 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2475 128 "%0 Vcm.cpp::%!FUNC!::2475 : VcmAddAVCMToCollection failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2451 127 "%0 Vcm.cpp::%!FUNC!::2451 : WdfMemoryCreate failed -- could not allocate memory for avcm" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2425 126 "%0 Vcm.cpp::%!FUNC!::2425 : SmmuPageTableAlloc failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2394 125 "%0 Vcm.cpp::%!FUNC!::2394 : Context bank of different CP VMs can have same VCM" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2376 124 "%0 Vcm.cpp::%!FUNC!::2376 : pAssocitatedAVCMsCollection is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2367 123 "%0 Vcm.cpp::%!FUNC!::2367 :Access Control VM mismatch" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2362 122 "%0 Vcm.cpp::%!FUNC!::2362 :CtxId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2356 121 "%0 Vcm.cpp::%!FUNC!::2356 : Vcm Barker corrupted" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2349 120 "%0 Vcm.cpp::%!FUNC!::2349 : VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp2345 119 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalAssoc
{
}
#typev Vcm_cpp1995 95 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1988 94 "%0 Vcm.cpp::%!FUNC!::1988 : Backfill ghost mdl pages failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1961 93 "%0 Vcm.cpp::%!FUNC!::1961 : SmmuPageTableMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1944 92 "%0 Vcm.cpp::%!FUNC!::1944 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1922 91 "%0 Vcm.cpp::%!FUNC!::1922 : could not get pagelist" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1907 90 "%0 Vcm.cpp::%!FUNC!::1907 : Reservation is already backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1899 89 "%0 Vcm.cpp::%!FUNC!::1899 : Reservation is already backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1892 88 "%0 Vcm.cpp::%!FUNC!::1892 : Mdl Object is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1885 87 "%0 Vcm.cpp::%!FUNC!::1885 :ResId cannot be used with this API" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1876 86 "%0 Vcm.cpp::%!FUNC!::1876 : ResId barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1869 85 "%0 Vcm.cpp::%!FUNC!::1869 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBack
{
}
#typev Vcm_cpp1864 84 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBack
{
}
#typev Vcm_cpp2164 108 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2158 107 "%0 Vcm.cpp::%!FUNC!::2158 : Backfill ghost mdl pages failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2131 106 "%0 Vcm.cpp::%!FUNC!::2131 : SmmuPageTableMapContiguous failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2110 105 "%0 Vcm.cpp::%!FUNC!::2110 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2091 104 "%0 Vcm.cpp::%!FUNC!::2091 : PhysAddr address not aligned to 4k" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2084 103 "%0 Vcm.cpp::%!FUNC!::2084 : Size of PhysAddr address not aligned to 4k" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2077 102 "%0 Vcm.cpp::%!FUNC!::2077 : Size of PhysAddr address is zero" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2070 101 "%0 Vcm.cpp::%!FUNC!::2070 : Reservation is already backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2062 100 "%0 Vcm.cpp::%!FUNC!::2062 : Reservation is already backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2055 99 "%0 Vcm.cpp::%!FUNC!::2055 :ResId cannot be used with this API" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2046 98 "%0 Vcm.cpp::%!FUNC!::2046 : ResId barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2039 97 "%0 Vcm.cpp::%!FUNC!::2039 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp2034 96 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackContiguous
{
}
#typev Vcm_cpp3855 226 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3844 225 "%0 Vcm.cpp::%!FUNC!::3844 : SmmuPageTableUnMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3803 224 "%0 Vcm.cpp::%!FUNC!::3803 : Pagelist is invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3787 223 "%0 Vcm.cpp::%!FUNC!::3787 : BackFill MDL not setup properly" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3772 222 "%0 Vcm.cpp::%!FUNC!::3772 : Cannot backfill if reservation is not already backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3765 221 "%0 Vcm.cpp::%!FUNC!::3765 : Already backfilled" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3755 220 "%0 Vcm.cpp::%!FUNC!::3755 : ResId is INVALID" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3746 219 "%0 Vcm.cpp::%!FUNC!::3746 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp3741 218 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackFill
{
}
#typev Vcm_cpp4091 243 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp4082 242 "%0 Vcm.cpp::%!FUNC!::4082 : SmmuPageTableMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp4066 241 "%0 Vcm.cpp::%!FUNC!::4066 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp4036 240 "%0 Vcm.cpp::%!FUNC!::4036 : Size mismatch -- physical memory not equal to the virtual space to be backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp4029 239 "%0 Vcm.cpp::%!FUNC!::4029 : Bound not created with to allow VcmBackInBound" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp4022 238 "%0 Vcm.cpp::%!FUNC!::4022 : BoundId is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp4017 237 "%0 Vcm.cpp::%!FUNC!::4017 : BoundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp4012 236 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackInBound
{
}
#typev Vcm_cpp3932 233 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3922 232 "%0 Vcm.cpp::%!FUNC!::3922 : VcmFlushTLBsAssociatedWith failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3910 231 "%0 Vcm.cpp::%!FUNC!::3910 : SmmuPageTableUnMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3893 230 "%0 Vcm.cpp::%!FUNC!::3893 : Reservation is NOT backfilled" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3885 229 "%0 Vcm.cpp::%!FUNC!::3885 : ResId is Corrupted" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3878 228 "%0 Vcm.cpp::%!FUNC!::3878 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3872 227 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalBackUnfill
{
}
#typev Vcm_cpp3953 235 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalClearFault
{
}
#typev Vcm_cpp3951 234 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalClearFault
{
}
#typev Vcm_cpp891 30 "%0 Vcm.cpp::%!FUNC! :Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp828 29 "%0 Vcm.cpp::%!FUNC!::828 : Failed to initialize Virtmem" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp818 28 "%0 Vcm.cpp::%!FUNC!::818 :pAssocitatedAVCMsCollection is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp783 27 "%0 Vcm.cpp::%!FUNC!::783 : Failed to create wait lock" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp773 26 "%0 Vcm.cpp::%!FUNC!::773 : Failed to allocate memory for VCM" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp753 25 "%0 Vcm.cpp::%!FUNC!::753 : Invalid parameter - Requested address space exceeds 32b boundary" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp746 24 "%0 Vcm.cpp::%!FUNC!::746 : Invalid paramter - multiple ACVM attr" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp740 23 "%0 Vcm.cpp::%!FUNC!::740 : Invalid paramter - Len cannot be 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp735 22 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalCreate
{
}
#typev Vcm_cpp3220 178 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3202 177 "%0 Vcm.cpp::%!FUNC!::3202 : SmmuPageTableReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3168 176 "%0 Vcm.cpp::%!FUNC!::3168 : VcmManagementVirtmemInit failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3146 175 "%0 Vcm.cpp::%!FUNC!::3146 : VcmManagementVirtmemAlloc failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3125 174 "%0 Vcm.cpp::%!FUNC!::3125 : Memory allocation failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3101 173 "%0 Vcm.cpp::%!FUNC!::3101 : Special bound needs preallocated L2" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3093 172 "%0 Vcm.cpp::%!FUNC!::3093 : Vcm is not associated" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3084 171 "%0 Vcm.cpp::%!FUNC!::3084 : Len is 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3077 170 "%0 Vcm.cpp::%!FUNC!::3077 : VcmId is Invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3071 169 "%0 Vcm.cpp::%!FUNC!::3071 : VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp3065 168 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalCreateBound
{
}
#typev Vcm_cpp2812 150 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalDeactivate
{
}
#typev Vcm_cpp2802 149 "%0 Vcm.cpp::%!FUNC!::2802 : SmmuPageTableUnBind failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeactivate
{
}
#typev Vcm_cpp2787 148 "%0 Vcm.cpp::%!FUNC!::2787 : Association already not active" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeactivate
{
}
#typev Vcm_cpp2775 147 "%0 Vcm.cpp::%!FUNC!::2775 : AvcmId->AvcmBarker != AVCM_BARKER" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeactivate
{
}
#typev Vcm_cpp2765 146 "%0 Vcm.cpp::%!FUNC!::2765 : AvcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeactivate
{
}
#typev Vcm_cpp2756 145 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalDeactivate
{
}
#typev Vcm_cpp2575 135 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp2549 134 "%0 Vcm.cpp::%!FUNC!::2549 : VcmRemoveAVCMFromCollection failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp2540 133 "%0 Vcm.cpp::%!FUNC!::2540 : AvcmId is in use right now" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp2530 132 "%0 Vcm.cpp::%!FUNC!::2530 : AvcmBarker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp2524 131 "%0 Vcm.cpp::%!FUNC!::2524 : AvcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp2520 130 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalDeassoc
{
}
#typev Vcm_cpp998 37 "%0 Vcm.cpp::%!FUNC! :Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalFree
{
}
#typev Vcm_cpp970 36 "%0 Vcm.cpp::%!FUNC!::970 : SmmuPageTableFree Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFree
{
}
#typev Vcm_cpp959 35 "%0 Vcm.cpp::%!FUNC!::959 : Vcm is currently busy 1" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFree
{
}
#typev Vcm_cpp949 34 "%0 Vcm.cpp::%!FUNC!::949 : Vcm is currently busy 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFree
{
}
#typev Vcm_cpp939 33 "%0 Vcm.cpp::%!FUNC!::939 : Invalid parameter - VcmId is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFree
{
}
#typev Vcm_cpp933 32 "%0 Vcm.cpp::%!FUNC!::933 : Invalid parameter - VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFree
{
}
#typev Vcm_cpp927 31 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalFree
{
}
#typev Vcm_cpp3656 209 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3638 208 "%0 Vcm.cpp::%!FUNC!::3638 : SmmuPageTableUnReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3621 207 "%0 Vcm.cpp::%!FUNC!::3621 : VcmManagementVirtmemFree failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3607 206 "%0 Vcm.cpp::%!FUNC!::3607 : VcmManagementVirtmemDeinit failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3596 205 "%0 Vcm.cpp::%!FUNC!::3596 : Active reservations within the bound" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3590 204 "%0 Vcm.cpp::%!FUNC!::3590 : Bound barker is invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3583 203 "%0 Vcm.cpp::%!FUNC!::3583 : BoundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3579 202 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalFreeBound
{
}
#typev Vcm_cpp3719 217 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetBoundSize
{
}
#typev Vcm_cpp3713 216 "%0 Vcm.cpp::%!FUNC!::3713 : BoundId is INVALID" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetBoundSize
{
}
#typev Vcm_cpp3706 215 "%0 Vcm.cpp::%!FUNC!::3706 : BoundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetBoundSize
{
}
#typev Vcm_cpp3703 214 "%0 Vcm.cpp::%!FUNC! : Enter" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetBoundSize
{
}
#typev Vcm_cpp3689 213 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetBoundStartAddr
{
}
#typev Vcm_cpp3682 212 "%0 Vcm.cpp::%!FUNC!::3682 : BoundId is INVALID" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetBoundStartAddr
{
}
#typev Vcm_cpp3675 211 "%0 Vcm.cpp::%!FUNC!::3675 : BoundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetBoundStartAddr
{
}
#typev Vcm_cpp3671 210 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetBoundStartAddr
{
}
#typev Vcm_cpp2864 154 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetDevAddr
{
}
#typev Vcm_cpp2856 153 "%0 Vcm.cpp::%!FUNC!::2856 : Reservation Id invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetDevAddr
{
}
#typev Vcm_cpp2849 152 "%0 Vcm.cpp::%!FUNC!::2849 : Reservation Id is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetDevAddr
{
}
#typev Vcm_cpp2844 151 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetDevAddr
{
}
#typev Vcm_cpp4227 254 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetFaultInfo
{
}
#typev Vcm_cpp4222 253 "%0 Vcm.cpp::%!FUNC!::4222 : Output parameter is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetFaultInfo
{
}
#typev Vcm_cpp4217 252 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetFaultInfo
{
}
#typev Vcm_cpp4521 281 "%0 Vcm.cpp::%!FUNC!::4521 :PageTableHandle is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetPTBaseAddr
{
}
#typev Vcm_cpp4516 280 "%0 Vcm.cpp::%!FUNC!::4516 :A valid page table does not exist" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetPTBaseAddr
{
}
#typev Vcm_cpp4511 279 "%0 Vcm.cpp::%!FUNC!::4511 : VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetPTBaseAddr
{
}
#typev Vcm_cpp4506 278 "%0 Vcm.cpp::%!FUNC!::4506 : AvcmIDBarker is Invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetPTBaseAddr
{
}
#typev Vcm_cpp4501 277 "%0 Vcm.cpp::%!FUNC!::4501 : AvcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetPTBaseAddr
{
}
#typev Vcm_cpp2931 159 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetReservation
{
}
#typev Vcm_cpp2919 158 "%0 Vcm.cpp::%!FUNC!::2919 : Deivcee address is invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetReservation
{
}
#typev Vcm_cpp2911 157 "%0 Vcm.cpp::%!FUNC!::2911 : VcmId is invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetReservation
{
}
#typev Vcm_cpp2904 156 "%0 Vcm.cpp::%!FUNC!::2904 : VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetReservation
{
}
#typev Vcm_cpp2899 155 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetReservation
{
}
#typev Vcm_cpp1817 83 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetReservationAttr
{
}
#typev Vcm_cpp1809 82 "%0 Vcm.cpp::%!FUNC!::1809 : ResId barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetReservationAttr
{
}
#typev Vcm_cpp1802 81 "%0 Vcm.cpp::%!FUNC!::1802 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalGetReservationAttr
{
}
#typev Vcm_cpp1797 80 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalGetReservationAttr
{
}
#typev Vcm_cpp4475 276 "%0 Vcm.cpp::%!FUNC!::4475 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4460 275 "%0 Vcm.cpp::%!FUNC!::4460 :Failed API SmmuPartialMapUnmap" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4441 274 "%0 Vcm.cpp::%!FUNC!::4441 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4424 273 "%0 Vcm.cpp::%!FUNC!::4424 : pPageList Object is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4413 272 "%0 Vcm.cpp::%!FUNC!::4413 :ResId cannot be used with this API" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4400 271 "%0 Vcm.cpp::%!FUNC!::4400 : ResId barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4389 270 "%0 Vcm.cpp::%!FUNC!::4389 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalPartialBackUnback
{
}
#typev Vcm_cpp4577 285 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalRegisterIsr
{
}
#typev Vcm_cpp4565 284 "%0 Vcm.cpp::%!FUNC!::4565 : Callback function pointer is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalRegisterIsr
{
}
#typev Vcm_cpp4558 283 "%0 Vcm.cpp::%!FUNC!::4558 : Invalid Client Id" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalRegisterIsr
{
}
#typev Vcm_cpp4554 282 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalRegisterIsr
{
}
#typev Vcm_cpp1336 55 "%0 Vcm.cpp::%!FUNC! :Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1318 54 "%0 Vcm.cpp::%!FUNC!::1318 : SmmuPageTableReserve Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1282 53 "%0 Vcm.cpp::%!FUNC!::1282 : VcmManagementVirtmemAlloc returned invalid virtAddr" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1252 52 "%0 Vcm.cpp::%!FUNC!::1252 : Malloc failure - Could not alloce RES" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1228 51 "%0 Vcm.cpp::%!FUNC!::1228 : Vcm has no associated pagetable" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1219 50 "%0 Vcm.cpp::%!FUNC!::1219 : Invalid parameter - Alignment request not supported" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1214 49 "%0 Vcm.cpp::%!FUNC!::1214 : Invalid parameter - Requested size is 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1207 48 "%0 Vcm.cpp::%!FUNC!::1207 : Invalid parameter - Vcm barker is corrupted" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1202 47 "%0 Vcm.cpp::%!FUNC!::1202 : Invalid parameter - VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1197 46 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserve
{
}
#typev Vcm_cpp1540 66 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1525 65 "%0 Vcm.cpp::%!FUNC!::1525 : SmmuPageTableReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1491 64 "%0 Vcm.cpp::%!FUNC!::1491 : VcmManagementVirtmemAllocAt failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1465 63 "%0 Vcm.cpp::%!FUNC!::1465 : Could not allocate memory for RES" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1442 62 "%0 Vcm.cpp::%!FUNC!::1442 : Request not confined to 32bit boundary" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1431 61 "%0 Vcm.cpp::%!FUNC!::1431 : Target address not aligned to 1k" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1425 60 "%0 Vcm.cpp::%!FUNC!::1425 : No pagetable association for the provided Vcm" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1417 59 "%0 Vcm.cpp::%!FUNC!::1417 : Invalid parameter - Len is 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1410 58 "%0 Vcm.cpp::%!FUNC!::1410 : Invalid parameter - VcmId barker invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1404 57 "%0 Vcm.cpp::%!FUNC!::1404 : Invalid parameter - VcmId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp1400 56 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveAt
{
}
#typev Vcm_cpp3563 201 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3547 200 "%0 Vcm.cpp::%!FUNC!::3547 : SmmuPageTableReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3508 199 "%0 Vcm.cpp::%!FUNC!::3508 : VcmManagementVirtmemAllocAt failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3483 198 "%0 Vcm.cpp::%!FUNC!::3483 : Memory allocation failed -- could not allocate memory for RES" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3459 197 "%0 Vcm.cpp::%!FUNC!::3459 : Reservation request exceeds 32bit boundary" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3448 196 "%0 Vcm.cpp::%!FUNC!::3448 : Target request not aligned to 1k" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3442 195 "%0 Vcm.cpp::%!FUNC!::3442 : Vcm not associated" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3434 194 "%0 Vcm.cpp::%!FUNC!::3434 : Requested Len is 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3427 193 "%0 Vcm.cpp::%!FUNC!::3427 : Reservation not allowed within this bound" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3420 192 "%0 Vcm.cpp::%!FUNC!::3420 : Bound Id is invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3412 191 "%0 Vcm.cpp::%!FUNC!::3412 : Bound Id is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3408 190 "%0 Vcm.cpp::%!FUNC! :Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveAtInBound
{
}
#typev Vcm_cpp3388 189 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3370 188 "%0 Vcm.cpp::%!FUNC!::3370 : SmmuPageTableReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3332 187 "%0 Vcm.cpp::%!FUNC!::3332 : VcmManagementVirtmemAlloc failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3303 186 "%0 Vcm.cpp::%!FUNC!::3303 : Memory allocation failure, could not allocate memory for RES" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3279 185 "%0 Vcm.cpp::%!FUNC!::3279 : Vcm not associated" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3272 184 "%0 Vcm.cpp::%!FUNC!::3272 : Requested alignment not supported" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3266 183 "%0 Vcm.cpp::%!FUNC!::3266 : Requested reservation size is 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3259 182 "%0 Vcm.cpp::%!FUNC!::3259 : Cannot reserve into bound allocated using BOUND_BACK_INTO attrib" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3252 181 "%0 Vcm.cpp::%!FUNC!::3252 : BoundId is Invalid" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3244 180 "%0 Vcm.cpp::%!FUNC!::3244 : Bound Id is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp3240 179 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalReserveInBound
{
}
#typev Vcm_cpp1766 79 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSetReservationAttr
{
}
#typev Vcm_cpp1754 78 "%0 Vcm.cpp::%!FUNC!::1754 : SmmuPageTableSetAttributes failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalSetReservationAttr
{
}
#typev Vcm_cpp1734 77 "%0 Vcm.cpp::%!FUNC!::1734 : Reservation ID barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalSetReservationAttr
{
}
#typev Vcm_cpp1727 76 "%0 Vcm.cpp::%!FUNC!::1727 : Reservation ID is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalSetReservationAttr
{
}
#typev Vcm_cpp1722 75 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSetReservationAttr
{
}
#typev Vcm_cpp4251 256 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSmmuGetContextBankConfig
{
}
#typev Vcm_cpp4239 255 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSmmuGetContextBankConfig
{
}
#typev Vcm_cpp4280 260 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSmmuSetPowerState
{
}
#typev Vcm_cpp4278 259 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSmmuSetPowerState
{
}
#typev Vcm_cpp4265 258 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSmmuSetState
{
}
#typev Vcm_cpp4263 257 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalSmmuSetState
{
}
#typev Vcm_cpp2301 118 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2287 117 "%0 Vcm.cpp::%!FUNC!::2287 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2262 116 "%0 Vcm.cpp::%!FUNC!::2262 : VcmFlushTLBsAssociatedWith failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2251 115 "%0 Vcm.cpp::%!FUNC!::2251 : SmmuPageTableUnMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2233 114 "%0 Vcm.cpp::%!FUNC!::2233 : BackUnfill failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2224 113 "%0 Vcm.cpp::%!FUNC!::2224 : Reservation is not backed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2217 112 "%0 Vcm.cpp::%!FUNC!::2217 :ResId cannot be used with this API" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2208 111 "%0 Vcm.cpp::%!FUNC!::2208 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2201 110 "%0 Vcm.cpp::%!FUNC!::2201 : ResId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp2196 109 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnback
{
}
#typev Vcm_cpp4194 251 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4182 250 "%0 Vcm.cpp::%!FUNC!::4182 : ProcessWhitelistPTNodes Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4165 249 "%0 Vcm.cpp::%!FUNC!::4165 : VcmFlushTLBsAssociatedWith failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4154 248 "%0 Vcm.cpp::%!FUNC!::4154 : SmmuPageTableUnMap failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4137 247 "%0 Vcm.cpp::%!FUNC!::4137 : Bound not created with correct attributes to allow VcmUnbackInBound" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4130 246 "%0 Vcm.cpp::%!FUNC!::4130 : Bound barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4125 245 "%0 Vcm.cpp::%!FUNC!::4125 : BoundId is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4120 244 "%0 Vcm.cpp::%!FUNC! :Enter" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnbackInBound
{
}
#typev Vcm_cpp4606 287 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnregisterIsr
{
}
#typev Vcm_cpp4599 286 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnregisterIsr
{
}
#typev Vcm_cpp1665 74 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1648 73 "%0 Vcm.cpp::%!FUNC!::1648 : SmmuPageTableUnReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1631 72 "%0 Vcm.cpp::%!FUNC!::1631 : SmmuPageTableUnReserve failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1615 71 "%0 Vcm.cpp::%!FUNC!::1615 : VcmManagementVirtmemFree failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1594 70 "%0 Vcm.cpp::%!FUNC!::1594 : ResId is in use" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1587 69 "%0 Vcm.cpp::%!FUNC!::1587 : Invalid parameter - ResId barker is corrupt" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1580 68 "%0 Vcm.cpp::%!FUNC!::1580 : Invalid parameter - Reservation ID is NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp1575 67 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalUnreserve
{
}
#typev Vcm_cpp4360 269 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4354 268 "%0 Vcm.cpp::%!FUNC!::4354 : SmmuPageTableGetMap Failed" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4341 267 "%0 Vcm.cpp::%!FUNC!::4341 : pageMapInfo.pPageList == NULL" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4326 266 "%0 Vcm.cpp::%!FUNC!::4326 : MdlObject is not big enough to fullfill this request" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4315 265 "%0 Vcm.cpp::%!FUNC!::4315 : Bad MdlObject" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4310 264 "%0 Vcm.cpp::%!FUNC!::4310 : Size parameter cannot be 0" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4305 263 "%0 Vcm.cpp::%!FUNC!::4305 : Corrupt VCM ID" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4300 262 "%0 Vcm.cpp::%!FUNC!::4300 : Bad VCM ID" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp4296 261 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmInternalVirtualToPhysical
{
}
#typev Vcm_cpp435 16 "%0 Vcm.cpp::%!FUNC! : Exit." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmRemoveAVCMFromCollection
{
}
#typev Vcm_cpp420 15 "%0 Vcm.cpp::%!FUNC!::420 : pAssociatedAvcm is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmRemoveAVCMFromCollection
{
}
#typev Vcm_cpp403 14 "%0 Vcm.cpp::%!FUNC!::403 : VcmId->pCollectionVcmAssociatedAVCMs is NULL." //   LEVEL=TRACE_LEVEL_ERROR FLAGS=Core FUNC=VcmRemoveAVCMFromCollection
{
}
#typev Vcm_cpp396 13 "%0 Vcm.cpp::%!FUNC! : Enter." //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=EntryExit FUNC=VcmRemoveAVCMFromCollection
{
}
