// PDB:  qcbattmngr850.pdb
// PDB:  Last Updated :2020-09-09:19:38:55:000 (UTC) [tracepdb]
1ce7bcec-05b2-32e4-6442-879643adb2a1 BattMngr // SRC=BattMngrIoImpl.c MJ= MN=
#typev BattMngrIoImpl_c772 47 "%0BattMngrControlCharging::--" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrControlCharging
{
}
#typev BattMngrIoImpl_c762 46 "%0BattMngrControlCharging::Signalling charger cable event" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrControlCharging
{
}
#typev BattMngrIoImpl_c758 45 "%0BattMngrControlCharging:: Unknown Proprietary charger GUID from USB Type-C port passed" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrControlCharging
{
}
#typev BattMngrIoImpl_c752 44 "%0BattMngrControlCharging::Charge current from USB Type-C port based on Invalid Wall charger GUID is %10!d! mA" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrControlCharging
{
((PBATT_MNGR_DEVICE_CONTEXT)Context)->BattMngrData.ControlCharging.batt_max_charge_current, ItemLong -- 10
}
#typev BattMngrIoImpl_c745 43 "%0BattMngrControlCharging::Charge current from USB Type-C port based on QC 3.0 GUID is %10!d! mA" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrControlCharging
{
((PBATT_MNGR_DEVICE_CONTEXT)Context)->BattMngrData.ControlCharging.batt_max_charge_current, ItemLong -- 10
}
#typev BattMngrIoImpl_c738 42 "%0BattMngrControlCharging::Charge current from USB Type-C port based on QC2.0 GUID is %10!d! mA" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrControlCharging
{
((PBATT_MNGR_DEVICE_CONTEXT)Context)->BattMngrData.ControlCharging.batt_max_charge_current, ItemLong -- 10
}
#typev BattMngrIoImpl_c731 41 "%0BattMngrControlCharging:: port type is %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrControlCharging
{
((PBATT_MNGR_DEVICE_CONTEXT)Context)->BattMngrData.ControlCharging.batt_charger_port_type, ItemLong -- 10
}
#typev BattMngrIoImpl_c727 40 "%0BattMngrControlCharging:: USB Type-C port charger voltage is %10!d! mV" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrControlCharging
{
((PBATT_MNGR_DEVICE_CONTEXT)Context)->BattMngrData.ControlCharging.batt_charger_voltage, ItemLong -- 10
}
#typev BattMngrIoImpl_c723 39 "%0BattMngrControlCharging::Proprietary charger GUID from USB Type-C port requested" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrControlCharging
{
}
#typev BattMngrIoImpl_c714 38 "%0BattMngrControlCharging::Signalling charger cable event" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrControlCharging
{
}
#typev BattMngrIoImpl_c706 37 "%0BattMngrControlCharging:: Port type is %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrControlCharging
{
((PBATT_MNGR_DEVICE_CONTEXT)Context)->BattMngrData.ControlCharging.batt_charger_port_type, ItemLong -- 10
}
#typev BattMngrIoImpl_c702 36 "%0BattMngrControlCharging:: USB Type-C port charger voltage is %10!d! mV" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrControlCharging
{
((PBATT_MNGR_DEVICE_CONTEXT)Context)->BattMngrData.ControlCharging.batt_charger_voltage, ItemLong -- 10
}
#typev BattMngrIoImpl_c698 35 "%0BattMngrControlCharging:: USB Type-C port charge current from OS is %10!d! mA" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrControlCharging
{
((PBATT_MNGR_DEVICE_CONTEXT)Context)->BattMngrData.ControlCharging.batt_max_charge_current, ItemLong -- 10
}
#typev BattMngrIoImpl_c672 34 "%0BattMngrControlCharging::Signalling charger cable event" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrControlCharging
{
}
#typev BattMngrIoImpl_c667 33 "%0BattMngrControlCharging:: Unknown Proprietary charger GUID passed" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrControlCharging
{
}
#typev BattMngrIoImpl_c661 32 "%0BattMngrControlCharging::Charge current based on Invalid Wall charger GUID is %10!d! mA" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrControlCharging
{
((PBATT_MNGR_DEVICE_CONTEXT)Context)->BattMngrData.ControlCharging.batt_max_charge_current, ItemLong -- 10
}
#typev BattMngrIoImpl_c654 31 "%0BattMngrControlCharging::Charge current based on QC3.0 GUID is %10!d! mA" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrControlCharging
{
((PBATT_MNGR_DEVICE_CONTEXT)Context)->BattMngrData.ControlCharging.batt_max_charge_current, ItemLong -- 10
}
#typev BattMngrIoImpl_c647 30 "%0BattMngrControlCharging::Charge current based on QC2.0 GUID is %10!d! mA" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrControlCharging
{
((PBATT_MNGR_DEVICE_CONTEXT)Context)->BattMngrData.ControlCharging.batt_max_charge_current, ItemLong -- 10
}
#typev BattMngrIoImpl_c640 29 "%0BattMngrControlCharging::Proprietary charger GUID requested" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrControlCharging
{
}
#typev BattMngrIoImpl_c612 28 "%0BattMngrControlCharging::Signalling charger cable event" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrControlCharging
{
}
#typev BattMngrIoImpl_c602 27 "%0BattMngrControlCharging::Charge current from OS is %10!d! mA" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrControlCharging
{
((PBATT_MNGR_DEVICE_CONTEXT)Context)->BattMngrData.ControlCharging.batt_max_charge_current, ItemLong -- 10
}
#typev BattMngrIoImpl_c586 26 "%0BattMngrControlCharging::++" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrControlCharging
{
}
#typev BattMngrIoImpl_c548 24 "%0BattMngrGetBatteryInfoManufactureSerialNumber:: battery manufacture serial number is %10!s!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrGetBatteryInfo
{
((PBATT_MNGR_DEVICE_CONTEXT)Context)->BattMngrData.BattInfo.batt_serial_num, ItemWString -- 10
}
#typev BattMngrIoImpl_c544 23 "%0BattMngrGetBatteryInfoManufactureUniqueName:: battery manufacture unique name is %10!s!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrGetBatteryInfo
{
((PBATT_MNGR_DEVICE_CONTEXT)Context)->BattMngrData.BattInfo.batt_unique_id, ItemWString -- 10
}
#typev BattMngrIoImpl_c540 22 "%0BattMngrGetBatteryInfoManufactureName:: battery manufacture name  is %10!s!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrGetBatteryInfo
{
((PBATT_MNGR_DEVICE_CONTEXT)Context)->BattMngrData.BattInfo.batt_manufacture_name, ItemWString -- 10
}
#typev BattMngrIoImpl_c536 21 "%0BattMngrGetBatteryInfoManufactureDate:: battery manufacture date  is %10!u!,%11!u!,%12!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrGetBatteryInfo
{
((PBATT_MNGR_MANUFACTURE_DATE_OUT)battInfoOut)->day, ItemLong -- 10
((PBATT_MNGR_MANUFACTURE_DATE_OUT)battInfoOut)->month, ItemLong -- 11
((PBATT_MNGR_MANUFACTURE_DATE_OUT)battInfoOut)->year, ItemLong -- 12
}
#typev BattMngrIoImpl_c532 20 "%0BattMngrGetBatteryInfoDeviceName:: battery device name is %10!s!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrGetBatteryInfo
{
battInfoOut->batt_device_name, ItemWString -- 10
}
#typev BattMngrIoImpl_c528 19 "%0BattMngrGetBatteryInfoEstimatedTime::Battery estimated time is %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrGetBatteryInfo
{
battInfoOut->batt_estimated_time, ItemLong -- 10
}
#typev BattMngrIoImpl_c524 18 "%0BattMngrGetBatteryInfoTemperature::--" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrGetBatteryInfo
{
}
#typev BattMngrIoImpl_c524 17 "%0BattMngrGetBatteryInfoTemperature::Battery temperature is %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrGetBatteryInfo
{
battInfoOut->batt_temperature, ItemLong -- 10
}
#typev BattMngrIoImpl_c524 16 "%0BattMngrGetBatteryInfoTemperature::++" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrGetBatteryInfo
{
}
#typev BattMngrIoImpl_c520 15 "%0BattMngrGetBatteryInfoGranularity::Granularity and capacity is  %10!d!mWh and %11!d!mWh" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrGetBatteryInfo
{
pScaleOut->granularity, ItemLong -- 10
pScaleOut->capacity, ItemLong -- 11
}
#typev BattMngrIoImpl_c494 25 "%0BattMngrGetBatteryInfo::++" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrGetBatteryInfo
{
}
#typev BattMngrIoImpl_c230 14 "%0BattMngrGetBatteryInfoInfo::Battery Info:capabilities =%10!d!,chemistry[0]=%11!c!,chemistry[1]=%12!c!,chemistry[2]=%13!c!,chemistry[3]=%14!c!,critical_bias=%15!d!,cycle_count=%16!d!,default_alert1=%17!d!mWh,default_alert2=%18!d!mWh,designed_capacity=%19!d!mWh,full_capacity=%20!d!mWh,technology=%21!c!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrGetBatteryInfoInfo
{
((PBATT_MNGR_INFO_OUT_TYPE)battInfoOut)->capabilities, ItemLong -- 10
((PBATT_MNGR_INFO_OUT_TYPE)battInfoOut)->chemistry[0], ItemChar -- 11
((PBATT_MNGR_INFO_OUT_TYPE)battInfoOut)->chemistry[1], ItemChar -- 12
((PBATT_MNGR_INFO_OUT_TYPE)battInfoOut)->chemistry[2], ItemChar -- 13
((PBATT_MNGR_INFO_OUT_TYPE)battInfoOut)->chemistry[3], ItemChar -- 14
((PBATT_MNGR_INFO_OUT_TYPE)battInfoOut)->critical_bias, ItemLong -- 15
((PBATT_MNGR_INFO_OUT_TYPE)battInfoOut)->cycle_count, ItemLong -- 16
((PBATT_MNGR_INFO_OUT_TYPE)battInfoOut)->default_alert1, ItemLong -- 17
((PBATT_MNGR_INFO_OUT_TYPE)battInfoOut)->default_alert2, ItemLong -- 18
((PBATT_MNGR_INFO_OUT_TYPE)battInfoOut)->designed_capacity, ItemLong -- 19
((PBATT_MNGR_INFO_OUT_TYPE)battInfoOut)->full_charged_capacity, ItemLong -- 20
((PBATT_MNGR_INFO_OUT_TYPE)battInfoOut)->technology, ItemChar -- 21
}
#typev BattMngrIoImpl_c189 13 "%0BattMngrGetChargerStatus::setting Notify back to FALSE." //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrGetChargerStatus
{
}
#typev BattMngrIoImpl_c179 12 "%0BattMngrGetChargerStatus::triggering heartbeat event." //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrGetChargerStatus
{
}
#typev BattMngrIoImpl_c166 11 "%0BattMngrGetChargerStatus::Battery status info:power state =%10!d!, capacity =%11!d! mWh, rate =%12!ld! mW, voltage =%13!d! mV" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrGetChargerStatus
{
chgStatusOut->power_state, ItemLong -- 10
chgStatusOut->capacity, ItemLong -- 11
chgStatusOut->rate, ItemLong -- 12
chgStatusOut->voltage, ItemLong -- 13
}
#typev BattMngrIoImpl_c1464 67 "%0BattMngrHandleGenericTestInfo::Error Code =%10!X!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrHandleGenericTestInfo
{
status, ItemLong -- 10
}
#typev BattMngrIoImpl_c1381 66 "%0BattMngr::Test Marker String = %10!s!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrHandleGenericTestInfo
{
pGenericTestInput->args.testMarkerString, ItemWString -- 10
}
// PDB:  qcbattmngr850.pdb
// PDB:  Last Updated :2020-09-09:19:38:55:000 (UTC) [tracepdb]
#typev BattMngrIoImpl_c1299 65 "%0BattMngr::Test Marker ID = %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrHandleGenericTestInfo
{
pGenericTestInput->args.testMarkerID, ItemLong -- 10
}
#typev BattMngrIoImpl_c1290 64 "%0BattMngrHandleGenericTestInfo::++" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrHandleGenericTestInfo
{
}
#typev BattMngrIoImpl_c1200 62 "%0BattMngrSetBCLThreshold::ERROR::Error Code =%10!X!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrSetBCLThreshold
{
status, ItemLong -- 10
}
#typev BattMngrIoImpl_c1193 61 "%0BattMngrSetBCLThreshold::Values are: = HighThreshold enable = %10!d! , HighThreshold =%11!d! ,LowThreshold enable =%12!d! , LowThreshold =%13!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrSetBCLThreshold
{
battMngrContext->BattMngrData.BCLHighThreshold.bSet, ItemLong -- 10
battMngrContext->BattMngrData.BCLHighThreshold.BCL_threshold, ItemLong -- 11
battMngrContext->BattMngrData.BCLLowThreshold.bSet, ItemLong -- 12
battMngrContext->BattMngrData.BCLLowThreshold.BCL_threshold, ItemLong -- 13
}
#typev BattMngrIoImpl_c1175 60 "%0BattMngrSetBCLThreshold::BCL high threshold = %10!d! out of range, capping it to 1000" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=BattMngrSetBCLThreshold
{
pBCLThresholdInput->high_threshold.BCL_threshold, ItemLong -- 10
}
#typev BattMngrIoImpl_c1741 70 "%0qcbattmngr::WARNING::Invalid IOCTL request,IOControlCode =%10!d!" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=BattMngrWPP_SelfHost FUNC=HandleBattMngrRequest
{
IoControlCode, ItemLong -- 10
}
// PDB:  qcbattmngr850.pdb
// PDB:  Last Updated :2020-09-09:19:38:55:000 (UTC) [tracepdb]
#typev BattMngrIoImpl_c1710 63 "%0BattMngrHandleGenericInfo::Error Code =%10!X!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=HandleBattMngrRequest
{
status, ItemLong -- 10
}
#typev BattMngrIoImpl_c1690 59 "%0BattMngrGetBatteryPresentStauts::ERROR::Error Code =%10!X!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=HandleBattMngrRequest
{
status, ItemLong -- 10
}
#typev BattMngrIoImpl_c1690 58 "%0BattMngrGetBatteryPresentStauts::Battery Present is %10!d!,battery perc is %11!d!,capacity is %12!d!mWh,rate is %13!d!mAh, battery temp is %14!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=HandleBattMngrRequest
{
pBatteryPresentStatus->IsBatteryPresent, ItemLong -- 10
pBatteryPresentStatus->battPercentage, ItemLong -- 11
pBatteryPresentStatus->capacity, ItemLong -- 12
pBatteryPresentStatus->battRate, ItemLong -- 13
pBatteryPresentStatus->battTemperature, ItemLong -- 14
}
#typev BattMngrIoImpl_c1679 57 "%0BattMngrGetBCLCurrent::ERROR::Error Code = %10!X!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=HandleBattMngrRequest
{
status, ItemLong -- 10
}
#typev BattMngrIoImpl_c1679 56 "%0BattMngrGetBCLCurrent::Values are:IMax = %10!d!mA,IMaxShutDown =%11!d!mA,IPresent =%12!d!mA,BCL_capability =%13!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=HandleBattMngrRequest
{
pBCLOutputData->IMax, ItemLong -- 10
pBCLOutputData->IMaxShutDown, ItemLong -- 11
pBCLOutputData->IPresent, ItemLong -- 12
pBCLOutputData->BCL_capability, ItemLong -- 13
}
#typev BattMngrIoImpl_c1669 55 "%0BattMngrRemoveMiniclassRef::++" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=HandleBattMngrRequest
{
}
#typev BattMngrIoImpl_c1658 54 "%0BattMngrSetChargeRate:: Signalling the thermal event" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=HandleBattMngrRequest
{
}
#typev BattMngrIoImpl_c1658 53 "%0BattMngrSetChargeRate:: received new charge perc = %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=HandleBattMngrRequest
{
((PBATT_MNGR_DEVICE_CONTEXT)Context)->BattMngrData.ChargeRate.charge_perc, ItemLong -- 10
}
#typev BattMngrIoImpl_c1647 52 "%0BattMngrGetCurrentState:: Current state is %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=HandleBattMngrRequest
{
pCurrState->current_state, ItemLong -- 10
}
#typev BattMngrIoImpl_c1636 50 "%0BattMngrSetOperationalMode::Mode Selected: Factory test mode" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=HandleBattMngrRequest
{
}
#typev BattMngrIoImpl_c1636 51 "%0BattMngrSetOperationalMode::Mode Selected: Normal mode" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=HandleBattMngrRequest
{
}
#typev BattMngrIoImpl_c1625 49 "%0BattMngrDisableStatusNotificaion::++" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=HandleBattMngrRequest
{
}
#typev BattMngrIoImpl_c1614 48 "%0BattMngrSetStatusNotificaionCriteria::Set Notify to TRUE." //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=HandleBattMngrRequest
{
}
#typev BattMngrIoImpl_c1573 10 "%0BattMngrGetBatteryId::Battery ID is %10!d!" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=BattMngrWPP_ioimpl FUNC=HandleBattMngrRequest
{
getBattIdOut->batt_id, ItemLong -- 10
}
#typev BattMngrIoImpl_c1565 69 "%0qcbattmngr::WARNING:: HandleBattMngrRequest byteReturned is NULL pointer, Error Code =%10!X!,IoControlCode =%11!d!" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=BattMngrWPP_SelfHost FUNC=HandleBattMngrRequest
{
status, ItemLong -- 10
IoControlCode, ItemLong -- 11
}
#typev BattMngrIoImpl_c1558 68 "%0qcbattmngr::WARNING::Validate Request failed, Error Code =%10!X!,IoControlCode =%11!d!" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=BattMngrWPP_SelfHost FUNC=HandleBattMngrRequest
{
status, ItemLong -- 10
IoControlCode, ItemLong -- 11
}
