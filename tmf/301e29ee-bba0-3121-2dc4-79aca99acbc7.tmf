// PDB:  qcsubsys7180.pdb
// PDB:  Last Updated :2021-10-17:21:53:20:588 (UTC) [tracepdb]
301e29ee-bba0-3121-2dc4-79aca99acbc7 subsys // SRC=amss.c MJ= MN=
#typev amss_c297 31 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: WdfRegistryQueryULong returned with status %10!s! " //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=AMSSReadLPMValueFromRegistry
{
status, ItemNTSTATUS -- 10
}
#typev amss_c269 30 "%0 [%!LEVEL!] amss.c::%!FUNC!:: Failed RtlAppendUnicodeStringToString wDriverNameStr with %10!s!" //   LEVEL=LOG_ERR_ FLAGS=Core FUNC=AMSSReadLPMValueFromRegistry
{
status, ItemNTSTATUS -- 10
}
#typev amss_c263 29 "%0 [%!LEVEL!] amss.c::%!FUNC!:: Failed RtlAppendUnicodeStringToString STR_BACKSLASH with %10!s!" //   LEVEL=LOG_ERR_ FLAGS=Core FUNC=AMSSReadLPMValueFromRegistry
{
status, ItemNTSTATUS -- 10
}
#typev amss_c257 28 "%0 [%!LEVEL!] amss.c::%!FUNC!:: Failed RtlAppendUnicodeStringToString chipinfo with %10!s!" //   LEVEL=LOG_ERR_ FLAGS=Core FUNC=AMSSReadLPMValueFromRegistry
{
status, ItemNTSTATUS -- 10
}
#typev amss_c251 27 "%0 [%!LEVEL!] amss.c::%!FUNC!:: Failed RtlIntegerToUnicodeString chipinfo with %10!s!" //   LEVEL=LOG_ERR_ FLAGS=Core FUNC=AMSSReadLPMValueFromRegistry
{
status, ItemNTSTATUS -- 10
}
#typev amss_c244 26 "%0 [%!LEVEL!] amss.c::%!FUNC!:: Failed RtlAppendUnicodeStringToString wDriverNameStr with %10!s!" //   LEVEL=LOG_ERR_ FLAGS=Core FUNC=AMSSReadLPMValueFromRegistry
{
status, ItemNTSTATUS -- 10
}
#typev amss_c238 25 "%0 [%!LEVEL!] amss.c::%!FUNC!:: Failed RtlAppendUnicodeStringToString STR_BACKSLASH with %10!s!" //   LEVEL=LOG_ERR_ FLAGS=Core FUNC=AMSSReadLPMValueFromRegistry
{
status, ItemNTSTATUS -- 10
}
#typev amss_c232 24 "%0 [%!LEVEL!] amss.c::%!FUNC!:: Failed RtlAppendUnicodeStringToString chipinfo with %10!s!" //   LEVEL=LOG_ERR_ FLAGS=Core FUNC=AMSSReadLPMValueFromRegistry
{
status, ItemNTSTATUS -- 10
}
#typev amss_c226 23 "%0 [%!LEVEL!] amss.c::%!FUNC!:: Failed RtlIntegerToUnicodeString chipinfo with %10!s!" //   LEVEL=LOG_ERR_ FLAGS=Core FUNC=AMSSReadLPMValueFromRegistry
{
status, ItemNTSTATUS -- 10
}
#typev amss_c219 22 "%0 [%!LEVEL!] amss.c::%!FUNC!:: Failed RtlAnsiStringToUnicodeString driverName with %10!s!" //   LEVEL=LOG_ERR_ FLAGS=Core FUNC=AMSSReadLPMValueFromRegistry
{
status, ItemNTSTATUS -- 10
}
#typev amss_c213 21 "%0 [%!LEVEL!] amss.c::%!FUNC!:: Failed RtlInitAnsiStringEx driverName with %10!s!" //   LEVEL=LOG_ERR_ FLAGS=Core FUNC=AMSSReadLPMValueFromRegistry
{
status, ItemNTSTATUS -- 10
}
#typev amss_c202 20 "%0 [%!LEVEL!] amss.c::%!FUNC!:: Failed WdfDeviceOpenRegistryKey with %10!s!" //   LEVEL=LOG_ERR_ FLAGS=Core FUNC=AMSSReadLPMValueFromRegistry
{
status, ItemNTSTATUS -- 10
}
#typev amss_c176 19 "%0 [%!LEVEL!] amss.c::%!FUNC!::Entry" //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=AMSSReadLPMValueFromRegistry
{
}
#typev amss_c297 31 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: WdfRegistryQueryULong returned with status %10!s! " //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=AMSSReadLPMValueFromRegistry$fin$0
{
status, ItemNTSTATUS -- 10
}
#typev amss_c269 30 "%0 [%!LEVEL!] amss.c::%!FUNC!:: Failed RtlAppendUnicodeStringToString wDriverNameStr with %10!s!" //   LEVEL=LOG_ERR_ FLAGS=Core FUNC=AMSSReadLPMValueFromRegistry$fin$0
{
status, ItemNTSTATUS -- 10
}
#typev amss_c263 29 "%0 [%!LEVEL!] amss.c::%!FUNC!:: Failed RtlAppendUnicodeStringToString STR_BACKSLASH with %10!s!" //   LEVEL=LOG_ERR_ FLAGS=Core FUNC=AMSSReadLPMValueFromRegistry$fin$0
{
status, ItemNTSTATUS -- 10
}
#typev amss_c257 28 "%0 [%!LEVEL!] amss.c::%!FUNC!:: Failed RtlAppendUnicodeStringToString chipinfo with %10!s!" //   LEVEL=LOG_ERR_ FLAGS=Core FUNC=AMSSReadLPMValueFromRegistry$fin$0
{
status, ItemNTSTATUS -- 10
}
#typev amss_c251 27 "%0 [%!LEVEL!] amss.c::%!FUNC!:: Failed RtlIntegerToUnicodeString chipinfo with %10!s!" //   LEVEL=LOG_ERR_ FLAGS=Core FUNC=AMSSReadLPMValueFromRegistry$fin$0
{
status, ItemNTSTATUS -- 10
}
#typev amss_c244 26 "%0 [%!LEVEL!] amss.c::%!FUNC!:: Failed RtlAppendUnicodeStringToString wDriverNameStr with %10!s!" //   LEVEL=LOG_ERR_ FLAGS=Core FUNC=AMSSReadLPMValueFromRegistry$fin$0
{
status, ItemNTSTATUS -- 10
}
#typev amss_c238 25 "%0 [%!LEVEL!] amss.c::%!FUNC!:: Failed RtlAppendUnicodeStringToString STR_BACKSLASH with %10!s!" //   LEVEL=LOG_ERR_ FLAGS=Core FUNC=AMSSReadLPMValueFromRegistry$fin$0
{
status, ItemNTSTATUS -- 10
}
#typev amss_c232 24 "%0 [%!LEVEL!] amss.c::%!FUNC!:: Failed RtlAppendUnicodeStringToString chipinfo with %10!s!" //   LEVEL=LOG_ERR_ FLAGS=Core FUNC=AMSSReadLPMValueFromRegistry$fin$0
{
status, ItemNTSTATUS -- 10
}
#typev amss_c226 23 "%0 [%!LEVEL!] amss.c::%!FUNC!:: Failed RtlIntegerToUnicodeString chipinfo with %10!s!" //   LEVEL=LOG_ERR_ FLAGS=Core FUNC=AMSSReadLPMValueFromRegistry$fin$0
{
status, ItemNTSTATUS -- 10
}
#typev amss_c219 22 "%0 [%!LEVEL!] amss.c::%!FUNC!:: Failed RtlAnsiStringToUnicodeString driverName with %10!s!" //   LEVEL=LOG_ERR_ FLAGS=Core FUNC=AMSSReadLPMValueFromRegistry$fin$0
{
status, ItemNTSTATUS -- 10
}
#typev amss_c213 21 "%0 [%!LEVEL!] amss.c::%!FUNC!:: Failed RtlInitAnsiStringEx driverName with %10!s!" //   LEVEL=LOG_ERR_ FLAGS=Core FUNC=AMSSReadLPMValueFromRegistry$fin$0
{
status, ItemNTSTATUS -- 10
}
#typev amss_c202 20 "%0 [%!LEVEL!] amss.c::%!FUNC!:: Failed WdfDeviceOpenRegistryKey with %10!s!" //   LEVEL=LOG_ERR_ FLAGS=Core FUNC=AMSSReadLPMValueFromRegistry$fin$0
{
status, ItemNTSTATUS -- 10
}
#typev amss_c176 19 "%0 [%!LEVEL!] amss.c::%!FUNC!::Entry" //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=AMSSReadLPMValueFromRegistry$fin$0
{
}
#typev amss_c653 70 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: RtlGUIDFromString returned with non-success status %10!s! " //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_GetFirmwareID
{
status, ItemNTSTATUS -- 10
}
#typev amss_c641 69 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: WdfRegistryQueryString returned with non-success status %10!s! " //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_GetFirmwareID
{
status, ItemNTSTATUS -- 10
}
#typev amss_c630 68 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: WdfStringCreate returned with non-success status %10!s! " //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_GetFirmwareID
{
status, ItemNTSTATUS -- 10
}
#typev amss_c614 67 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: WdfDeviceOpenRegistryKey returned with non-success status %10!s! " //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_GetFirmwareID
{
status, ItemNTSTATUS -- 10
}
#typev amss_c601 66 "%0 [%!LEVEL!] amss.c::%!FUNC!::Entry to %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=AMSS_GetFirmwareID
{
}
#typev amss_c745 77 "%0 [%!LEVEL!] amss.c::%!FUNC!::Exit from %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=AMSS_InitializeQmi
{
}
#typev amss_c736 76 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: failed to create DMS client" //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_InitializeQmi
{
}
#typev amss_c716 75 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: failed to create SSCTL client" //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_InitializeQmi
{
}
#typev amss_c699 74 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: failed to create TMD client" //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_InitializeQmi
{
}
#typev amss_c681 73 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: Failure to get AMSS device context " //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_InitializeQmi
{
}
#typev amss_c674 72 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: Failure to get common context " //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_InitializeQmi
{
}
#typev amss_c668 71 "%0 [%!LEVEL!] amss.c::%!FUNC!::Entry to %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=AMSS_InitializeQmi
{
}
#typev amss_c745 77 "%0 [%!LEVEL!] amss.c::%!FUNC!::Exit from %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=AMSS_InitializeQmi$fin$0
{
}
#typev amss_c736 76 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: failed to create DMS client" //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_InitializeQmi$fin$0
{
}
#typev amss_c716 75 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: failed to create SSCTL client" //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_InitializeQmi$fin$0
{
}
#typev amss_c699 74 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: failed to create TMD client" //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_InitializeQmi$fin$0
{
}
#typev amss_c681 73 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: Failure to get AMSS device context " //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_InitializeQmi$fin$0
{
}
#typev amss_c674 72 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: Failure to get common context " //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_InitializeQmi$fin$0
{
}
#typev amss_c668 71 "%0 [%!LEVEL!] amss.c::%!FUNC!::Entry to %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=AMSS_InitializeQmi$fin$0
{
}
#typev amss_c84 12 "%0 [%!LEVEL!] amss.c::%!FUNC!::Will bug check the HLOS on behalf of the AMSS subsystem (this is NOT an issue in the AMSS driver)" //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_IssueBugcheck
{
}
#typev amss_c83 11 "%0 [%!LEVEL!] amss.c::%!FUNC!::The AMSS subsystem has crashed, please work with the AMSS triage team to continue debugging" //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_IssueBugcheck
{
}
#typev amss_c82 10 "%0 [%!LEVEL!] amss.c::%!FUNC!::Detected fatal error from the AMSS subsystem!" //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_IssueBugcheck
{
}
#typev amss_c571 65 "%0 [%!LEVEL!] amss.c::%!FUNC!::Exit from %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=AMSS_LoadDriverParameters
{
}
#typev amss_c562 64 "%0 [%!LEVEL!] amss.c::%!FUNC!::Device Hardware key not opened!  Last status = %10!s!" //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
status, ItemNTSTATUS -- 10
}
#typev amss_c543 63 "%0 [%!LEVEL!] amss.c::%!FUNC!::Using default software image path: %10!s! " //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
DRIVER_PARAMETER_IMAGE2_PATH_DEFAULT, ItemWString -- 10
}
#typev amss_c542 62 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: We will load the subsystem image from the default path (which may differ from where the images actually are)! " //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
}
#typev amss_c538 61 "%0 [%!LEVEL!] amss.c::%!FUNC!::We are using the software image %10!s! " //   LEVEL=LOG_INFO FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
commonContext->ImagePath[0], ItemWString -- 10
}
#typev amss_c533 60 "%0 [%!LEVEL!] amss.c::%!FUNC!::InsertCorrectDriveLetter failed for AMSS Software Image Path!  Last status = %10!s!" //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
status, ItemNTSTATUS -- 10
}
#typev amss_c522 59 "%0 [%!LEVEL!] amss.c::%!FUNC!::Successfully opened AMSS root registry key " //   LEVEL=LOG_INFO FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
}
#typev amss_c515 58 "%0 [%!LEVEL!] amss.c::%!FUNC!::Warning, we will load the subsystem image from the default path (which may differ from where the images actually are)! " //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
}
#typev amss_c514 57 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: WdfDeviceOpenRegistryKey returned with status %10!s! " //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
status, ItemNTSTATUS -- 10
}
#typev amss_c502 56 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: LoadBufferConfig returned with status %10!s! " //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
status, ItemNTSTATUS -- 10
}
#typev amss_c485 54 "%0 [%!LEVEL!] amss.c::%!FUNC!::Releasing hKeyParams " //   LEVEL=LOG_INFO FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
}
#typev amss_c483 53 "%0 [%!LEVEL!] amss.c::%!FUNC!::IgnoreWdogEnabled reg key value set to %10!u! " //   LEVEL=LOG_INFO FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
commonContext->IgnoreWdogEnabled, ItemLong -- 10
}
#typev amss_c480 52 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: WdfRegistryQueryULong returned with status %10!s! " //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
status, ItemNTSTATUS -- 10
}
#typev amss_c470 51 "%0 [%!LEVEL!] amss.c::%!FUNC!::DebugMSS reg key value set to %10!u! " //   LEVEL=LOG_INFO FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
deviceContext->DebugMSS, ItemLong -- 10
}
#typev amss_c467 50 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: WdfRegistryQueryULong returned with status %10!s! " //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
status, ItemNTSTATUS -- 10
}
#typev amss_c461 49 "%0 [%!LEVEL!] amss.c::%!FUNC!::Modem load delay set to %10!u! " //   LEVEL=LOG_INFO FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
commonContext->ModemLoadDelay, ItemLong -- 10
}
#typev amss_c458 48 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: WdfRegistryQueryULong returned with status %10!s! " //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
status, ItemNTSTATUS -- 10
}
#typev amss_c452 47 "%0 [%!LEVEL!] amss.c::%!FUNC!::Child removal timeout set to %10!u! " //   LEVEL=LOG_INFO FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
commonContext->ChildRemovalTimeout, ItemLong -- 10
}
#typev amss_c449 46 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: WdfRegistryQueryULong returned with status %10!s! " //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
status, ItemNTSTATUS -- 10
}
#typev amss_c443 45 "%0 [%!LEVEL!] amss.c::%!FUNC!::Supervision timeout set to %10!u! " //   LEVEL=LOG_INFO FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
commonContext->LoadTimer, ItemLong -- 10
}
#typev amss_c440 44 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: WdfRegistryQueryULong returned with status %10!s! " //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
status, ItemNTSTATUS -- 10
}
#typev amss_c433 43 "%0 [%!LEVEL!] amss.c::%!FUNC!::Subsystem induced crash detection signature is not defined" //   LEVEL=LOG_INFO FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
}
#typev amss_c428 42 "%0 [%!LEVEL!] amss.c::%!FUNC!::Subsystem induced crash detection signature: %10!s!" //   LEVEL=LOG_INFO FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
commonContext->SubsysCrashDetectionSignature, ItemWString -- 10
}
#typev amss_c421 41 "%0 [%!LEVEL!] amss.c::%!FUNC!::Subsystem Restart Crash Detection key: %10!d!" //   LEVEL=LOG_INFO FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
commonContext->IsSubsysRestartCrashDetectionEnabled, ItemLong -- 10
}
#typev amss_c414 40 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: WdfRegistryQueryULong returned with status %10!s! " //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
status, ItemNTSTATUS -- 10
}
#typev amss_c408 39 "%0 [%!LEVEL!] amss.c::%!FUNC!::RestartTimer = %10!u!" //   LEVEL=LOG_INFO FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
commonContext->RestartTimer, ItemLong -- 10
}
#typev amss_c405 38 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: Default value will be used for RestartTimer " //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
}
#typev amss_c399 37 "%0 [%!LEVEL!] amss.c::%!FUNC!::MaxRestartCount = %10!u!" //   LEVEL=LOG_INFO FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
commonContext->MaxRestartCount, ItemLong -- 10
}
#typev amss_c396 36 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: WdfRegistryQueryULong returned with status %10!s! " //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
status, ItemNTSTATUS -- 10
}
#typev amss_c384 35 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: WdfDriverOpenParametersRegistryKey returned with status %10!s! " //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
status, ItemNTSTATUS -- 10
}
#typev amss_c364 34 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: Unable to read the LPMEnabled value from registry, subsystem driver will put the AMSS device in low power mode " //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
}
#typev amss_c350 33 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: Unable to read the graceful shutdown flag from registry, graceful shutdown for the modem will be disabled " //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_LoadDriverParameters
{
}
#typev amss_c342 32 "%0 [%!LEVEL!] amss.c::%!FUNC!::Entry to %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=AMSS_LoadDriverParameters
{
}
#typev amss_c882 93 "%0 [%!LEVEL!] amss.c::%!FUNC!::Exit from %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=AMSS_QmiDMSIndicationCallback
{
}
#typev amss_c875 92 "%0 [%!LEVEL!] amss.c::%!FUNC!::Received indication: 0x%10!Ix!. QmiClientHandle: %11!p! and user_handle: %12!p! do not match" //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=AMSS_QmiDMSIndicationCallback
{
msg_id, ItemPtr -- 10
pQmiClientInfo->QmiClientHandle, ItemPtr -- 11
user_handle, ItemPtr -- 12
}
#typev amss_c870 91 "%0 [%!LEVEL!] amss.c::%!FUNC!::Received a DMS indication with message id %10!d!" //   LEVEL=LOG_INFO FLAGS=AMSS FUNC=AMSS_QmiDMSIndicationCallback
{
msg_id, ItemLong -- 10
}
#typev amss_c864 90 "%0 [%!LEVEL!] amss.c::%!FUNC!::Received a DMS event report indication for operating mode %10!d!" //   LEVEL=LOG_INFO FLAGS=AMSS FUNC=AMSS_QmiDMSIndicationCallback
{
eventReportMsg.operating_mode, ItemLong -- 10
}
#typev amss_c858 89 "%0 [%!LEVEL!] amss.c::%!FUNC!::Received the DMS_OP_MODE_LOW_POWER_V01 indication, enqueueing a state machine pulse..." //   LEVEL=LOG_INFO FLAGS=AMSS FUNC=AMSS_QmiDMSIndicationCallback
{
}
#typev amss_c851 88 "%0 [%!LEVEL!] amss.c::%!FUNC!::DMS event report indication has an invalid operating mode" //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=AMSS_QmiDMSIndicationCallback
{
}
#typev amss_c846 87 "%0 [%!LEVEL!] amss.c::%!FUNC!::Unable to decode the DMS event report indication message. qmiStatus = %10!d!" //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_QmiDMSIndicationCallback
{
qmiStatus, ItemLong -- 10
}
#typev amss_c822 86 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: Failure to get device common context " //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_QmiDMSIndicationCallback
{
}
#typev amss_c818 85 "%0 [%!LEVEL!] amss.c::%!FUNC!::Entry to %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=AMSS_QmiDMSIndicationCallback
{
}
#typev amss_c800 84 "%0 [%!LEVEL!] amss.c::%!FUNC!::Exit from %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=AMSS_QmiSSCTLIndicationCallback
{
}
#typev amss_c793 83 "%0 [%!LEVEL!] amss.c::%!FUNC!::Received indication: 0x%10!Ix!. QmiClientHandle: %11!p! and user_handle: %12!p! do not match" //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=AMSS_QmiSSCTLIndicationCallback
{
msg_id, ItemPtr -- 10
pQmiClientInfo->QmiClientHandle, ItemPtr -- 11
user_handle, ItemPtr -- 12
}
#typev amss_c788 82 "%0 [%!LEVEL!] amss.c::%!FUNC!::Received an unknown indication: 0x%10!Ix! in %!FUNC! " //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=AMSS_QmiSSCTLIndicationCallback
{
msg_id, ItemPtr -- 10
}
#typev amss_c784 81 "%0 [%!LEVEL!] amss.c::%!FUNC!::Received QMI_SSCTL_SUBSYS_EVENT_COMP_IND_V02 " //   LEVEL=LOG_INFO FLAGS=AMSS FUNC=AMSS_QmiSSCTLIndicationCallback
{
}
#typev amss_c780 80 "%0 [%!LEVEL!] amss.c::%!FUNC!::Received QMI_SSCTL_SHUTDOWN_READY_IND_V02" //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=AMSS_QmiSSCTLIndicationCallback
{
}
#typev amss_c769 79 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: Failure to get device common context " //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_QmiSSCTLIndicationCallback
{
}
#typev amss_c762 78 "%0 [%!LEVEL!] amss.c::%!FUNC!::Entry to %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=AMSS_QmiSSCTLIndicationCallback
{
}
#typev amss_c145 18 "%0 [%!LEVEL!] amss.c::%!FUNC!::Exit from %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=AMSS_ReadRegistryKey
{
}
#typev amss_c142 17 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: WDF string creation failed " //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=AMSS_ReadRegistryKey
{
}
#typev amss_c137 16 "%0 [%!LEVEL!] amss.c::%!FUNC!::Failed to query registry key %10!s! " //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=AMSS_ReadRegistryKey
{
regKey->Buffer, ItemWString -- 10
}
#typev amss_c132 15 "%0 [%!LEVEL!] amss.c::%!FUNC!::Registry Key: %10!s!, Value: %11!s! " //   LEVEL=LOG_INFO FLAGS=AMSS FUNC=AMSS_ReadRegistryKey
{
regKey->Buffer, ItemWString -- 10
unicodeString->Buffer, ItemWString -- 11
}
#typev amss_c120 14 "%0 [%!LEVEL!] amss.c::%!FUNC!::Reading registry key %10!s! " //   LEVEL=LOG_INFO FLAGS=AMSS FUNC=AMSS_ReadRegistryKey
{
regKey->Buffer, ItemWString -- 10
}
#typev amss_c113 13 "%0 [%!LEVEL!] amss.c::%!FUNC!::Entry to %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=AMSS_ReadRegistryKey
{
}
#typev amss_c1001 104 "%0 [%!LEVEL!] amss.c::%!FUNC!::Exit from %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=AMSS_SendQMILPMRequest
{
}
#typev amss_c994 103 "%0 [%!LEVEL!] amss.c::%!FUNC!::Successfully placed the modem into LPM " //   LEVEL=LOG_INFO FLAGS=AMSS FUNC=AMSS_SendQMILPMRequest
{
}
#typev amss_c989 102 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: QMI_DMS_SET_OPERATING_MODE_REQ_V01 retured error code, error 0x%10!x!" //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_SendQMILPMRequest
{
setOperatingModeRspMsg.resp.error, ItemLong -- 10
}
#typev amss_c983 101 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: qmi_client_send_msg_sync unsuccessful for QMI_DMS_SET_OPERATING_MODE_REQ_V01, error 0x%10!x!" //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_SendQMILPMRequest
{
qmiRet, ItemLong -- 10
}
#typev amss_c959 100 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: qmi_client_send_msg_sync unsuccessful for QMI_DMS_SET_EVENT_REPORT_REQ_V01, error 0x%10!x!" //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=AMSS_SendQMILPMRequest
{
setEventReportRspMsg.resp.error, ItemLong -- 10
}
#typev amss_c955 99 "%0 [%!LEVEL!] amss.c::%!FUNC!::qmi_client_send_msg_sync unsuccessful for QMI_DMS_SET_EVENT_REPORT_REQ_V01, error 0x%10!x!" //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=AMSS_SendQMILPMRequest
{
qmiRet, ItemLong -- 10
}
#typev amss_c930 98 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: QmiServiceInit failed with status 0x%10!x!" //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_SendQMILPMRequest
{
status, ItemLong -- 10
}
#typev amss_c917 97 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: Failure to get our QMI client info " //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_SendQMILPMRequest
{
}
#typev amss_c909 96 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: Failure to get device common context " //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_SendQMILPMRequest
{
}
#typev amss_c902 95 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: Parameter is null" //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_SendQMILPMRequest
{
}
#typev amss_c898 94 "%0 [%!LEVEL!] amss.c::%!FUNC!::Entry to %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=AMSS_SendQMILPMRequest
{
}
#typev amss_c1088 113 "%0 [%!LEVEL!] amss.c::%!FUNC!::Exit from %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=AMSS_SendQMISubsystemShutdownRequest
{
}
#typev amss_c1082 112 "%0 [%!LEVEL!] [%10!s!] amss.c::%!FUNC!::Successfully sent the modem a shutdown request " //   LEVEL=LOG_CRIT FLAGS=AMSS SUBSYSTEM=cmnContext->type FUNC=AMSS_SendQMISubsystemShutdownRequest
{
SUBSYSTEM, ItemEnum(_SOC_SUBSYSTEM_TYPE) -- 10
}
#typev amss_c1076 111 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: QMI_SSCTL_SHUTDOWN_REQ_V02 retured error code, status 0x%10!x!" //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_SendQMISubsystemShutdownRequest
{
subsystemShutdownRspMsg.resp.error, ItemLong -- 10
}
#typev amss_c1069 110 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: qmi_client_send_msg_sync unsuccessful for QMI_SSCTL_SHUTDOWN_REQ_V02, status 0x%10!x!" //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_SendQMISubsystemShutdownRequest
{
qmiRet, ItemLong -- 10
}
#typev amss_c1047 109 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: QmiServiceInit failed for SSCTL with status 0x%10!x!" //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_SendQMISubsystemShutdownRequest
{
status, ItemLong -- 10
}
#typev amss_c1035 108 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: Failure to get our SSCTL client info" //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_SendQMISubsystemShutdownRequest
{
}
#typev amss_c1028 107 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: Failure to get device context " //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_SendQMISubsystemShutdownRequest
{
}
#typev amss_c1022 106 "%0 [%!LEVEL!] amss.c::%!FUNC!::FAILURE: Failure to get common context " //   LEVEL=LOG_ERR_ FLAGS=AMSS FUNC=AMSS_SendQMISubsystemShutdownRequest
{
}
#typev amss_c1018 105 "%0 [%!LEVEL!] amss.c::%!FUNC!::Entry to %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=AMSS_SendQMISubsystemShutdownRequest
{
}
#typev amss_c1265 124 "%0 [%!LEVEL!] amss.c::%!FUNC!::Exit from %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=CsqAcquireLock
{
}
#typev amss_c1258 123 "%0 [%!LEVEL!] amss.c::%!FUNC!::Entry to %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=CsqAcquireLock
{
}
#typev amss_c1299 129 "%0 [%!LEVEL!] amss.c::%!FUNC!::Exit from %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=CsqCompleteCanceledIrp
{
}
#typev amss_c1295 128 "%0 [%!LEVEL!] amss.c::%!FUNC!::CsqCompleteCanceledIrp: Completing IRP %10!p! " //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=CsqCompleteCanceledIrp
{
Irp, ItemPtr -- 10
}
#typev amss_c1291 127 "%0 [%!LEVEL!] amss.c::%!FUNC!::Entry to %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=CsqCompleteCanceledIrp
{
}
#typev amss_c1197 116 "%0 [%!LEVEL!] amss.c::%!FUNC!::Exit from %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=CsqInsertIrpEx
{
}
#typev amss_c1193 115 "%0 [%!LEVEL!] amss.c::%!FUNC!::CsqInsertIrpEx: Inserting IRP %10!p! " //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=CsqInsertIrpEx
{
Irp, ItemPtr -- 10
}
#typev amss_c1188 114 "%0 [%!LEVEL!] amss.c::%!FUNC!::Entry to %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=CsqInsertIrpEx
{
}
#typev amss_c1245 122 "%0 [%!LEVEL!] amss.c::%!FUNC!::Exit from %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=CsqPeekNextIrp
{
}
#typev amss_c1231 121 "%0 [%!LEVEL!] amss.c::%!FUNC!::Entry to %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=CsqPeekNextIrp
{
}
#typev amss_c1283 126 "%0 [%!LEVEL!] amss.c::%!FUNC!::Exit from %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=CsqReleaseLock
{
}
#typev amss_c1276 125 "%0 [%!LEVEL!] amss.c::%!FUNC!::Entry to %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=CsqReleaseLock
{
}
#typev amss_c1213 118 "%0 [%!LEVEL!] amss.c::%!FUNC!::CsqRemoveIrp: Skipping removal of IRP %10!p! as its not found in CSQ!" //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=CsqRemoveIrp
{
Irp, ItemPtr -- 10
}
#typev amss_c1220 120 "%0 [%!LEVEL!] amss.c::%!FUNC!::Exit from %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=CsqRemoveIrp
{
}
#typev amss_c1217 119 "%0 [%!LEVEL!] amss.c::%!FUNC!::CsqRemoveIrp: Removing IRP %10!p! " //   LEVEL=LOG_WARN FLAGS=AMSS FUNC=CsqRemoveIrp
{
Irp, ItemPtr -- 10
}
#typev amss_c1206 117 "%0 [%!LEVEL!] amss.c::%!FUNC!::Entry to %!FUNC! " //   LEVEL=LOG_INFO FLAGS=EntryExit FUNC=CsqRemoveIrp
{
}
#enumv _SOC_SUBSYSTEM_TYPE
{
SOC_SUBSYS_WIRELESS_MODEM,0x0
SOC_SUBSYS_AUDIO_DSP,0x1
SOC_SUBSYS_WIRELSS_CONNECTIVITY,0x2
SOC_SUBSYS_SENSORS,0x3
SOC_SUBSYS_COMPUTE_DSP,0x4
SOC_SUBSYS_SECURE_PROC,0x5
SOC_SUBSYS_VENDOR_DEFINED,0x10000
}
